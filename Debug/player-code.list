
player-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002890  08012264  08012264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014af4  08014af4  000160e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014af4  08014af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014afc  08014afc  000160e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014afc  08014afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014b00  08014b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08014b04  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000160e8  2**0
                  CONTENTS
 10 .bss          00002470  200000e8  200000e8  000160e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002558  20002558  000160e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000160e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000280db  00000000  00000000  00016118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061ff  00000000  00000000  0003e1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002008  00000000  00000000  000443f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001892  00000000  00000000  00046400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d2f3  00000000  00000000  00047c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cbf5  00000000  00000000  00074f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4caf  00000000  00000000  000a1b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00196829  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009018  00000000  00000000  0019686c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0019f884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801224c 	.word	0x0801224c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	0801224c 	.word	0x0801224c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <unmount_fs>:
FIL wav_file;

FATFS USBDISK_FatFs;


int unmount_fs(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	return f_mount(&USBDISK_FatFs, "", 0);
 8000594:	2200      	movs	r2, #0
 8000596:	4903      	ldr	r1, [pc, #12]	@ (80005a4 <unmount_fs+0x14>)
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <unmount_fs+0x18>)
 800059a:	f00b ff41 	bl	800c420 <f_mount>
 800059e:	4603      	mov	r3, r0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08012264 	.word	0x08012264
 80005a8:	20000334 	.word	0x20000334

080005ac <init_fs>:
int init_fs(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	return f_mount(&USBDISK_FatFs, "", 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	4903      	ldr	r1, [pc, #12]	@ (80005c0 <init_fs+0x14>)
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <init_fs+0x18>)
 80005b6:	f00b ff33 	bl	800c420 <f_mount>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	08012264 	.word	0x08012264
 80005c4:	20000334 	.word	0x20000334

080005c8 <parse_headers>:


static int parse_headers(FIL *fp, song_t *song) {
 80005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	b08d      	sub	sp, #52	@ 0x34
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
  size_t bytes_read = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
	chunk_header_t header = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]

  while (1) {
    // read chunk header
    f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	f107 0114 	add.w	r1, r7, #20
 80005ea:	2208      	movs	r2, #8
 80005ec:	68f8      	ldr	r0, [r7, #12]
 80005ee:	f00c f917 	bl	800c820 <f_read>
    if (bytes_read != sizeof(chunk_header_t) || header.chunk_size == 0) {
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d102      	bne.n	80005fe <parse_headers+0x36>
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <parse_headers+0x3c>
      // failed to read data
      return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	e10b      	b.n	800081c <parse_headers+0x254>
    }

    if (STR_EQ("LIST", header.chunk_id)) {
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2204      	movs	r2, #4
 800060a:	4987      	ldr	r1, [pc, #540]	@ (8000828 <parse_headers+0x260>)
 800060c:	4618      	mov	r0, r3
 800060e:	f010 fe49 	bl	80112a4 <strncmp>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11a      	bne.n	800064e <parse_headers+0x86>
      // found the header
      list_chunk_t list = {0};
 8000618:	4b84      	ldr	r3, [pc, #528]	@ (800082c <parse_headers+0x264>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	613b      	str	r3, [r7, #16]
      f_read(fp, &list, sizeof(list_chunk_t), &bytes_read);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	f107 0110 	add.w	r1, r7, #16
 8000626:	2204      	movs	r2, #4
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f00c f8f9 	bl	800c820 <f_read>
      if (bytes_read != sizeof(list_chunk_t) || STR_NEQ("INFO", list.format)) {
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d109      	bne.n	8000648 <parse_headers+0x80>
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2204      	movs	r2, #4
 800063a:	497d      	ldr	r1, [pc, #500]	@ (8000830 <parse_headers+0x268>)
 800063c:	4618      	mov	r0, r3
 800063e:	f010 fe31 	bl	80112a4 <strncmp>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d011      	beq.n	800066c <parse_headers+0xa4>
          // failed to read data
          return -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064c:	e0e6      	b.n	800081c <parse_headers+0x254>
      }
      break;
    } else {
      // skip unknown chunk
      header.chunk_size += header.chunk_size % 2;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	3301      	adds	r3, #1
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
      f_lseek(fp, fp->fptr + header.chunk_size);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	699a      	ldr	r2, [r3, #24]
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	4413      	add	r3, r2
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f00c fac3 	bl	800cbee <f_lseek>
      continue;
 8000668:	bf00      	nop
    f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 800066a:	e7ba      	b.n	80005e2 <parse_headers+0x1a>


  // read chunk header of info (and skip unknown chunks if neccessary)

  while (1) {
    f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	f107 0114 	add.w	r1, r7, #20
 8000674:	2208      	movs	r2, #8
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f00c f8d2 	bl	800c820 <f_read>
    if (bytes_read != sizeof(chunk_header_t) || header.chunk_size == 0) {
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b08      	cmp	r3, #8
 8000680:	d102      	bne.n	8000688 <parse_headers+0xc0>
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <parse_headers+0xc6>
      // failed to read data
      return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800068c:	e0c6      	b.n	800081c <parse_headers+0x254>
    }

    // name of the artist
    if (STR_EQ("IART", header.chunk_id)) {
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2204      	movs	r2, #4
 8000694:	4967      	ldr	r1, [pc, #412]	@ (8000834 <parse_headers+0x26c>)
 8000696:	4618      	mov	r0, r3
 8000698:	f010 fe04 	bl	80112a4 <strncmp>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d146      	bne.n	8000730 <parse_headers+0x168>
 80006a2:	466b      	mov	r3, sp
 80006a4:	461e      	mov	r6, r3
      char temp[header.chunk_size];
 80006a6:	69b9      	ldr	r1, [r7, #24]
 80006a8:	460b      	mov	r3, r1
 80006aa:	3b01      	subs	r3, #1
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ae:	2300      	movs	r3, #0
 80006b0:	460c      	mov	r4, r1
 80006b2:	461d      	mov	r5, r3
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	00eb      	lsls	r3, r5, #3
 80006be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006c2:	00e2      	lsls	r2, r4, #3
 80006c4:	2300      	movs	r3, #0
 80006c6:	4688      	mov	r8, r1
 80006c8:	4699      	mov	r9, r3
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006de:	1dcb      	adds	r3, r1, #7
 80006e0:	08db      	lsrs	r3, r3, #3
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	ebad 0d03 	sub.w	sp, sp, r3
 80006e8:	466b      	mov	r3, sp
 80006ea:	3300      	adds	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
      f_read(fp, temp, header.chunk_size, &bytes_read);
 80006ee:	69ba      	ldr	r2, [r7, #24]
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	6a39      	ldr	r1, [r7, #32]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f00c f892 	bl	800c820 <f_read>
      strncpy(song->artist, temp, SONGS_MAX_STRING_LENGTH);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8000702:	221e      	movs	r2, #30
 8000704:	6a39      	ldr	r1, [r7, #32]
 8000706:	4618      	mov	r0, r3
 8000708:	f010 fdde 	bl	80112c8 <strncpy>
      song->artist[SONGS_MAX_STRING_LENGTH - 1] = '\0';
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
      if (header.chunk_size % 2) {
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <parse_headers+0x164>
        f_lseek(fp, fp->fptr + 1);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	3301      	adds	r3, #1
 8000724:	4619      	mov	r1, r3
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f00c fa61 	bl	800cbee <f_lseek>
 800072c:	46b5      	mov	sp, r6
 800072e:	e79d      	b.n	800066c <parse_headers+0xa4>
      }
    } else if (STR_EQ("INAM", header.chunk_id)) {
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2204      	movs	r2, #4
 8000736:	4940      	ldr	r1, [pc, #256]	@ (8000838 <parse_headers+0x270>)
 8000738:	4618      	mov	r0, r3
 800073a:	f010 fdb3 	bl	80112a4 <strncmp>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d149      	bne.n	80007d8 <parse_headers+0x210>
 8000744:	466b      	mov	r3, sp
 8000746:	461e      	mov	r6, r3
      // name of the song
      char temp[header.chunk_size];
 8000748:	69b9      	ldr	r1, [r7, #24]
 800074a:	460b      	mov	r3, r1
 800074c:	3b01      	subs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000750:	2300      	movs	r3, #0
 8000752:	468a      	mov	sl, r1
 8000754:	469b      	mov	fp, r3
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800076a:	2300      	movs	r3, #0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	00c3      	lsls	r3, r0, #3
 800077c:	6838      	ldr	r0, [r7, #0]
 800077e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	00c2      	lsls	r2, r0, #3
 8000786:	1dcb      	adds	r3, r1, #7
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	ebad 0d03 	sub.w	sp, sp, r3
 8000790:	466b      	mov	r3, sp
 8000792:	3300      	adds	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
      f_read(fp, temp, header.chunk_size, &bytes_read);
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f00c f83e 	bl	800c820 <f_read>
      strncpy(song->name, temp, SONGS_MAX_STRING_LENGTH);
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	f203 234e 	addw	r3, r3, #590	@ 0x24e
 80007aa:	221e      	movs	r2, #30
 80007ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007ae:	4618      	mov	r0, r3
 80007b0:	f010 fd8a 	bl	80112c8 <strncpy>
      song->name[SONGS_MAX_STRING_LENGTH - 1] = '\0';
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
      if (header.chunk_size % 2) {
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <parse_headers+0x20c>
        f_lseek(fp, fp->fptr + 1);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f00c fa0d 	bl	800cbee <f_lseek>
 80007d4:	46b5      	mov	sp, r6
 80007d6:	e749      	b.n	800066c <parse_headers+0xa4>
      }
    } else if (STR_EQ("data", header.chunk_id)) {
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2204      	movs	r2, #4
 80007de:	4917      	ldr	r1, [pc, #92]	@ (800083c <parse_headers+0x274>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f010 fd5f 	bl	80112a4 <strncmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d109      	bne.n	8000800 <parse_headers+0x238>
      // We went too far and reached the end of the info chunk. The next
      // chunk is already the pcm data. Rewind the filepointer and exit.
      f_lseek(fp, fp->fptr - sizeof(chunk_header_t));
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	3b08      	subs	r3, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f00c f9fa 	bl	800cbee <f_lseek>
      break;
 80007fa:	bf00      	nop
      // this chunk is unknown, skip it
      header.chunk_size += header.chunk_size % 2;
      f_lseek(fp, fp->fptr + header.chunk_size);
    }
  }
  return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e00d      	b.n	800081c <parse_headers+0x254>
      header.chunk_size += header.chunk_size % 2;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	3301      	adds	r3, #1
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
      f_lseek(fp, fp->fptr + header.chunk_size);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	4413      	add	r3, r2
 8000812:	4619      	mov	r1, r3
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f00c f9ea 	bl	800cbee <f_lseek>
    f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 800081a:	e727      	b.n	800066c <parse_headers+0xa4>
}
 800081c:	4618      	mov	r0, r3
 800081e:	3734      	adds	r7, #52	@ 0x34
 8000820:	46bd      	mov	sp, r7
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000826:	bf00      	nop
 8000828:	08012268 	.word	0x08012268
 800082c:	08012290 	.word	0x08012290
 8000830:	08012270 	.word	0x08012270
 8000834:	08012278 	.word	0x08012278
 8000838:	08012280 	.word	0x08012280
 800083c:	08012288 	.word	0x08012288

08000840 <parse_data>:


static int parse_data(FIL *fp, song_t *song) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	size_t bytes_read = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	chunk_header_t header = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
	while (1) {
		// read chunk header
		f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	2208      	movs	r2, #8
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f00b ffdc 	bl	800c820 <f_read>
		if (bytes_read != sizeof(chunk_header_t) || header.chunk_size == 0) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d102      	bne.n	8000874 <parse_data+0x34>
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <parse_data+0x3a>
			// failed to read data
			return -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000878:	e01e      	b.n	80008b8 <parse_data+0x78>
		}

		if (STR_NEQ("data", header.chunk_id)) {
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2204      	movs	r2, #4
 8000880:	490f      	ldr	r1, [pc, #60]	@ (80008c0 <parse_data+0x80>)
 8000882:	4618      	mov	r0, r3
 8000884:	f010 fd0e 	bl	80112a4 <strncmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00d      	beq.n	80008aa <parse_data+0x6a>
			// this chunk is unknown, skip it
			header.chunk_size += header.chunk_size % 2;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	3301      	adds	r3, #1
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	613b      	str	r3, [r7, #16]
			f_lseek(fp, fp->fptr + header.chunk_size);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	4413      	add	r3, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f00c f9a3 	bl	800cbee <f_lseek>
		f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 80008a8:	e7d6      	b.n	8000858 <parse_data+0x18>
		} else {
			// we found the data, exit loop
			break;
 80008aa:	bf00      	nop
		}
	}

	song->samples = header.chunk_size / 2;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	085a      	lsrs	r2, r3, #1
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
	// File pointer is now at the end of all headers, what follows is just the
	// raw pcm bitstream.
	return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08012288 	.word	0x08012288

080008c4 <validate_wav_file>:

int validate_wav_file(FIL *fp, char *fname) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	/// reading the default RIFF and WAV format header
	size_t bytes_read = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
	chunk_header_t header = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
	f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 80008dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e0:	f107 011c 	add.w	r1, r7, #28
 80008e4:	2208      	movs	r2, #8
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f00b ff9a 	bl	800c820 <f_read>
	if (STR_NEQ("RIFF", header.chunk_id) || bytes_read != sizeof(chunk_header_t)) {
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2204      	movs	r2, #4
 80008f2:	4935      	ldr	r1, [pc, #212]	@ (80009c8 <validate_wav_file+0x104>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f010 fcd5 	bl	80112a4 <strncmp>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <validate_wav_file+0x42>
 8000900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000902:	2b08      	cmp	r3, #8
 8000904:	d002      	beq.n	800090c <validate_wav_file+0x48>
		return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090a:	e059      	b.n	80009c0 <validate_wav_file+0xfc>
	}

  // chunk data for id "RIFF"
  //  - should be just "WAVE"
  riff_chunk_t riff = {0};
 800090c:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <validate_wav_file+0x108>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	61bb      	str	r3, [r7, #24]
  f_read(fp, &riff, sizeof(riff_chunk_t), &bytes_read);
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	f107 0118 	add.w	r1, r7, #24
 800091a:	2204      	movs	r2, #4
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f00b ff7f 	bl	800c820 <f_read>
  if (STR_NEQ("WAVE", riff.format) || bytes_read != sizeof(riff_chunk_t)) {
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2204      	movs	r2, #4
 8000928:	4929      	ldr	r1, [pc, #164]	@ (80009d0 <validate_wav_file+0x10c>)
 800092a:	4618      	mov	r0, r3
 800092c:	f010 fcba 	bl	80112a4 <strncmp>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <validate_wav_file+0x78>
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	2b04      	cmp	r3, #4
 800093a:	d002      	beq.n	8000942 <validate_wav_file+0x7e>
    return -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000940:	e03e      	b.n	80009c0 <validate_wav_file+0xfc>
  }

  // read chunk header for format
  //  - should be of id "fmt "
  //  - should have a size of 16 bytes
  f_read(fp, &header, sizeof(chunk_header_t), &bytes_read);
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	f107 011c 	add.w	r1, r7, #28
 800094a:	2208      	movs	r2, #8
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f00b ff67 	bl	800c820 <f_read>
  if (header.chunk_size != sizeof(fmt_chunk_t) || bytes_read != sizeof(chunk_header_t) || STR_NEQ("fmt ", header.chunk_id)) {
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	2b10      	cmp	r3, #16
 8000956:	d10c      	bne.n	8000972 <validate_wav_file+0xae>
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095a:	2b08      	cmp	r3, #8
 800095c:	d109      	bne.n	8000972 <validate_wav_file+0xae>
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2204      	movs	r2, #4
 8000964:	491b      	ldr	r1, [pc, #108]	@ (80009d4 <validate_wav_file+0x110>)
 8000966:	4618      	mov	r0, r3
 8000968:	f010 fc9c 	bl	80112a4 <strncmp>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <validate_wav_file+0xb4>
    return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000976:	e023      	b.n	80009c0 <validate_wav_file+0xfc>
  // chunk data for id "fmt ", should have:
  // - 16 bits depth
  // - 48 kHz sample rate
  // - stereo channel
  // - uncompressed pcm encoding
  fmt_chunk_t fmt = {0};
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  f_read(fp, &fmt, sizeof(fmt_chunk_t), &bytes_read);
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	f107 0108 	add.w	r1, r7, #8
 800098e:	2210      	movs	r2, #16
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f00b ff45 	bl	800c820 <f_read>
  if (bytes_read != sizeof(fmt_chunk_t) || fmt.audio_format != 1 || fmt.num_channels != 1 || fmt.sample_rate != 44000 || fmt.bits_per_sample != 16) {
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	2b10      	cmp	r3, #16
 800099a:	d10d      	bne.n	80009b8 <validate_wav_file+0xf4>
 800099c:	893b      	ldrh	r3, [r7, #8]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10a      	bne.n	80009b8 <validate_wav_file+0xf4>
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d107      	bne.n	80009b8 <validate_wav_file+0xf4>
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d102      	bne.n	80009b8 <validate_wav_file+0xf4>
 80009b2:	8afb      	ldrh	r3, [r7, #22]
 80009b4:	2b10      	cmp	r3, #16
 80009b6:	d002      	beq.n	80009be <validate_wav_file+0xfa>
    return -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009bc:	e000      	b.n	80009c0 <validate_wav_file+0xfc>
  }

	return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08012294 	.word	0x08012294
 80009cc:	080122ac 	.word	0x080122ac
 80009d0:	0801229c 	.word	0x0801229c
 80009d4:	080122a4 	.word	0x080122a4

080009d8 <populate_songs>:


void populate_songs(song_list_t* songs, size_t len) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09a      	sub	sp, #104	@ 0x68
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	// Open root directory to search for .wav files.
	DIR dir;
	FRESULT res;
	char *fn;
	res = f_opendir(&dir, "0:/");
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4965      	ldr	r1, [pc, #404]	@ (8000b7c <populate_songs+0x1a4>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00c fb09 	bl	800d000 <f_opendir>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	if (res != FR_OK) {
 80009f4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f040 80bb 	bne.w	8000b74 <populate_songs+0x19c>
		return;
	}

	size_t song_nr = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	667b      	str	r3, [r7, #100]	@ 0x64


	while(song_nr < len) {	// loop through all the files and populate the
 8000a02:	e0ac      	b.n	8000b5e <populate_songs+0x186>
		 FILINFO curr_file;

		 // exit if at the end of directory or on error
		 if (f_readdir(&dir, &curr_file) != FR_OK || curr_file.fname[0] == 0) {
 8000a04:	f107 0208 	add.w	r2, r7, #8
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00c fb8f 	bl	800d132 <f_readdir>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 80a6 	bne.w	8000b68 <populate_songs+0x190>
 8000a1c:	7c7b      	ldrb	r3, [r7, #17]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 80a2 	beq.w	8000b68 <populate_songs+0x190>
			 break;
		 }


		 fn = curr_file.fname;
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	3309      	adds	r3, #9
 8000a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		 LCD_UsrLog(fn);
 8000a2c:	4b54      	ldr	r3, [pc, #336]	@ (8000b80 <populate_songs+0x1a8>)
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000a36:	f010 fbbd 	bl	80111b4 <iprintf>
		 LCD_UsrLog("\n");
 8000a3a:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <populate_songs+0x1a8>)
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	200a      	movs	r0, #10
 8000a44:	f010 fbc8 	bl	80111d8 <putchar>
		 // making sure the filename contains .wav
		 if ((strstr(fn, "wav")) || (strstr(fn, "WAV"))) {
 8000a48:	494e      	ldr	r1, [pc, #312]	@ (8000b84 <populate_songs+0x1ac>)
 8000a4a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000a4c:	f010 fc4f 	bl	80112ee <strstr>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d106      	bne.n	8000a64 <populate_songs+0x8c>
 8000a56:	494c      	ldr	r1, [pc, #304]	@ (8000b88 <populate_songs+0x1b0>)
 8000a58:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000a5a:	f010 fc48 	bl	80112ee <strstr>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d077      	beq.n	8000b54 <populate_songs+0x17c>
			 FRESULT res = f_open(&wav_file, curr_file.fname, FA_OPEN_EXISTING | FA_READ);
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	3309      	adds	r3, #9
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4847      	ldr	r0, [pc, #284]	@ (8000b8c <populate_songs+0x1b4>)
 8000a70:	f00b fd1c 	bl	800c4ac <f_open>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			 if (res != FR_OK) {
 8000a7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d16c      	bne.n	8000b5c <populate_songs+0x184>
				// should proply print an error indicating failure to open wav file but whatever
				continue;
			 }
			 int result = validate_wav_file(&wav_file, curr_file.fname);
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	3309      	adds	r3, #9
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4840      	ldr	r0, [pc, #256]	@ (8000b8c <populate_songs+0x1b4>)
 8000a8c:	f7ff ff1a 	bl	80008c4 <validate_wav_file>
 8000a90:	6578      	str	r0, [r7, #84]	@ 0x54
			 if (result != -1) {
 8000a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a98:	d058      	beq.n	8000b4c <populate_songs+0x174>
				 ////// parsing header info
				if (parse_headers(&wav_file, &songs->songs[song_nr]) != 0) {
 8000a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a9c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4837      	ldr	r0, [pc, #220]	@ (8000b8c <populate_songs+0x1b4>)
 8000aae:	f7ff fd8b 	bl	80005c8 <parse_headers>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01d      	beq.n	8000af4 <populate_songs+0x11c>
					// we don't know the artist or song name so set it to unknown
					strncpy(songs->songs[song_nr].artist, "Unknown", SONGS_MAX_STRING_LENGTH);
 8000ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000aba:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	3308      	adds	r3, #8
 8000acc:	221e      	movs	r2, #30
 8000ace:	4930      	ldr	r1, [pc, #192]	@ (8000b90 <populate_songs+0x1b8>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f010 fbf9 	bl	80112c8 <strncpy>
					strncpy(songs->songs[song_nr].name, "Unknown", SONGS_MAX_STRING_LENGTH);
 8000ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ad8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	330a      	adds	r3, #10
 8000aea:	221e      	movs	r2, #30
 8000aec:	4928      	ldr	r1, [pc, #160]	@ (8000b90 <populate_songs+0x1b8>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f010 fbea 	bl	80112c8 <strncpy>
				}

				// read chunk header for data (and skip unknown chunks if neccessary)
				if (parse_data(&wav_file, &songs->songs[song_nr]) != 0) {
 8000af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000af6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	3304      	adds	r3, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4821      	ldr	r0, [pc, #132]	@ (8000b8c <populate_songs+0x1b4>)
 8000b08:	f7ff fe9a 	bl	8000840 <parse_data>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <populate_songs+0x142>
					 f_close(&wav_file);
 8000b12:	481e      	ldr	r0, [pc, #120]	@ (8000b8c <populate_songs+0x1b4>)
 8000b14:	f00c f841 	bl	800cb9a <f_close>
					continue;
 8000b18:	e021      	b.n	8000b5e <populate_songs+0x186>
				}
				song_t *song = &songs->songs[song_nr];
 8000b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b1c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	3304      	adds	r3, #4
 8000b2a:	653b      	str	r3, [r7, #80]	@ 0x50
				song->file = wav_file;
 8000b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <populate_songs+0x1b4>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	4611      	mov	r1, r2
 8000b34:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f010 fc34 	bl	80113a6 <memcpy>
				song_nr++;
 8000b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b40:	3301      	adds	r3, #1
 8000b42:	667b      	str	r3, [r7, #100]	@ 0x64
				f_close(&wav_file);
 8000b44:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <populate_songs+0x1b4>)
 8000b46:	f00c f828 	bl	800cb9a <f_close>
		 if ((strstr(fn, "wav")) || (strstr(fn, "WAV"))) {
 8000b4a:	e008      	b.n	8000b5e <populate_songs+0x186>
			 } else {
				 // invalid .wav, so silently skip
				 f_close(&wav_file);
 8000b4c:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <populate_songs+0x1b4>)
 8000b4e:	f00c f824 	bl	800cb9a <f_close>
				 continue;
 8000b52:	e004      	b.n	8000b5e <populate_songs+0x186>
			 }
		 } else {
			 // silently skipping non wav files
			 f_close(&wav_file);
 8000b54:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <populate_songs+0x1b4>)
 8000b56:	f00c f820 	bl	800cb9a <f_close>
			 continue;
 8000b5a:	e000      	b.n	8000b5e <populate_songs+0x186>
				continue;
 8000b5c:	bf00      	nop
	while(song_nr < len) {	// loop through all the files and populate the
 8000b5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	f4ff af4e 	bcc.w	8000a04 <populate_songs+0x2c>
		 }
	}

	f_closedir(&dir);
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00c faba 	bl	800d0e6 <f_closedir>
 8000b72:	e000      	b.n	8000b76 <populate_songs+0x19e>
		return;
 8000b74:	bf00      	nop

}
 8000b76:	3768      	adds	r7, #104	@ 0x68
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	080122b0 	.word	0x080122b0
 8000b80:	200023f8 	.word	0x200023f8
 8000b84:	080122b4 	.word	0x080122b4
 8000b88:	080122b8 	.word	0x080122b8
 8000b8c:	20000104 	.word	0x20000104
 8000b90:	080122bc 	.word	0x080122bc

08000b94 <display_init>:
static size_t curr_song;


static void display_set_list(song_list_t *curr_songs, size_t ls_len);

int display_init(song_list_t *curr_songs, size_t ls_len) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	if (display_state != DISPLAY_NOT_INITIALIZED) {
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <display_init+0x4c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <display_init+0x18>
		// only allow initialization once
		return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000baa:	e014      	b.n	8000bd6 <display_init+0x42>
	}

	curr_song_ls = curr_songs;
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <display_init+0x50>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
	song_ls_len = ls_len;
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <display_init+0x54>)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	6013      	str	r3, [r2, #0]
	curr_song = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <display_init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
	display_state = DISPLAY_INITIALIZED;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <display_init+0x4c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	display_set_list(curr_song_ls, song_ls_len);
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <display_init+0x50>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <display_init+0x54>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f836 	bl	8000c40 <display_set_list>

  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000564 	.word	0x20000564
 8000be4:	20000568 	.word	0x20000568
 8000be8:	2000056c 	.word	0x2000056c
 8000bec:	20000570 	.word	0x20000570

08000bf0 <display_update>:


int display_update(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	display_set_list(curr_song_ls, song_ls_len);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <display_update+0x1c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <display_update+0x20>)
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f81e 	bl	8000c40 <display_set_list>
//	LCD_LOG_Init();		// resetting the display
//	LCD_LOG_SetHeader((uint8_t *)"Update just dropped");
	return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000568 	.word	0x20000568
 8000c10:	2000056c 	.word	0x2000056c

08000c14 <display_move_selection>:


void display_move_selection(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	curr_song++;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <display_move_selection+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <display_move_selection+0x28>)
 8000c20:	6013      	str	r3, [r2, #0]

	if (curr_song > 2) {
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <display_move_selection+0x28>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d902      	bls.n	8000c30 <display_move_selection+0x1c>
		curr_song = 0;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <display_move_selection+0x28>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
	}
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000570 	.word	0x20000570

08000c40 <display_set_list>:
int display_set_song(const song_t *song) {
  return 0;
}


static void display_set_list(song_list_t *curr_songs, size_t ls_len) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	@ 0x58
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	char tmp[(SONGS_MAX_STRING_LENGTH * 2) + 3]; // "artist" + " - " + "title"
	BSP_LCD_SetFont(LIST_FONT);
 8000c4a:	4833      	ldr	r0, [pc, #204]	@ (8000d18 <display_set_list+0xd8>)
 8000c4c:	f002 f836 	bl	8002cbc <BSP_LCD_SetFont>
	for (int i = 0; i < ls_len; ++i) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c54:	e04d      	b.n	8000cf2 <display_set_list+0xb2>
		if (i == curr_song) {
 8000c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c58:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <display_set_list+0xdc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d108      	bne.n	8000c72 <display_set_list+0x32>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c60:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c64:	f001 fff8 	bl	8002c58 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f002 f80c 	bl	8002c88 <BSP_LCD_SetBackColor>
 8000c70:	e007      	b.n	8000c82 <display_set_list+0x42>
		} else {
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c76:	f001 ffef 	bl	8002c58 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000c7a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c7e:	f002 f803 	bl	8002c88 <BSP_LCD_SetBackColor>
		}
		snprintf(tmp, sizeof(tmp), "%s - %s", curr_songs->songs[i].artist, curr_songs->songs[i].name);
 8000c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c84:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	f103 0108 	add.w	r1, r3, #8
 8000c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c9a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	330a      	adds	r3, #10
 8000cac:	f107 000c 	add.w	r0, r7, #12
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <display_set_list+0xe0>)
 8000cb6:	213f      	movs	r1, #63	@ 0x3f
 8000cb8:	f010 f97a 	bl	8010fb0 <sniprintf>
		strcat(tmp, "\n");
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fa95 	bl	80001f0 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4413      	add	r3, r2
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <display_set_list+0xe4>)
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	8013      	strh	r3, [r2, #0]
		LCD_UsrLog(tmp);
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <display_set_list+0xe8>)
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f010 fa64 	bl	80111b4 <iprintf>
	for (int i = 0; i < ls_len; ++i) {
 8000cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d8ad      	bhi.n	8000c56 <display_set_list+0x16>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfe:	f001 ffab 	bl	8002c58 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000d02:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000d06:	f001 ffbf 	bl	8002c88 <BSP_LCD_SetBackColor>
	display_state = DISPLAY_INIT_LIST;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <display_set_list+0xec>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	@ 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000058 	.word	0x20000058
 8000d1c:	20000570 	.word	0x20000570
 8000d20:	080122c4 	.word	0x080122c4
 8000d24:	080122cc 	.word	0x080122cc
 8000d28:	200023f8 	.word	0x200023f8
 8000d2c:	20000564 	.word	0x20000564

08000d30 <main>:
static void LCD_Config(void);

static void TIMx_Config(void);


int main(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d34:	f002 fd46 	bl	80037c4 <HAL_Init>
	SystemClock_Config();
 8000d38:	f000 f98a 	bl	8001050 <SystemClock_Config>

	BSP_LED_Init(LED3);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f001 fbed 	bl	800251c <BSP_LED_Init>
	BSP_LED_Init(LED4);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f001 fbea 	bl	800251c <BSP_LED_Init>

	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f001 fc6e 	bl	800262c <BSP_PB_Init>


	LCD_Config();
 8000d50:	f000 f8aa 	bl	8000ea8 <LCD_Config>


	USBH_init();
 8000d54:	f000 f858 	bl	8000e08 <USBH_init>


	DacHandle.Instance = DAC;
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <main+0x4c>)
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <main+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
	TIM6_Config();
 8000d5e:	f000 f9cb 	bl	80010f8 <TIM6_Config>
	TIMx_Config();
 8000d62:	f000 f813 	bl	8000d8c <TIMx_Config>

	while (1) {
		
		if (Appli_state == APPLICATION_START) {
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <main+0x54>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <main+0x42>
			audio_player_application();
 8000d6e:	f000 f8c9 	bl	8000f04 <audio_player_application>

		}

		USBH_Process(&hUSBHost);
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <main+0x58>)
 8000d74:	f00c fc32 	bl	800d5dc <USBH_Process>
		if (Appli_state == APPLICATION_START) {
 8000d78:	e7f5      	b.n	8000d66 <main+0x36>
 8000d7a:	bf00      	nop
 8000d7c:	20001210 	.word	0x20001210
 8000d80:	40007400 	.word	0x40007400
 8000d84:	2000120d 	.word	0x2000120d
 8000d88:	20000d34 	.word	0x20000d34

08000d8c <TIMx_Config>:
//		Toggle_Leds();
	}

}

static void TIMx_Config(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
	  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <TIMx_Config+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <TIMx_Config+0x6c>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0b9b      	lsrs	r3, r3, #14
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <TIMx_Config+0x70>)
 8000da4:	801a      	strh	r2, [r3, #0]

	  /* Set TIMx instance */
	  TimHandle.Instance = TIMx;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <TIMx_Config+0x74>)
 8000da8:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <TIMx_Config+0x78>)
 8000daa:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = ((SystemCoreClock/2)/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  TimHandle.Init.Period = 10000 - 1;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <TIMx_Config+0x74>)
 8000dae:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000db2:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <TIMx_Config+0x70>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <TIMx_Config+0x74>)
 8000dbc:	605a      	str	r2, [r3, #4]
	  TimHandle.Init.ClockDivision = 0;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <TIMx_Config+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <TIMx_Config+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <TIMx_Config+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
	  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <TIMx_Config+0x74>)
 8000dd2:	f007 ff1f 	bl	8008c14 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <TIMx_Config+0x54>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000ddc:	f000 f9d4 	bl	8001188 <Error_Handler>
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <TIMx_Config+0x74>)
 8000de2:	f007 ffcf 	bl	8008d84 <HAL_TIM_Base_Start_IT>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <TIMx_Config+0x64>
	  {
	    /* Starting Error */
	    Error_Handler();
 8000dec:	f000 f9cc 	bl	8001188 <Error_Handler>
	  }
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000004 	.word	0x20000004
 8000df8:	d1b71759 	.word	0xd1b71759
 8000dfc:	2000126c 	.word	0x2000126c
 8000e00:	20001224 	.word	0x20001224
 8000e04:	40000400 	.word	0x40000400

08000e08 <USBH_init>:


static void USBH_init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	/* Link the USB Host disk I/O driver */
	USBDISK_Driver_Num = FATFS_LinkDriver(&USBH_Driver, "");
 8000e0c:	490f      	ldr	r1, [pc, #60]	@ (8000e4c <USBH_init+0x44>)
 8000e0e:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <USBH_init+0x48>)
 8000e10:	f00c fa18 	bl	800d244 <FATFS_LinkDriver>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <USBH_init+0x4c>)
 8000e1a:	701a      	strb	r2, [r3, #0]

	/* Init Host Library */
	if (USBH_Init(&hUSBHost, USBH_UserProcess, 0) != USBH_OK) {
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <USBH_init+0x50>)
 8000e20:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <USBH_init+0x54>)
 8000e22:	f00c fa1f 	bl	800d264 <USBH_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <USBH_init+0x28>
		/* USB Initialization Error */
		Error_Handler();
 8000e2c:	f000 f9ac 	bl	8001188 <Error_Handler>
	}

	/* Add Supported Class */
	USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 8000e30:	490b      	ldr	r1, [pc, #44]	@ (8000e60 <USBH_init+0x58>)
 8000e32:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <USBH_init+0x54>)
 8000e34:	f00c fad2 	bl	800d3dc <USBH_RegisterClass>

	/* Start Host Process */
	if (USBH_Start(&hUSBHost) != USBH_OK) {
 8000e38:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <USBH_init+0x54>)
 8000e3a:	f00c fbbf 	bl	800d5bc <USBH_Start>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <USBH_init+0x40>
		/* USB Initialization Error */
		Error_Handler();
 8000e44:	f000 f9a0 	bl	8001188 <Error_Handler>
	}
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	080122d0 	.word	0x080122d0
 8000e50:	08012af4 	.word	0x08012af4
 8000e54:	2000120c 	.word	0x2000120c
 8000e58:	08000e65 	.word	0x08000e65
 8000e5c:	20000d34 	.word	0x20000d34
 8000e60:	2000006c 	.word	0x2000006c

08000e64 <USBH_UserProcess>:

static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
  switch (id) {
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d00c      	beq.n	8000e90 <USBH_UserProcess+0x2c>
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d10f      	bne.n	8000e9a <USBH_UserProcess+0x36>
  	case HOST_USER_DISCONNECTION:
			Appli_state = APPLICATION_IDLE;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <USBH_UserProcess+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			if (unmount_fs() != FR_OK) {
 8000e80:	f7ff fb86 	bl	8000590 <unmount_fs>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <USBH_UserProcess+0x34>
				/* FatFs Initialization Error */
				Error_Handler();
 8000e8a:	f000 f97d 	bl	8001188 <Error_Handler>
			}
    	break;
 8000e8e:	e003      	b.n	8000e98 <USBH_UserProcess+0x34>

  	case HOST_USER_CLASS_ACTIVE:
			Appli_state = APPLICATION_START;
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <USBH_UserProcess+0x40>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			break;
 8000e96:	e000      	b.n	8000e9a <USBH_UserProcess+0x36>
    	break;
 8000e98:	bf00      	nop
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000120d 	.word	0x2000120d

08000ea8 <LCD_Config>:


static void LCD_Config(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8000eac:	f001 fdcc 	bl	8002a48 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, (LCD_FRAME_BUFFER + BUFFER_OFFSET));
 8000eb0:	490f      	ldr	r1, [pc, #60]	@ (8000ef0 <LCD_Config+0x48>)
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 fe4a 	bl	8002b4c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SetTransparency(LCD_BACKGROUND_LAYER, 0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f001 feba 	bl	8002c34 <BSP_LCD_SetTransparency>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f001 fea7 	bl	8002c14 <BSP_LCD_SelectLayer>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000ec6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000eca:	f001 ff27 	bl	8002d1c <BSP_LCD_Clear>

	/* LCD Log initialization */
	LCD_LOG_Init();
 8000ece:	f00f fd8a 	bl	80109e6 <LCD_LOG_Init>

	LCD_LOG_SetHeader((uint8_t *)"LETS GO BITCH");
 8000ed2:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <LCD_Config+0x4c>)
 8000ed4:	f00f fdd2 	bl	8010a7c <LCD_LOG_SetHeader>
	LCD_UsrLog("> USB Host library started.\n");
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <LCD_Config+0x50>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <LCD_Config+0x54>)
 8000ee2:	f010 f9d7 	bl	8011294 <puts>
	LCD_LOG_SetFooter ((uint8_t *)"     USB Host Library V3.2.0" );
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <LCD_Config+0x58>)
 8000ee8:	f00f fe02 	bl	8010af0 <LCD_LOG_SetFooter>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	d0050000 	.word	0xd0050000
 8000ef4:	080122d4 	.word	0x080122d4
 8000ef8:	200023f8 	.word	0x200023f8
 8000efc:	080122e4 	.word	0x080122e4
 8000f00:	08012300 	.word	0x08012300

08000f04 <audio_player_application>:
static void audio_player_application(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	switch(USBH_USR_ApplicationState) {
 8000f08:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <audio_player_application+0xcc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d04f      	beq.n	8000fb0 <audio_player_application+0xac>
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	dc5a      	bgt.n	8000fca <audio_player_application+0xc6>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <audio_player_application+0x1a>
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d020      	beq.n	8000f5e <audio_player_application+0x5a>
//		    while((BSP_PB_GetState (BUTTON_KEY) != RESET))
//		    {
//		      Toggle_Leds();
//		    }
		default:
			break;
 8000f1c:	e055      	b.n	8000fca <audio_player_application+0xc6>
			if (init_fs() != FR_OK) {
 8000f1e:	f7ff fb45 	bl	80005ac <init_fs>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00f      	beq.n	8000f48 <audio_player_application+0x44>
				LCD_ErrLog("> File System NOT initialized.\n");
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd8 <audio_player_application+0xd4>)
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <audio_player_application+0xd8>)
 8000f30:	f010 f940 	bl	80111b4 <iprintf>
 8000f34:	482a      	ldr	r0, [pc, #168]	@ (8000fe0 <audio_player_application+0xdc>)
 8000f36:	f010 f9ad 	bl	8011294 <puts>
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f40:	601a      	str	r2, [r3, #0]
				Error_Handler();
 8000f42:	f000 f921 	bl	8001188 <Error_Handler>
			break;
 8000f46:	e041      	b.n	8000fcc <audio_player_application+0xc8>
				LCD_UsrLog("> File System initialized.\n");
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	4824      	ldr	r0, [pc, #144]	@ (8000fe4 <audio_player_application+0xe0>)
 8000f52:	f010 f99f 	bl	8011294 <puts>
				USBH_USR_ApplicationState = USH_USR_FS_READLIST;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <audio_player_application+0xcc>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
			break;
 8000f5c:	e036      	b.n	8000fcc <audio_player_application+0xc8>
			LCD_UsrLog("> Exploring disk flash ...\n");
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	4820      	ldr	r0, [pc, #128]	@ (8000fe8 <audio_player_application+0xe4>)
 8000f68:	f010 f994 	bl	8011294 <puts>
			if (explore_disk("0:/") != FR_OK) {
 8000f6c:	481f      	ldr	r0, [pc, #124]	@ (8000fec <audio_player_application+0xe8>)
 8000f6e:	f000 f847 	bl	8001000 <explore_disk>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00f      	beq.n	8000f98 <audio_player_application+0x94>
				LCD_ErrLog("> File cannot be explored.\n");
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <audio_player_application+0xd4>)
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <audio_player_application+0xd8>)
 8000f80:	f010 f918 	bl	80111b4 <iprintf>
 8000f84:	481a      	ldr	r0, [pc, #104]	@ (8000ff0 <audio_player_application+0xec>)
 8000f86:	f010 f985 	bl	8011294 <puts>
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <audio_player_application+0xd0>)
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f90:	601a      	str	r2, [r3, #0]
				Error_Handler();
 8000f92:	f000 f8f9 	bl	8001188 <Error_Handler>
			break;
 8000f96:	e019      	b.n	8000fcc <audio_player_application+0xc8>
				USBH_USR_ApplicationState = USH_USR_FS_PLAY;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <audio_player_application+0xcc>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
				display_init(&songs, num_songs);
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <audio_player_application+0xf0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <audio_player_application+0xf4>)
 8000fa6:	f7ff fdf5 	bl	8000b94 <display_init>
				display_update();
 8000faa:	f7ff fe21 	bl	8000bf0 <display_update>
			break;
 8000fae:	e00d      	b.n	8000fcc <audio_player_application+0xc8>
			USBH_USR_ApplicationState = USH_USR_FS_TMP;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <audio_player_application+0xcc>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	701a      	strb	r2, [r3, #0]
			LCD_UsrLog("So we do get here");
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <audio_player_application+0xd0>)
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <audio_player_application+0xf8>)
 8000fc0:	f010 f8f8 	bl	80111b4 <iprintf>
			display_update();
 8000fc4:	f7ff fe14 	bl	8000bf0 <display_update>
			break;
 8000fc8:	e000      	b.n	8000fcc <audio_player_application+0xc8>
			break;
 8000fca:	bf00      	nop
	} // end switch

	return;
 8000fcc:	bf00      	nop
}
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000120e 	.word	0x2000120e
 8000fd4:	200023f8 	.word	0x200023f8
 8000fd8:	ffff0000 	.word	0xffff0000
 8000fdc:	08012320 	.word	0x08012320
 8000fe0:	08012328 	.word	0x08012328
 8000fe4:	08012348 	.word	0x08012348
 8000fe8:	08012364 	.word	0x08012364
 8000fec:	08012380 	.word	0x08012380
 8000ff0:	08012384 	.word	0x08012384
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000574 	.word	0x20000574
 8000ffc:	080123a0 	.word	0x080123a0

08001000 <explore_disk>:

static uint8_t explore_disk(char *path) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	@ 0x40
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	res = f_opendir(&dir, path);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f00b fff6 	bl	800d000 <f_opendir>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (res == FR_OK) {
 800101a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <explore_disk+0x38>
		populate_songs(&songs, num_songs);
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <explore_disk+0x44>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <explore_disk+0x48>)
 800102a:	f7ff fcd5 	bl	80009d8 <populate_songs>
		LCD_LOG_Init();		// resetting the display
 800102e:	f00f fcda 	bl	80109e6 <LCD_LOG_Init>
		LCD_LOG_SetHeader((uint8_t *)"Pick a song: ");
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <explore_disk+0x4c>)
 8001034:	f00f fd22 	bl	8010a7c <LCD_LOG_SetHeader>
	}
	return res;
 8001038:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800103c:	4618      	mov	r0, r3
 800103e:	3740      	adds	r7, #64	@ 0x40
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000574 	.word	0x20000574
 800104c:	080123b4 	.word	0x080123b4

08001050 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	@ 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <SystemClock_Config+0xa0>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a24      	ldr	r2, [pc, #144]	@ (80010f0 <SystemClock_Config+0xa0>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <SystemClock_Config+0xa0>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <SystemClock_Config+0xa4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <SystemClock_Config+0xa4>)
 800107c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <SystemClock_Config+0xa4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001092:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001096:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a2:	2308      	movs	r3, #8
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80010a6:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 f8e9 	bl	8007290 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 80010be:	f006 f897 	bl	80071f0 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010c2:	230f      	movs	r3, #15
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80010da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010de:	2105      	movs	r1, #5
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fb4d 	bl	8007780 <HAL_RCC_ClockConfig>
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	@ 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <TIM6_Config>:

void TIM6_Config(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  static TIM_HandleTypeDef htim;
  TIM_MasterConfigTypeDef  sMasterConfig;

  /*##-1- Configure the TIM peripheral #######################################*/
  /* Time base configuration */
  htim.Instance = TIM6;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <TIM6_Config+0x4c>)
 8001100:	4a11      	ldr	r2, [pc, #68]	@ (8001148 <TIM6_Config+0x50>)
 8001102:	601a      	str	r2, [r3, #0]

  htim.Init.Period = 0x7FF;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <TIM6_Config+0x4c>)
 8001106:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800110a:	60da      	str	r2, [r3, #12]
  htim.Init.Prescaler = 0;
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <TIM6_Config+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  htim.Init.ClockDivision = 0;
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <TIM6_Config+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <TIM6_Config+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Init(&htim);
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <TIM6_Config+0x4c>)
 8001120:	f007 fd78 	bl	8008c14 <HAL_TIM_Base_Init>

  /* TIM6 TRGO selection */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001124:	2320      	movs	r3, #32
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]

  HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <TIM6_Config+0x4c>)
 8001132:	f008 f85b 	bl	80091ec <HAL_TIMEx_MasterConfigSynchronization>

  /*##-2- Enable TIM peripheral counter ######################################*/
  HAL_TIM_Base_Start(&htim);
 8001136:	4803      	ldr	r0, [pc, #12]	@ (8001144 <TIM6_Config+0x4c>)
 8001138:	f007 fdbc 	bl	8008cb4 <HAL_TIM_Base_Start>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20001270 	.word	0x20001270
 8001148:	40001000 	.word	0x40001000

0800114c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == KEY_BUTTON_PIN) {
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d104      	bne.n	8001166 <HAL_GPIO_EXTI_Callback+0x1a>
    /* Toggle LED3 */
    BSP_LED_Toggle(LED3);
 800115c:	2000      	movs	r0, #0
 800115e:	f001 fa4b 	bl	80025f8 <BSP_LED_Toggle>
    display_move_selection();
 8001162:	f7ff fd57 	bl	8000c14 <display_move_selection>
  }
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED4);
 8001176:	2001      	movs	r0, #1
 8001178:	f001 fa3e 	bl	80025f8 <BSP_LED_Toggle>
  display_update();
 800117c:	f7ff fd38 	bl	8000bf0 <display_update>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 800118c:	2001      	movs	r0, #1
 800118e:	f001 fa19 	bl	80025c4 <BSP_LED_On>
  while(1)
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <Error_Handler+0xa>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <HAL_DMA2D_MspInit+0x48>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d115      	bne.n	8001226 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_DMA2D_MspInit+0x4c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <HAL_DMA2D_MspInit+0x4c>)
 8001204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_DMA2D_MspInit+0x4c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2105      	movs	r1, #5
 800121a:	205a      	movs	r0, #90	@ 0x5a
 800121c:	f002 fc43 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001220:	205a      	movs	r0, #90	@ 0x5a
 8001222:	f002 fc5c 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	4002b000 	.word	0x4002b000
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09a      	sub	sp, #104	@ 0x68
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001254:	2230      	movs	r2, #48	@ 0x30
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f010 f85e 	bl	801131a <memset>
  if(hltdc->Instance==LTDC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a85      	ldr	r2, [pc, #532]	@ (8001478 <HAL_LTDC_MspInit+0x240>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8102 	bne.w	800146e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800126a:	2308      	movs	r3, #8
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800126e:	2332      	movs	r3, #50	@ 0x32
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001276:	2300      	movs	r3, #0
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	4618      	mov	r0, r3
 8001280:	f006 fc6a 	bl	8007b58 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800128a:	f7ff ff7d 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	4b7a      	ldr	r3, [pc, #488]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a79      	ldr	r2, [pc, #484]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001298:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b77      	ldr	r3, [pc, #476]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	4b73      	ldr	r3, [pc, #460]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a72      	ldr	r2, [pc, #456]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b70      	ldr	r3, [pc, #448]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b6c      	ldr	r3, [pc, #432]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a6b      	ldr	r2, [pc, #428]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b69      	ldr	r3, [pc, #420]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b65      	ldr	r3, [pc, #404]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a64      	ldr	r2, [pc, #400]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b62      	ldr	r3, [pc, #392]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b5e      	ldr	r3, [pc, #376]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a5d      	ldr	r2, [pc, #372]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b57      	ldr	r3, [pc, #348]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a56      	ldr	r2, [pc, #344]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b54      	ldr	r3, [pc, #336]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a4f      	ldr	r2, [pc, #316]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_LTDC_MspInit+0x244>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001364:	230e      	movs	r3, #14
 8001366:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136c:	4619      	mov	r1, r3
 800136e:	4844      	ldr	r0, [pc, #272]	@ (8001480 <HAL_LTDC_MspInit+0x248>)
 8001370:	f003 f81a 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001374:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001378:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001386:	230e      	movs	r3, #14
 8001388:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800138e:	4619      	mov	r1, r3
 8001390:	483c      	ldr	r0, [pc, #240]	@ (8001484 <HAL_LTDC_MspInit+0x24c>)
 8001392:	f003 f809 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001396:	2303      	movs	r3, #3
 8001398:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013a6:	2309      	movs	r3, #9
 80013a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ae:	4619      	mov	r1, r3
 80013b0:	4835      	ldr	r0, [pc, #212]	@ (8001488 <HAL_LTDC_MspInit+0x250>)
 80013b2:	f002 fff9 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c8:	230e      	movs	r3, #14
 80013ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	482d      	ldr	r0, [pc, #180]	@ (8001488 <HAL_LTDC_MspInit+0x250>)
 80013d4:	f002 ffe8 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013d8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80013dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ea:	230e      	movs	r3, #14
 80013ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013f2:	4619      	mov	r1, r3
 80013f4:	4825      	ldr	r0, [pc, #148]	@ (800148c <HAL_LTDC_MspInit+0x254>)
 80013f6:	f002 ffd7 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80013fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800140c:	230e      	movs	r3, #14
 800140e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001414:	4619      	mov	r1, r3
 8001416:	481e      	ldr	r0, [pc, #120]	@ (8001490 <HAL_LTDC_MspInit+0x258>)
 8001418:	f002 ffc6 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800141c:	2348      	movs	r3, #72	@ 0x48
 800141e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800142c:	230e      	movs	r3, #14
 800142e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001434:	4619      	mov	r1, r3
 8001436:	4817      	ldr	r0, [pc, #92]	@ (8001494 <HAL_LTDC_MspInit+0x25c>)
 8001438:	f002 ffb6 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800143c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001440:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800144e:	2309      	movs	r3, #9
 8001450:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001456:	4619      	mov	r1, r3
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <HAL_LTDC_MspInit+0x254>)
 800145a:	f002 ffa5 	bl	80043a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	2058      	movs	r0, #88	@ 0x58
 8001464:	f002 fb1f 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001468:	2058      	movs	r0, #88	@ 0x58
 800146a:	f002 fb38 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3768      	adds	r7, #104	@ 0x68
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40016800 	.word	0x40016800
 800147c:	40023800 	.word	0x40023800
 8001480:	40021400 	.word	0x40021400
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40021800 	.word	0x40021800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00

08001498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	@ (800151c <HAL_SPI_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12c      	bne.n	8001514 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <HAL_SPI_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001504:	2305      	movs	r3, #5
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <HAL_SPI_MspInit+0x8c>)
 8001510:	f002 ff4a 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40015000 	.word	0x40015000
 8001520:	40023800 	.word	0x40023800
 8001524:	40021400 	.word	0x40021400

08001528 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_SPI_MspDeInit+0x30>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10a      	bne.n	8001550 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_SPI_MspDeInit+0x34>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_SPI_MspDeInit+0x34>)
 8001540:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001546:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <HAL_SPI_MspDeInit+0x38>)
 800154c:	f003 f8d8 	bl	8004700 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40015000 	.word	0x40015000
 800155c:	40023800 	.word	0x40023800
 8001560:	40021400 	.word	0x40021400

08001564 <HAL_TIM_Base_MspInit>:
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_TIM_Base_MspInit+0xa8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10e      	bne.n	8001594 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	4a24      	ldr	r2, [pc, #144]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6453      	str	r3, [r2, #68]	@ 0x44
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]

	   /* Enable the TIMx global Interrupt */
	   HAL_NVIC_EnableIRQ(TIMx_IRQn);
  }

}
 8001592:	e036      	b.n	8001602 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1e      	ldr	r2, [pc, #120]	@ (8001614 <HAL_TIM_Base_MspInit+0xb0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d116      	bne.n	80015cc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	210f      	movs	r1, #15
 80015be:	2036      	movs	r0, #54	@ 0x36
 80015c0:	f002 fa71 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c4:	2036      	movs	r0, #54	@ 0x36
 80015c6:	f002 fa8a 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 80015ca:	e01a      	b.n	8001602 <HAL_TIM_Base_MspInit+0x9e>
  } else if (htim_base->Instance == TIMx) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <HAL_TIM_Base_MspInit+0xb4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d115      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x9e>
	   TIMx_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_TIM_Base_MspInit+0xac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
	   HAL_NVIC_SetPriority(TIMx_IRQn, 0, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2100      	movs	r1, #0
 80015f6:	201d      	movs	r0, #29
 80015f8:	f002 fa55 	bl	8003aa6 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80015fc:	201d      	movs	r0, #29
 80015fe:	f002 fa6e 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010000 	.word	0x40010000
 8001610:	40023800 	.word	0x40023800
 8001614:	40001000 	.word	0x40001000
 8001618:	40000400 	.word	0x40000400

0800161c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <HAL_FMC_MspInit+0x104>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d16f      	bne.n	8001718 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001638:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <HAL_FMC_MspInit+0x104>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_FMC_MspInit+0x108>)
 8001644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001646:	4a37      	ldr	r2, [pc, #220]	@ (8001724 <HAL_FMC_MspInit+0x108>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6393      	str	r3, [r2, #56]	@ 0x38
 800164e:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_FMC_MspInit+0x108>)
 8001650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800165a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800165e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166c:	230c      	movs	r3, #12
 800166e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	482c      	ldr	r0, [pc, #176]	@ (8001728 <HAL_FMC_MspInit+0x10c>)
 8001676:	f002 fe97 	bl	80043a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800167a:	2301      	movs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168a:	230c      	movs	r3, #12
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4826      	ldr	r0, [pc, #152]	@ (800172c <HAL_FMC_MspInit+0x110>)
 8001694:	f002 fe88 	bl	80043a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001698:	f248 1333 	movw	r3, #33075	@ 0x8133
 800169c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016aa:	230c      	movs	r3, #12
 80016ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	481f      	ldr	r0, [pc, #124]	@ (8001730 <HAL_FMC_MspInit+0x114>)
 80016b4:	f002 fe78 	bl	80043a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016b8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016bc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ca:	230c      	movs	r3, #12
 80016cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4818      	ldr	r0, [pc, #96]	@ (8001734 <HAL_FMC_MspInit+0x118>)
 80016d4:	f002 fe68 	bl	80043a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016d8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016dc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4811      	ldr	r0, [pc, #68]	@ (8001738 <HAL_FMC_MspInit+0x11c>)
 80016f4:	f002 fe58 	bl	80043a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80016f8:	2360      	movs	r3, #96	@ 0x60
 80016fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001708:	230c      	movs	r3, #12
 800170a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	480a      	ldr	r0, [pc, #40]	@ (800173c <HAL_FMC_MspInit+0x120>)
 8001712:	f002 fe49 	bl	80043a8 <HAL_GPIO_Init>
 8001716:	e000      	b.n	800171a <HAL_FMC_MspInit+0xfe>
    return;
 8001718:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200012b8 	.word	0x200012b8
 8001724:	40023800 	.word	0x40023800
 8001728:	40021400 	.word	0x40021400
 800172c:	40020800 	.word	0x40020800
 8001730:	40021800 	.word	0x40021800
 8001734:	40021000 	.word	0x40021000
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001748:	f7ff ff68 	bl	800161c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001766:	bf00      	nop
 8001768:	e7fd      	b.n	8001766 <HardFault_Handler+0x4>

0800176a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800176e:	bf00      	nop
 8001770:	e7fd      	b.n	800176e <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001776:	bf00      	nop
 8001778:	e7fd      	b.n	8001776 <BusFault_Handler+0x4>

0800177a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800177e:	bf00      	nop
 8001780:	e7fd      	b.n	800177e <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80017b0:	f002 f85a 	bl	8003868 <HAL_IncTick>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <OTG_HS_IRQHandler>:
#ifdef USE_USB_OTG_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <OTG_HS_IRQHandler+0x10>)
 80017be:	f003 fbd7 	bl	8004f70 <HAL_HCD_IRQHandler>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200012c0 	.word	0x200012c0

080017cc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f003 f8d5 	bl	8004980 <HAL_GPIO_EXTI_IRQHandler>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <TIM3_IRQHandler>:

void TIMx_IRQHandler(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <TIM3_IRQHandler+0x10>)
 80017e2:	f007 fb3f 	bl	8008e64 <HAL_TIM_IRQHandler>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20001224 	.word	0x20001224

080017f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00a      	b.n	8001818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001802:	f3af 8000 	nop.w
 8001806:	4601      	mov	r1, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	b2ca      	uxtb	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf0      	blt.n	8001802 <_read+0x12>
  }

  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e009      	b.n	8001850 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f00f f99b 	bl	8010b80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf1      	blt.n	800183c <_write+0x12>
  }
  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188a:	605a      	str	r2, [r3, #4]
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f00f fd26 	bl	801134c <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20030000 	.word	0x20030000
 800192c:	00000400 	.word	0x00000400
 8001930:	200012bc 	.word	0x200012bc
 8001934:	20002558 	.word	0x20002558

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* On STM32F429I-DISCO, USB OTG HS Core will operate in Full speed mode */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*EMBEDDED Physical interface*/
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4a33      	ldr	r2, [pc, #204]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	@ 0x30
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	4a2c      	ldr	r2, [pc, #176]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001990:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
  
  GPIO_InitStruct.Pin = (GPIO_PIN_14 | GPIO_PIN_15);
 800199c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80019ae:	230c      	movs	r3, #12
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4821      	ldr	r0, [pc, #132]	@ (8001a40 <HAL_HCD_MspInit+0xe4>)
 80019ba:	f002 fcf5 	bl	80043a8 <HAL_GPIO_Init>
  
  /* Configure  VBUS Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);    
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	481a      	ldr	r0, [pc, #104]	@ (8001a40 <HAL_HCD_MspInit+0xe4>)
 80019d8:	f002 fce6 	bl	80043a8 <HAL_GPIO_Init>
  
  /* Enable USB HS Clocks */ 
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a15      	ldr	r2, [pc, #84]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 80019e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_HCD_MspInit+0xe0>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure Power Switch Vbus Pin */
  GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 80019f8:	2310      	movs	r3, #16
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <HAL_HCD_MspInit+0xe8>)
 8001a10:	f002 fcca 	bl	80043a8 <HAL_GPIO_Init>
  
  /* By Default, DISABLE is needed on output of the Power Switch */
  HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2110      	movs	r1, #16
 8001a18:	480a      	ldr	r0, [pc, #40]	@ (8001a44 <HAL_HCD_MspInit+0xe8>)
 8001a1a:	f002 ff7d 	bl	8004918 <HAL_GPIO_WritePin>
  
  USBH_Delay(200);   /* Delay is need for stabilising the Vbus Low */
 8001a1e:	20c8      	movs	r0, #200	@ 0xc8
 8001a20:	f000 f9f8 	bl	8001e14 <USBH_Delay>
  
  /* Set USBHS Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 3);
 8001a24:	2203      	movs	r2, #3
 8001a26:	2101      	movs	r1, #1
 8001a28:	204d      	movs	r0, #77	@ 0x4d
 8001a2a:	f002 f83c 	bl	8003aa6 <HAL_NVIC_SetPriority>
  
  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001a2e:	204d      	movs	r0, #77	@ 0x4d
 8001a30:	f002 f855 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800

08001a48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00c faeb 	bl	800e032 <USBH_LL_IncTimer>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00c fb23 	bl	800e0be <USBH_LL_Connect>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00c fb2c 	bl	800e0ec <USBH_LL_Disconnect>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f00c faeb 	bl	800e086 <USBH_LL_PortEnabled>
} 
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00c faeb 	bl	800e0a2 <USBH_LL_PortDisabled>
} 
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum:
  * @param  urb_state:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <USBH_LL_Init>:
  * @brief  Initializes the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /*Set LL Driver parameters */
  hhcd.Instance = USB_OTG_HS;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001afa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <USBH_LL_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hhcd.Init.Host_channels = 11; 
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b00:	220b      	movs	r2, #11
 8001b02:	715a      	strb	r2, [r3, #5]
  hhcd.Init.dma_enable = 0;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	719a      	strb	r2, [r3, #6]
  hhcd.Init.low_power_enable = 0;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	72da      	strb	r2, [r3, #11]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	725a      	strb	r2, [r3, #9]
  hhcd.Init.Sof_enable = 0;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	729a      	strb	r2, [r3, #10]
  hhcd.Init.speed = HCD_SPEED_HIGH;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	71da      	strb	r2, [r3, #7]
  hhcd.Init.use_external_vbus = 1;  
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	741a      	strb	r2, [r3, #16]
  /* Link The driver to the stack */
  hhcd.pData = phost;
 8001b28:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b34:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
  /*Initialize LL Driver */
  if (HAL_HCD_Init(&hhcd) != HAL_OK)
 8001b38:	480a      	ldr	r0, [pc, #40]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b3a:	f002 ff39 	bl	80049b0 <HAL_HCD_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <USBH_LL_Init+0x58>
  {
    return USBH_FAIL;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e008      	b.n	8001b5a <USBH_LL_Init+0x6a>
  }
  
  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd));
 8001b48:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <USBH_LL_Init+0x74>)
 8001b4a:	f003 fb99 	bl	8005280 <HAL_HCD_GetCurrentFrame>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f00c fa5e 	bl	800e014 <USBH_LL_SetTimer>
  
  return USBH_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200012c0 	.word	0x200012c0
 8001b68:	40040000 	.word	0x40040000

08001b6c <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fb08 	bl	8005190 <HAL_HCD_Start>
  return USBH_OK; 
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fb1c 	bl	80051d6 <HAL_HCD_Stop>
  return USBH_OK; 
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed (USBH_HandleTypeDef *phost)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	73fb      	strb	r3, [r7, #15]
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fb6e 	bl	800529c <HAL_HCD_GetCurrentSpeed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d00c      	beq.n	8001be0 <USBH_LL_GetSpeed+0x38>
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d80d      	bhi.n	8001be6 <USBH_LL_GetSpeed+0x3e>
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <USBH_LL_GetSpeed+0x2c>
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d003      	beq.n	8001bda <USBH_LL_GetSpeed+0x32>
 8001bd2:	e008      	b.n	8001be6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0: 
    speed = USBH_SPEED_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8001bd8:	e008      	b.n	8001bec <USBH_LL_GetSpeed+0x44>
    
  case 1: 
    speed = USBH_SPEED_FULL;    
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8001bde:	e005      	b.n	8001bec <USBH_LL_GetSpeed+0x44>
    
  case 2: 
    speed = USBH_SPEED_LOW;    
 8001be0:	2302      	movs	r3, #2
 8001be2:	73fb      	strb	r3, [r7, #15]
    break;
 8001be4:	e002      	b.n	8001bec <USBH_LL_GetSpeed+0x44>
    
  default:  
    speed = USBH_SPEED_HIGH;    
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
    break;    
 8001bea:	bf00      	nop
  }
  return  speed;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  HAL_HCD_ResetPort(phost->pData);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 fb03 	bl	8005210 <HAL_HCD_ResetPort>
  return USBH_OK; 
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fb13 	bl	8005256 <HAL_HCD_HC_GetXferCount>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8001c3a:	b590      	push	{r4, r7, lr}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af04      	add	r7, sp, #16
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	4608      	mov	r0, r1
 8001c44:	4611      	mov	r1, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	4603      	mov	r3, r0
 8001c4a:	70fb      	strb	r3, [r7, #3]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70bb      	strb	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_Init(phost->pData,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
 8001c5a:	787c      	ldrb	r4, [r7, #1]
 8001c5c:	78ba      	ldrb	r2, [r7, #2]
 8001c5e:	78f9      	ldrb	r1, [r7, #3]
 8001c60:	8c3b      	ldrh	r3, [r7, #32]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	7f3b      	ldrb	r3, [r7, #28]
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	7e3b      	ldrb	r3, [r7, #24]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	f002 ff06 	bl	8004a7e <HAL_HCD_HC_Init>
                  epnum,
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  HAL_HCD_HC_Halt(phost->pData, pipe); 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 ffab 	bl	8004bee <HAL_HCD_HC_Halt>
  return USBH_OK; 
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping ) 
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af04      	add	r7, sp, #16
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	70fb      	strb	r3, [r7, #3]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70bb      	strb	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]

  HAL_HCD_HC_SubmitRequest(phost->pData,pipe, 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
 8001cc2:	787c      	ldrb	r4, [r7, #1]
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	78f9      	ldrb	r1, [r7, #3]
 8001cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	8c3b      	ldrh	r3, [r7, #32]
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	7e3b      	ldrb	r3, [r7, #24]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	f002 ffaa 	bl	8004c34 <HAL_HCD_HC_SubmitRequest>
                           ep_type,  
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}

08001cea <USBH_LL_GetURBState>:
  *            @arg URB_NYET 
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fa93 	bl	800522c <HAL_HCD_HC_GetURBState>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
    
    Bit 12 PPWR: Port power
    The application uses this field to control power to this port, and the core 
    clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <USBH_LL_DriverVBUS+0x1e>
  {
    /* DISABLE is needed on output of the Power Switch */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2110      	movs	r1, #16
 8001d26:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <USBH_LL_DriverVBUS+0x38>)
 8001d28:	f002 fdf6 	bl	8004918 <HAL_GPIO_WritePin>
 8001d2c:	e004      	b.n	8001d38 <USBH_LL_DriverVBUS+0x28>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2110      	movs	r1, #16
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <USBH_LL_DriverVBUS+0x38>)
 8001d34:	f002 fdf0 	bl	8004918 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
 8001d38:	20c8      	movs	r0, #200	@ 0xc8
 8001d3a:	f001 fdb5 	bl	80038a8 <HAL_Delay>
  return USBH_OK;  
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40020800 	.word	0x40020800

08001d4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index   
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	70bb      	strb	r3, [r7, #2]
  
  if(hhcd.hc[pipe].ep_is_in)
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	4913      	ldr	r1, [pc, #76]	@ (8001dac <USBH_LL_SetToggle+0x60>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3317      	adds	r3, #23
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <USBH_LL_SetToggle+0x3c>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	490d      	ldr	r1, [pc, #52]	@ (8001dac <USBH_LL_SetToggle+0x60>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	333c      	adds	r3, #60	@ 0x3c
 8001d82:	78ba      	ldrb	r2, [r7, #2]
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e009      	b.n	8001d9c <USBH_LL_SetToggle+0x50>
  }
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <USBH_LL_SetToggle+0x60>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	333d      	adds	r3, #61	@ 0x3d
 8001d98:	78ba      	ldrb	r2, [r7, #2]
 8001d9a:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK; 
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200012c0 	.word	0x200012c0

08001db0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  
  if(hhcd.hc[pipe].ep_is_in)
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4913      	ldr	r1, [pc, #76]	@ (8001e10 <USBH_LL_GetToggle+0x60>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	3317      	adds	r3, #23
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <USBH_LL_GetToggle+0x3c>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	490d      	ldr	r1, [pc, #52]	@ (8001e10 <USBH_LL_GetToggle+0x60>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	333c      	adds	r3, #60	@ 0x3c
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e009      	b.n	8001e00 <USBH_LL_GetToggle+0x50>
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <USBH_LL_GetToggle+0x60>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	333d      	adds	r3, #61	@ 0x3d
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  }
  return toggle; 
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200012c0 	.word	0x200012c0

08001e14 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);  
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 fd43 	bl	80038a8 <HAL_Delay>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4808      	ldr	r0, [pc, #32]	@ (8001e78 <USBH_status+0x34>)
 8001e58:	f00d fec6 	bl	800fbe8 <USBH_MSC_UnitIsReady>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <USBH_status+0x24>
  {
    res = RES_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e001      	b.n	8001e6c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000d34 	.word	0x20000d34

08001e7c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02d      	beq.n	8001efe <USBH_read+0x82>
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <USBH_read+0xfc>)
 8001ea4:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d027      	beq.n	8001efe <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 8001eae:	e01a      	b.n	8001ee6 <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	7bf9      	ldrb	r1, [r7, #15]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <USBH_read+0x100>)
 8001ebe:	482e      	ldr	r0, [pc, #184]	@ (8001f78 <USBH_read+0xfc>)
 8001ec0:	f00d fedc 	bl	800fc7c <USBH_MSC_Read>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

      if(status == USBH_OK)
 8001eca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ede:	4927      	ldr	r1, [pc, #156]	@ (8001f7c <USBH_read+0x100>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00f fa60 	bl	80113a6 <memcpy>
    while ((count--)&&(status == USBH_OK))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	603a      	str	r2, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d012      	beq.n	8001f16 <USBH_read+0x9a>
 8001ef0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0db      	beq.n	8001eb0 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001ef8:	e00d      	b.n	8001f16 <USBH_read+0x9a>
      }
      else
      {
        break;
 8001efa:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001efc:	e00b      	b.n	8001f16 <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 8001efe:	7bf9      	ldrb	r1, [r7, #15]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	481b      	ldr	r0, [pc, #108]	@ (8001f78 <USBH_read+0xfc>)
 8001f0a:	f00d feb7 	bl	800fc7c <USBH_MSC_Read>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001f14:	e000      	b.n	8001f18 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001f16:	bf00      	nop
  }

  if(status == USBH_OK)
 8001f18:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <USBH_read+0xac>
  {
    res = RES_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f26:	e020      	b.n	8001f6a <USBH_read+0xee>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8001f28:	f107 0210 	add.w	r2, r7, #16
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4811      	ldr	r0, [pc, #68]	@ (8001f78 <USBH_read+0xfc>)
 8001f32:	f00d fe7f 	bl	800fc34 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f3a:	d005      	beq.n	8001f48 <USBH_read+0xcc>
 8001f3c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f3e:	dc10      	bgt.n	8001f62 <USBH_read+0xe6>
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d001      	beq.n	8001f48 <USBH_read+0xcc>
 8001f44:	2b28      	cmp	r3, #40	@ 0x28
 8001f46:	d10c      	bne.n	8001f62 <USBH_read+0xe6>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <USBH_read+0x104>)
 8001f4a:	f00f f933 	bl	80111b4 <iprintf>
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <USBH_read+0x108>)
 8001f50:	f00f f930 	bl	80111b4 <iprintf>
 8001f54:	200a      	movs	r0, #10
 8001f56:	f00f f93f 	bl	80111d8 <putchar>
      res = RES_NOTRDY;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001f60:	e003      	b.n	8001f6a <USBH_read+0xee>

    default:
      res = RES_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001f68:	bf00      	nop
    }
  }

  return res;
 8001f6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3748      	adds	r7, #72	@ 0x48
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000d34 	.word	0x20000d34
 8001f7c:	200016a0 	.word	0x200016a0
 8001f80:	080123c4 	.word	0x080123c4
 8001f84:	080123cc 	.word	0x080123cc

08001f88 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	@ 0x50
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d029      	beq.n	8002002 <USBH_write+0x7a>
 8001fae:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <USBH_write+0x110>)
 8001fb0:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d023      	beq.n	8002002 <USBH_write+0x7a>
  {

    while (count--)
 8001fba:	e01a      	b.n	8001ff2 <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4834      	ldr	r0, [pc, #208]	@ (800209c <USBH_write+0x114>)
 8001fcc:	f00f f9eb 	bl	80113a6 <memcpy>

      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	7bf9      	ldrb	r1, [r7, #15]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <USBH_write+0x114>)
 8001fde:	482e      	ldr	r0, [pc, #184]	@ (8002098 <USBH_write+0x110>)
 8001fe0:	f00d feb5 	bl	800fd4e <USBH_MSC_Write>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
      if(status == USBH_FAIL)
 8001fea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d005      	beq.n	8001ffe <USBH_write+0x76>
    while (count--)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	603a      	str	r2, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1df      	bne.n	8001fbc <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001ffc:	e00c      	b.n	8002018 <USBH_write+0x90>
      {
        break;
 8001ffe:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8002000:	e00a      	b.n	8002018 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 8002002:	7bf9      	ldrb	r1, [r7, #15]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4822      	ldr	r0, [pc, #136]	@ (8002098 <USBH_write+0x110>)
 800200e:	f00d fe9e 	bl	800fd4e <USBH_MSC_Write>
 8002012:	4603      	mov	r3, r0
 8002014:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  if(status == USBH_OK)
 8002018:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <USBH_write+0xa0>
  {
    res = RES_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002026:	e031      	b.n	800208c <USBH_write+0x104>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8002028:	f107 0210 	add.w	r2, r7, #16
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	4619      	mov	r1, r3
 8002030:	4819      	ldr	r0, [pc, #100]	@ (8002098 <USBH_write+0x110>)
 8002032:	f00d fdff 	bl	800fc34 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8002036:	7f7b      	ldrb	r3, [r7, #29]
 8002038:	2b3a      	cmp	r3, #58	@ 0x3a
 800203a:	d016      	beq.n	800206a <USBH_write+0xe2>
 800203c:	2b3a      	cmp	r3, #58	@ 0x3a
 800203e:	dc21      	bgt.n	8002084 <USBH_write+0xfc>
 8002040:	2b28      	cmp	r3, #40	@ 0x28
 8002042:	d012      	beq.n	800206a <USBH_write+0xe2>
 8002044:	2b28      	cmp	r3, #40	@ 0x28
 8002046:	dc1d      	bgt.n	8002084 <USBH_write+0xfc>
 8002048:	2b04      	cmp	r3, #4
 800204a:	d00e      	beq.n	800206a <USBH_write+0xe2>
 800204c:	2b27      	cmp	r3, #39	@ 0x27
 800204e:	d119      	bne.n	8002084 <USBH_write+0xfc>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8002050:	4813      	ldr	r0, [pc, #76]	@ (80020a0 <USBH_write+0x118>)
 8002052:	f00f f8af 	bl	80111b4 <iprintf>
 8002056:	4813      	ldr	r0, [pc, #76]	@ (80020a4 <USBH_write+0x11c>)
 8002058:	f00f f8ac 	bl	80111b4 <iprintf>
 800205c:	200a      	movs	r0, #10
 800205e:	f00f f8bb 	bl	80111d8 <putchar>
      res = RES_WRPRT;
 8002062:	2302      	movs	r3, #2
 8002064:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8002068:	e010      	b.n	800208c <USBH_write+0x104>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800206a:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <USBH_write+0x118>)
 800206c:	f00f f8a2 	bl	80111b4 <iprintf>
 8002070:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <USBH_write+0x120>)
 8002072:	f00f f89f 	bl	80111b4 <iprintf>
 8002076:	200a      	movs	r0, #10
 8002078:	f00f f8ae 	bl	80111d8 <putchar>
      res = RES_NOTRDY;
 800207c:	2303      	movs	r3, #3
 800207e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8002082:	e003      	b.n	800208c <USBH_write+0x104>

    default:
      res = RES_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800208a:	bf00      	nop
    }
  }

  return res;
 800208c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8002090:	4618      	mov	r0, r3
 8002092:	3748      	adds	r7, #72	@ 0x48
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000d34 	.word	0x20000d34
 800209c:	200016a0 	.word	0x200016a0
 80020a0:	080123c4 	.word	0x080123c4
 80020a4:	080123e4 	.word	0x080123e4
 80020a8:	080123cc 	.word	0x080123cc

080020ac <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b090      	sub	sp, #64	@ 0x40
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	603a      	str	r2, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	460b      	mov	r3, r1
 80020ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d852      	bhi.n	800216e <USBH_ioctl+0xc2>
 80020c8:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <USBH_ioctl+0x24>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020e9 	.word	0x080020e9
 80020d8:	08002113 	.word	0x08002113
 80020dc:	0800213f 	.word	0x0800213f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80020e6:	e045      	b.n	8002174 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 80020e8:	f107 0208 	add.w	r2, r7, #8
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <USBH_ioctl+0xd4>)
 80020f2:	f00d fd9f 	bl	800fc34 <USBH_MSC_GetLUNInfo>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8002108:	e034      	b.n	8002174 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8002110:	e030      	b.n	8002174 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8002112:	f107 0208 	add.w	r2, r7, #8
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4619      	mov	r1, r3
 800211a:	4819      	ldr	r0, [pc, #100]	@ (8002180 <USBH_ioctl+0xd4>)
 800211c:	f00d fd8a 	bl	800fc34 <USBH_MSC_GetLUNInfo>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8002126:	8a3b      	ldrh	r3, [r7, #16]
 8002128:	461a      	mov	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8002134:	e01e      	b.n	8002174 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800213c:	e01a      	b.n	8002174 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 800213e:	f107 0208 	add.w	r2, r7, #8
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4619      	mov	r1, r3
 8002146:	480e      	ldr	r0, [pc, #56]	@ (8002180 <USBH_ioctl+0xd4>)
 8002148:	f00d fd74 	bl	800fc34 <USBH_MSC_GetLUNInfo>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8002152:	8a3b      	ldrh	r3, [r7, #16]
 8002154:	0a5b      	lsrs	r3, r3, #9
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8002164:	e006      	b.n	8002174 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800216c:	e002      	b.n	8002174 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800216e:	2304      	movs	r3, #4
 8002170:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8002174:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002178:	4618      	mov	r0, r3
 800217a:	3740      	adds	r7, #64	@ 0x40
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000d34 	.word	0x20000d34

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002188:	f7ff fbd6 	bl	8001938 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	@ (80021d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021b2:	f00f f8d1 	bl	8011358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7fe fdbb 	bl	8000d30 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80021c8:	08014b04 	.word	0x08014b04
  ldr r2, =_sbss
 80021cc:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80021d0:	20002558 	.word	0x20002558

080021d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC_IRQHandler>

080021d6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80021da:	f000 fb3b 	bl	8002854 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80021de:	20ca      	movs	r0, #202	@ 0xca
 80021e0:	f000 f95d 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80021e4:	20c3      	movs	r0, #195	@ 0xc3
 80021e6:	f000 f967 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80021ea:	2008      	movs	r0, #8
 80021ec:	f000 f964 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80021f0:	2050      	movs	r0, #80	@ 0x50
 80021f2:	f000 f961 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80021f6:	20cf      	movs	r0, #207	@ 0xcf
 80021f8:	f000 f951 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 f95b 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002202:	20c1      	movs	r0, #193	@ 0xc1
 8002204:	f000 f958 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002208:	2030      	movs	r0, #48	@ 0x30
 800220a:	f000 f955 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800220e:	20ed      	movs	r0, #237	@ 0xed
 8002210:	f000 f945 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002214:	2064      	movs	r0, #100	@ 0x64
 8002216:	f000 f94f 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 f94c 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002220:	2012      	movs	r0, #18
 8002222:	f000 f949 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002226:	2081      	movs	r0, #129	@ 0x81
 8002228:	f000 f946 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800222c:	20e8      	movs	r0, #232	@ 0xe8
 800222e:	f000 f936 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002232:	2085      	movs	r0, #133	@ 0x85
 8002234:	f000 f940 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002238:	2000      	movs	r0, #0
 800223a:	f000 f93d 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800223e:	2078      	movs	r0, #120	@ 0x78
 8002240:	f000 f93a 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002244:	20cb      	movs	r0, #203	@ 0xcb
 8002246:	f000 f92a 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800224a:	2039      	movs	r0, #57	@ 0x39
 800224c:	f000 f934 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002250:	202c      	movs	r0, #44	@ 0x2c
 8002252:	f000 f931 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f92e 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800225c:	2034      	movs	r0, #52	@ 0x34
 800225e:	f000 f92b 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002262:	2002      	movs	r0, #2
 8002264:	f000 f928 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002268:	20f7      	movs	r0, #247	@ 0xf7
 800226a:	f000 f918 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800226e:	2020      	movs	r0, #32
 8002270:	f000 f922 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002274:	20ea      	movs	r0, #234	@ 0xea
 8002276:	f000 f912 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f000 f91c 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f000 f919 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002286:	20b1      	movs	r0, #177	@ 0xb1
 8002288:	f000 f909 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f000 f913 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002292:	201b      	movs	r0, #27
 8002294:	f000 f910 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002298:	20b6      	movs	r0, #182	@ 0xb6
 800229a:	f000 f900 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800229e:	200a      	movs	r0, #10
 80022a0:	f000 f90a 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80022a4:	20a2      	movs	r0, #162	@ 0xa2
 80022a6:	f000 f907 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80022aa:	20c0      	movs	r0, #192	@ 0xc0
 80022ac:	f000 f8f7 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80022b0:	2010      	movs	r0, #16
 80022b2:	f000 f901 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80022b6:	20c1      	movs	r0, #193	@ 0xc1
 80022b8:	f000 f8f1 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80022bc:	2010      	movs	r0, #16
 80022be:	f000 f8fb 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80022c2:	20c5      	movs	r0, #197	@ 0xc5
 80022c4:	f000 f8eb 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80022c8:	2045      	movs	r0, #69	@ 0x45
 80022ca:	f000 f8f5 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80022ce:	2015      	movs	r0, #21
 80022d0:	f000 f8f2 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80022d4:	20c7      	movs	r0, #199	@ 0xc7
 80022d6:	f000 f8e2 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80022da:	2090      	movs	r0, #144	@ 0x90
 80022dc:	f000 f8ec 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80022e0:	2036      	movs	r0, #54	@ 0x36
 80022e2:	f000 f8dc 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80022e6:	20c8      	movs	r0, #200	@ 0xc8
 80022e8:	f000 f8e6 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80022ec:	20f2      	movs	r0, #242	@ 0xf2
 80022ee:	f000 f8d6 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f8e0 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80022f8:	20b0      	movs	r0, #176	@ 0xb0
 80022fa:	f000 f8d0 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80022fe:	20c2      	movs	r0, #194	@ 0xc2
 8002300:	f000 f8da 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002304:	20b6      	movs	r0, #182	@ 0xb6
 8002306:	f000 f8ca 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800230a:	200a      	movs	r0, #10
 800230c:	f000 f8d4 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002310:	20a7      	movs	r0, #167	@ 0xa7
 8002312:	f000 f8d1 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002316:	2027      	movs	r0, #39	@ 0x27
 8002318:	f000 f8ce 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800231c:	2004      	movs	r0, #4
 800231e:	f000 f8cb 	bl	80024b8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002322:	202a      	movs	r0, #42	@ 0x2a
 8002324:	f000 f8bb 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f000 f8c5 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f8c2 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f000 f8bf 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800233a:	20ef      	movs	r0, #239	@ 0xef
 800233c:	f000 f8bc 	bl	80024b8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002340:	202b      	movs	r0, #43	@ 0x2b
 8002342:	f000 f8ac 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f000 f8b6 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 f8b3 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002352:	2001      	movs	r0, #1
 8002354:	f000 f8b0 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002358:	203f      	movs	r0, #63	@ 0x3f
 800235a:	f000 f8ad 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800235e:	20f6      	movs	r0, #246	@ 0xf6
 8002360:	f000 f89d 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002364:	2001      	movs	r0, #1
 8002366:	f000 f8a7 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f8a4 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002370:	2006      	movs	r0, #6
 8002372:	f000 f8a1 	bl	80024b8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002376:	202c      	movs	r0, #44	@ 0x2c
 8002378:	f000 f891 	bl	800249e <ili9341_WriteReg>
  LCD_Delay(200);
 800237c:	20c8      	movs	r0, #200	@ 0xc8
 800237e:	f000 fb57 	bl	8002a30 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002382:	2026      	movs	r0, #38	@ 0x26
 8002384:	f000 f88b 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002388:	2001      	movs	r0, #1
 800238a:	f000 f895 	bl	80024b8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800238e:	20e0      	movs	r0, #224	@ 0xe0
 8002390:	f000 f885 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002394:	200f      	movs	r0, #15
 8002396:	f000 f88f 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800239a:	2029      	movs	r0, #41	@ 0x29
 800239c:	f000 f88c 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80023a0:	2024      	movs	r0, #36	@ 0x24
 80023a2:	f000 f889 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80023a6:	200c      	movs	r0, #12
 80023a8:	f000 f886 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80023ac:	200e      	movs	r0, #14
 80023ae:	f000 f883 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80023b2:	2009      	movs	r0, #9
 80023b4:	f000 f880 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80023b8:	204e      	movs	r0, #78	@ 0x4e
 80023ba:	f000 f87d 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80023be:	2078      	movs	r0, #120	@ 0x78
 80023c0:	f000 f87a 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80023c4:	203c      	movs	r0, #60	@ 0x3c
 80023c6:	f000 f877 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80023ca:	2009      	movs	r0, #9
 80023cc:	f000 f874 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80023d0:	2013      	movs	r0, #19
 80023d2:	f000 f871 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80023d6:	2005      	movs	r0, #5
 80023d8:	f000 f86e 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80023dc:	2017      	movs	r0, #23
 80023de:	f000 f86b 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80023e2:	2011      	movs	r0, #17
 80023e4:	f000 f868 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f865 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80023ee:	20e1      	movs	r0, #225	@ 0xe1
 80023f0:	f000 f855 	bl	800249e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f85f 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80023fa:	2016      	movs	r0, #22
 80023fc:	f000 f85c 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002400:	201b      	movs	r0, #27
 8002402:	f000 f859 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002406:	2004      	movs	r0, #4
 8002408:	f000 f856 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800240c:	2011      	movs	r0, #17
 800240e:	f000 f853 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002412:	2007      	movs	r0, #7
 8002414:	f000 f850 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002418:	2031      	movs	r0, #49	@ 0x31
 800241a:	f000 f84d 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800241e:	2033      	movs	r0, #51	@ 0x33
 8002420:	f000 f84a 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002424:	2042      	movs	r0, #66	@ 0x42
 8002426:	f000 f847 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800242a:	2005      	movs	r0, #5
 800242c:	f000 f844 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002430:	200c      	movs	r0, #12
 8002432:	f000 f841 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002436:	200a      	movs	r0, #10
 8002438:	f000 f83e 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800243c:	2028      	movs	r0, #40	@ 0x28
 800243e:	f000 f83b 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002442:	202f      	movs	r0, #47	@ 0x2f
 8002444:	f000 f838 	bl	80024b8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002448:	200f      	movs	r0, #15
 800244a:	f000 f835 	bl	80024b8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800244e:	2011      	movs	r0, #17
 8002450:	f000 f825 	bl	800249e <ili9341_WriteReg>
  LCD_Delay(200);
 8002454:	20c8      	movs	r0, #200	@ 0xc8
 8002456:	f000 faeb 	bl	8002a30 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800245a:	2029      	movs	r0, #41	@ 0x29
 800245c:	f000 f81f 	bl	800249e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002460:	202c      	movs	r0, #44	@ 0x2c
 8002462:	f000 f81c 	bl	800249e <ili9341_WriteReg>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}

0800246a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800246e:	f000 f9f1 	bl	8002854 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002472:	2103      	movs	r1, #3
 8002474:	20d3      	movs	r0, #211	@ 0xd3
 8002476:	f000 f82c 	bl	80024d2 <ili9341_ReadData>
 800247a:	4603      	mov	r3, r0
 800247c:	b29b      	uxth	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}

08002482 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002486:	2029      	movs	r0, #41	@ 0x29
 8002488:	f000 f809 	bl	800249e <ili9341_WriteReg>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002494:	2028      	movs	r0, #40	@ 0x28
 8002496:	f000 f802 	bl	800249e <ili9341_WriteReg>
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}

0800249e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fa6c 	bl	8002988 <LCD_IO_WriteReg>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fa3d 	bl	8002944 <LCD_IO_WriteData>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	460a      	mov	r2, r1
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	4613      	mov	r3, r2
 80024e0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80024e2:	797a      	ldrb	r2, [r7, #5]
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fa6f 	bl	80029cc <LCD_IO_ReadData>
 80024ee:	4603      	mov	r3, r0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80024fc:	23f0      	movs	r3, #240	@ 0xf0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800250c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10e      	bne.n	800254a <BSP_LED_Init+0x2e>
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <BSP_LED_Init+0x9c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <BSP_LED_Init+0x9c>)
 8002536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800253a:	6313      	str	r3, [r2, #48]	@ 0x30
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <BSP_LED_Init+0x9c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	e010      	b.n	800256c <BSP_LED_Init+0x50>
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10d      	bne.n	800256c <BSP_LED_Init+0x50>
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <BSP_LED_Init+0x9c>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <BSP_LED_Init+0x9c>)
 800255a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800255e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002560:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <BSP_LED_Init+0x9c>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <BSP_LED_Init+0xa0>)
 8002570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257a:	2301      	movs	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <BSP_LED_Init+0xa4>)
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	f107 0214 	add.w	r2, r7, #20
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f001 ff09 	bl	80043a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4a09      	ldr	r2, [pc, #36]	@ (80025c0 <BSP_LED_Init+0xa4>)
 800259a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <BSP_LED_Init+0xa0>)
 80025a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a6:	2200      	movs	r2, #0
 80025a8:	4619      	mov	r1, r3
 80025aa:	f002 f9b5 	bl	8004918 <HAL_GPIO_WritePin>
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08012b08 	.word	0x08012b08
 80025c0:	20000040 	.word	0x20000040

080025c4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <BSP_LED_On+0x2c>)
 80025d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a06      	ldr	r2, [pc, #24]	@ (80025f4 <BSP_LED_On+0x30>)
 80025da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025de:	2201      	movs	r2, #1
 80025e0:	4619      	mov	r1, r3
 80025e2:	f002 f999 	bl	8004918 <HAL_GPIO_WritePin>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000040 	.word	0x20000040
 80025f4:	08012b08 	.word	0x08012b08

080025f8 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <BSP_LED_Toggle+0x2c>)
 8002606:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4906      	ldr	r1, [pc, #24]	@ (8002628 <BSP_LED_Toggle+0x30>)
 800260e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f002 f998 	bl	800494a <HAL_GPIO_TogglePin>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000040 	.word	0x20000040
 8002628:	08012b08 	.word	0x08012b08

0800262c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	4613      	mov	r3, r2
 800263a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <BSP_PB_Init+0x32>
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <BSP_PB_Init+0xa4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <BSP_PB_Init+0xa4>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <BSP_PB_Init+0xa4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002664:	2301      	movs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800266c:	2302      	movs	r3, #2
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002670:	2302      	movs	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <BSP_PB_Init+0xa8>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	f107 020c 	add.w	r2, r7, #12
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fe90 	bl	80043a8 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002688:	79bb      	ldrb	r3, [r7, #6]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d11c      	bne.n	80026c8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800268e:	2301      	movs	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002696:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800269a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <BSP_PB_Init+0xa8>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 fe7c 	bl	80043a8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80026b0:	2306      	movs	r3, #6
 80026b2:	b25b      	sxtb	r3, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	210f      	movs	r1, #15
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f9f4 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80026be:	2306      	movs	r3, #6
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 fa0b 	bl	8003ade <HAL_NVIC_EnableIRQ>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	20000048 	.word	0x20000048

080026d8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80026dc:	4819      	ldr	r0, [pc, #100]	@ (8002744 <SPIx_Init+0x6c>)
 80026de:	f006 f948 	bl	8008972 <HAL_SPI_GetState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12b      	bne.n	8002740 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80026e8:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <SPIx_Init+0x6c>)
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <SPIx_Init+0x70>)
 80026ec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <SPIx_Init+0x6c>)
 80026f0:	2218      	movs	r2, #24
 80026f2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80026f4:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <SPIx_Init+0x6c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <SPIx_Init+0x6c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <SPIx_Init+0x6c>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <SPIx_Init+0x6c>)
 8002708:	2200      	movs	r2, #0
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <SPIx_Init+0x6c>)
 800270e:	2207      	movs	r2, #7
 8002710:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <SPIx_Init+0x6c>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <SPIx_Init+0x6c>)
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <SPIx_Init+0x6c>)
 8002720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002724:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <SPIx_Init+0x6c>)
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <SPIx_Init+0x6c>)
 800272e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002732:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002734:	4803      	ldr	r0, [pc, #12]	@ (8002744 <SPIx_Init+0x6c>)
 8002736:	f000 f853 	bl	80027e0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800273a:	4802      	ldr	r0, [pc, #8]	@ (8002744 <SPIx_Init+0x6c>)
 800273c:	f005 fc5d 	bl	8007ffa <HAL_SPI_Init>
  }
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200018a0 	.word	0x200018a0
 8002748:	40015000 	.word	0x40015000

0800274c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <SPIx_Read+0x38>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f107 0108 	add.w	r1, r7, #8
 8002766:	4808      	ldr	r0, [pc, #32]	@ (8002788 <SPIx_Read+0x3c>)
 8002768:	f005 fe3b 	bl	80083e2 <HAL_SPI_Receive>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002776:	f000 f827 	bl	80027c8 <SPIx_Error>
  }

  return readvalue;
 800277a:	68bb      	ldr	r3, [r7, #8]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000004c 	.word	0x2000004c
 8002788:	200018a0 	.word	0x200018a0

0800278c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <SPIx_Write+0x34>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1db9      	adds	r1, r7, #6
 80027a0:	2201      	movs	r2, #1
 80027a2:	4808      	ldr	r0, [pc, #32]	@ (80027c4 <SPIx_Write+0x38>)
 80027a4:	f005 fcda 	bl	800815c <HAL_SPI_Transmit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027b2:	f000 f809 	bl	80027c8 <SPIx_Error>
  }
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000004c 	.word	0x2000004c
 80027c4:	200018a0 	.word	0x200018a0

080027c8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80027cc:	4803      	ldr	r0, [pc, #12]	@ (80027dc <SPIx_Error+0x14>)
 80027ce:	f005 fc9d 	bl	800810c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80027d2:	f7ff ff81 	bl	80026d8 <SPIx_Init>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200018a0 	.word	0x200018a0

080027e0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b17      	ldr	r3, [pc, #92]	@ (800284c <SPIx_MspInit+0x6c>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	4a16      	ldr	r2, [pc, #88]	@ (800284c <SPIx_MspInit+0x6c>)
 80027f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <SPIx_MspInit+0x6c>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <SPIx_MspInit+0x6c>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	4a0f      	ldr	r2, [pc, #60]	@ (800284c <SPIx_MspInit+0x6c>)
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	6313      	str	r3, [r2, #48]	@ 0x30
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <SPIx_MspInit+0x6c>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002820:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800282a:	2302      	movs	r3, #2
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800282e:	2301      	movs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002832:	2305      	movs	r3, #5
 8002834:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4804      	ldr	r0, [pc, #16]	@ (8002850 <SPIx_MspInit+0x70>)
 800283e:	f001 fdb3 	bl	80043a8 <HAL_GPIO_Init>
}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40021400 	.word	0x40021400

08002854 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <LCD_IO_Init+0xe0>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d164      	bne.n	800292c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002862:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <LCD_IO_Init+0xe0>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <LCD_IO_Init+0xe4>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	4a31      	ldr	r2, [pc, #196]	@ (8002938 <LCD_IO_Init+0xe4>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	6313      	str	r3, [r2, #48]	@ 0x30
 8002878:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <LCD_IO_Init+0xe4>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002888:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800288a:	2301      	movs	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4619      	mov	r1, r3
 800289c:	4827      	ldr	r0, [pc, #156]	@ (800293c <LCD_IO_Init+0xe8>)
 800289e:	f001 fd83 	bl	80043a8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a23      	ldr	r2, [pc, #140]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028ac:	f043 0308 	orr.w	r3, r3, #8
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80028be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028cc:	2302      	movs	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	4819      	ldr	r0, [pc, #100]	@ (800293c <LCD_IO_Init+0xe8>)
 80028d8:	f001 fd66 	bl	80043a8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <LCD_IO_Init+0xe4>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80028f8:	2304      	movs	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4619      	mov	r1, r3
 800290e:	480c      	ldr	r0, [pc, #48]	@ (8002940 <LCD_IO_Init+0xec>)
 8002910:	f001 fd4a 	bl	80043a8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002914:	2200      	movs	r2, #0
 8002916:	2104      	movs	r1, #4
 8002918:	4809      	ldr	r0, [pc, #36]	@ (8002940 <LCD_IO_Init+0xec>)
 800291a:	f001 fffd 	bl	8004918 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800291e:	2201      	movs	r2, #1
 8002920:	2104      	movs	r1, #4
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <LCD_IO_Init+0xec>)
 8002924:	f001 fff8 	bl	8004918 <HAL_GPIO_WritePin>

    SPIx_Init();
 8002928:	f7ff fed6 	bl	80026d8 <SPIx_Init>
  }
}
 800292c:	bf00      	nop
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200018f8 	.word	0x200018f8
 8002938:	40023800 	.word	0x40023800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40020800 	.word	0x40020800

08002944 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002954:	480a      	ldr	r0, [pc, #40]	@ (8002980 <LCD_IO_WriteData+0x3c>)
 8002956:	f001 ffdf 	bl	8004918 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800295a:	2200      	movs	r2, #0
 800295c:	2104      	movs	r1, #4
 800295e:	4809      	ldr	r0, [pc, #36]	@ (8002984 <LCD_IO_WriteData+0x40>)
 8002960:	f001 ffda 	bl	8004918 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff10 	bl	800278c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800296c:	2201      	movs	r2, #1
 800296e:	2104      	movs	r1, #4
 8002970:	4804      	ldr	r0, [pc, #16]	@ (8002984 <LCD_IO_WriteData+0x40>)
 8002972:	f001 ffd1 	bl	8004918 <HAL_GPIO_WritePin>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40020800 	.word	0x40020800

08002988 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002998:	480a      	ldr	r0, [pc, #40]	@ (80029c4 <LCD_IO_WriteReg+0x3c>)
 800299a:	f001 ffbd 	bl	8004918 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800299e:	2200      	movs	r2, #0
 80029a0:	2104      	movs	r1, #4
 80029a2:	4809      	ldr	r0, [pc, #36]	@ (80029c8 <LCD_IO_WriteReg+0x40>)
 80029a4:	f001 ffb8 	bl	8004918 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff feed 	bl	800278c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029b2:	2201      	movs	r2, #1
 80029b4:	2104      	movs	r1, #4
 80029b6:	4804      	ldr	r0, [pc, #16]	@ (80029c8 <LCD_IO_WriteReg+0x40>)
 80029b8:	f001 ffae 	bl	8004918 <HAL_GPIO_WritePin>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40020800 	.word	0x40020800

080029cc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	460a      	mov	r2, r1
 80029d6:	80fb      	strh	r3, [r7, #6]
 80029d8:	4613      	mov	r3, r2
 80029da:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80029e0:	2200      	movs	r2, #0
 80029e2:	2104      	movs	r1, #4
 80029e4:	4810      	ldr	r0, [pc, #64]	@ (8002a28 <LCD_IO_ReadData+0x5c>)
 80029e6:	f001 ff97 	bl	8004918 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029f0:	480e      	ldr	r0, [pc, #56]	@ (8002a2c <LCD_IO_ReadData+0x60>)
 80029f2:	f001 ff91 	bl	8004918 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fec7 	bl	800278c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80029fe:	797b      	ldrb	r3, [r7, #5]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fea3 	bl	800274c <SPIx_Read>
 8002a06:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a0e:	4807      	ldr	r0, [pc, #28]	@ (8002a2c <LCD_IO_ReadData+0x60>)
 8002a10:	f001 ff82 	bl	8004918 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a14:	2201      	movs	r2, #1
 8002a16:	2104      	movs	r1, #4
 8002a18:	4803      	ldr	r0, [pc, #12]	@ (8002a28 <LCD_IO_ReadData+0x5c>)
 8002a1a:	f001 ff7d 	bl	8004918 <HAL_GPIO_WritePin>

  return readvalue;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020c00 	.word	0x40020c00

08002a30 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 ff35 	bl	80038a8 <HAL_Delay>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b08 <BSP_LCD_Init+0xc0>)
 8002a50:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a52:	4b2c      	ldr	r3, [pc, #176]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a54:	2209      	movs	r2, #9
 8002a56:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a58:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a60:	221d      	movs	r2, #29
 8002a62:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a66:	2203      	movs	r2, #3
 8002a68:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8002a6a:	4b26      	ldr	r3, [pc, #152]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a6c:	f240 120d 	movw	r2, #269	@ 0x10d
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a74:	f240 1243 	movw	r2, #323	@ 0x143
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a7c:	f240 1217 	movw	r2, #279	@ 0x117
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a84:	f240 1247 	movw	r2, #327	@ 0x147
 8002a88:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <BSP_LCD_Init+0xc4>)
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <BSP_LCD_Init+0xc4>)
 8002aaa:	22c0      	movs	r2, #192	@ 0xc0
 8002aac:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002aae:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <BSP_LCD_Init+0xc4>)
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <BSP_LCD_Init+0xc4>)
 8002ab6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002abc:	4813      	ldr	r0, [pc, #76]	@ (8002b0c <BSP_LCD_Init+0xc4>)
 8002abe:	f005 f84b 	bl	8007b58 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8002ada:	f000 fabb 	bl	8003054 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002ade:	4809      	ldr	r0, [pc, #36]	@ (8002b04 <BSP_LCD_Init+0xbc>)
 8002ae0:	f004 f880 	bl	8006be4 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <BSP_LCD_Init+0xc8>)
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8002b14 <BSP_LCD_Init+0xcc>)
 8002ae8:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <BSP_LCD_Init+0xc8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002af2:	f000 fc9d 	bl	8003430 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002af6:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <BSP_LCD_Init+0xd0>)
 8002af8:	f000 f8e0 	bl	8002cbc <BSP_LCD_SetFont>

  return LCD_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200018fc 	.word	0x200018fc
 8002b08:	40016800 	.word	0x40016800
 8002b0c:	200019e4 	.word	0x200019e4
 8002b10:	20001a30 	.word	0x20001a30
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000050 	.word	0x20000050

08002b1c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <BSP_LCD_GetXSize+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	4798      	blx	r3
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001a30 	.word	0x20001a30

08002b34 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <BSP_LCD_GetYSize+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	4798      	blx	r3
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20001a30 	.word	0x20001a30

08002b4c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b090      	sub	sp, #64	@ 0x40
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b5c:	f7ff ffde 	bl	8002b1c <BSP_LCD_GetXSize>
 8002b60:	4603      	mov	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8002b68:	f7ff ffe4 	bl	8002b34 <BSP_LCD_GetYSize>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8002b78:	23ff      	movs	r3, #255	@ 0xff
 8002b7a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002b92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b98:	2307      	movs	r3, #7
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002b9c:	f7ff ffbe 	bl	8002b1c <BSP_LCD_GetXSize>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002ba4:	f7ff ffc6 	bl	8002b34 <BSP_LCD_GetYSize>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8002bac:	88fa      	ldrh	r2, [r7, #6]
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4814      	ldr	r0, [pc, #80]	@ (8002c08 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bb6:	f004 f8e5 	bl	8006d84 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	4913      	ldr	r1, [pc, #76]	@ (8002c0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3304      	adds	r3, #4
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3308      	adds	r3, #8
 8002be0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002be2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	4909      	ldr	r1, [pc, #36]	@ (8002c0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002bf8:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bfa:	f004 f901 	bl	8006e00 <HAL_LTDC_EnableDither>
}
 8002bfe:	bf00      	nop
 8002c00:	3740      	adds	r7, #64	@ 0x40
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200018fc 	.word	0x200018fc
 8002c0c:	20001a18 	.word	0x20001a18
 8002c10:	20000050 	.word	0x20000050

08002c14 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c1c:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <BSP_LCD_SelectLayer+0x1c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20001a14 	.word	0x20001a14

08002c34 <BSP_LCD_SetTransparency>:
  * @param  LayerIndex: the Layer foreground or background.
  * @param  Transparency: the Transparency,
  *    This parameter must range from 0x00 to 0xFF.
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&LtdcHandler, Transparency, LayerIndex);
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <BSP_LCD_SetTransparency+0x20>)
 8002c48:	f004 f904 	bl	8006e54 <HAL_LTDC_SetAlpha>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200018fc 	.word	0x200018fc

08002c58 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c60:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <BSP_LCD_SetTextColor+0x28>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <BSP_LCD_SetTextColor+0x2c>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20001a14 	.word	0x20001a14
 8002c84:	20001a18 	.word	0x20001a18

08002c88 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <BSP_LCD_SetBackColor+0x2c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4908      	ldr	r1, [pc, #32]	@ (8002cb8 <BSP_LCD_SetBackColor+0x30>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20001a14 	.word	0x20001a14
 8002cb8:	20001a18 	.word	0x20001a18

08002cbc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <BSP_LCD_SetFont+0x2c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4908      	ldr	r1, [pc, #32]	@ (8002cec <BSP_LCD_SetFont+0x30>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20001a14 	.word	0x20001a14
 8002cec:	20001a18 	.word	0x20001a18

08002cf0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <BSP_LCD_GetFont+0x24>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4907      	ldr	r1, [pc, #28]	@ (8002d18 <BSP_LCD_GetFont+0x28>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3308      	adds	r3, #8
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20001a14 	.word	0x20001a14
 8002d18:	20001a18 	.word	0x20001a18

08002d1c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <BSP_LCD_Clear+0x48>)
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <BSP_LCD_Clear+0x48>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d68 <BSP_LCD_Clear+0x4c>)
 8002d2e:	2134      	movs	r1, #52	@ 0x34
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	335c      	adds	r3, #92	@ 0x5c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461e      	mov	r6, r3
 8002d3c:	f7ff feee 	bl	8002b1c <BSP_LCD_GetXSize>
 8002d40:	4605      	mov	r5, r0
 8002d42:	f7ff fef7 	bl	8002b34 <BSP_LCD_GetYSize>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	462a      	mov	r2, r5
 8002d54:	4631      	mov	r1, r6
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 fb32 	bl	80033c0 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d64:	20001a14 	.word	0x20001a14
 8002d68:	200018fc 	.word	0x200018fc

08002d6c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
 8002d76:	460b      	mov	r3, r1
 8002d78:	80bb      	strh	r3, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <BSP_LCD_DisplayChar+0x80>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <BSP_LCD_DisplayChar+0x84>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3308      	adds	r3, #8
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d9a:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <BSP_LCD_DisplayChar+0x80>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4c14      	ldr	r4, [pc, #80]	@ (8002df0 <BSP_LCD_DisplayChar+0x84>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4423      	add	r3, r4
 8002daa:	3308      	adds	r3, #8
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002db0:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <BSP_LCD_DisplayChar+0x80>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4c0d      	ldr	r4, [pc, #52]	@ (8002df0 <BSP_LCD_DisplayChar+0x84>)
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4423      	add	r3, r4
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	889b      	ldrh	r3, [r3, #4]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da00      	bge.n	8002dd2 <BSP_LCD_DisplayChar+0x66>
 8002dd0:	3307      	adds	r3, #7
 8002dd2:	10db      	asrs	r3, r3, #3
 8002dd4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002dd8:	18ca      	adds	r2, r1, r3
 8002dda:	88b9      	ldrh	r1, [r7, #4]
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fa34 	bl	800324c <DrawChar>
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	20001a14 	.word	0x20001a14
 8002df0:	20001a18 	.word	0x20001a18

08002df4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60ba      	str	r2, [r7, #8]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	81fb      	strh	r3, [r7, #14]
 8002e02:	460b      	mov	r3, r1
 8002e04:	81bb      	strh	r3, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	83fb      	strh	r3, [r7, #30]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002e1e:	e002      	b.n	8002e26 <BSP_LCD_DisplayStringAt+0x32>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	617a      	str	r2, [r7, #20]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f6      	bne.n	8002e20 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002e32:	f7ff fe73 	bl	8002b1c <BSP_LCD_GetXSize>
 8002e36:	4601      	mov	r1, r0
 8002e38:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	484b      	ldr	r0, [pc, #300]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4403      	add	r3, r0
 8002e48:	3308      	adds	r3, #8
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	889b      	ldrh	r3, [r3, #4]
 8002e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e52:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d01c      	beq.n	8002e94 <BSP_LCD_DisplayStringAt+0xa0>
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	dc33      	bgt.n	8002ec6 <BSP_LCD_DisplayStringAt+0xd2>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d002      	beq.n	8002e68 <BSP_LCD_DisplayStringAt+0x74>
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d019      	beq.n	8002e9a <BSP_LCD_DisplayStringAt+0xa6>
 8002e66:	e02e      	b.n	8002ec6 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1ad1      	subs	r1, r2, r3
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	483e      	ldr	r0, [pc, #248]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4403      	add	r3, r0
 8002e7e:	3308      	adds	r3, #8
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	889b      	ldrh	r3, [r3, #4]
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	4413      	add	r3, r2
 8002e90:	83fb      	strh	r3, [r7, #30]
      break;
 8002e92:	e01b      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002e94:	89fb      	ldrh	r3, [r7, #14]
 8002e96:	83fb      	strh	r3, [r7, #30]
      break;
 8002e98:	e018      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b299      	uxth	r1, r3
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4831      	ldr	r0, [pc, #196]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	fb11 f303 	smulbb	r3, r1, r3
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	89fb      	ldrh	r3, [r7, #14]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ec4:	e002      	b.n	8002ecc <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002ec6:	89fb      	ldrh	r3, [r7, #14]
 8002ec8:	83fb      	strh	r3, [r7, #30]
      break;
 8002eca:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002ecc:	e01a      	b.n	8002f04 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	89b9      	ldrh	r1, [r7, #12]
 8002ed4:	8bfb      	ldrh	r3, [r7, #30]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff48 	bl	8002d6c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002edc:	4b22      	ldr	r3, [pc, #136]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4922      	ldr	r1, [pc, #136]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	889a      	ldrh	r2, [r3, #4]
 8002ef2:	8bfb      	ldrh	r3, [r7, #30]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
    i++;
 8002efe:	8bbb      	ldrh	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2dc      	uxtb	r4, r3
 8002f12:	f7ff fe03 	bl	8002b1c <BSP_LCD_GetXSize>
 8002f16:	8bb9      	ldrh	r1, [r7, #28]
 8002f18:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4d13      	ldr	r5, [pc, #76]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	442b      	add	r3, r5
 8002f28:	3308      	adds	r3, #8
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	1ac3      	subs	r3, r0, r3
 8002f34:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002f36:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <BSP_LCD_DisplayStringAt+0x174>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <BSP_LCD_DisplayStringAt+0x178>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4403      	add	r3, r0
 8002f46:	3308      	adds	r3, #8
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002f4c:	4299      	cmp	r1, r3
 8002f4e:	bf2c      	ite	cs
 8002f50:	2301      	movcs	r3, #1
 8002f52:	2300      	movcc	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4023      	ands	r3, r4
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1b7      	bne.n	8002ece <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	20001a14 	.word	0x20001a14
 8002f6c:	20001a18 	.word	0x20001a18

08002f70 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f7c:	f7ff feb8 	bl	8002cf0 <BSP_LCD_GetFont>
 8002f80:	4603      	mov	r3, r0
 8002f82:	88db      	ldrh	r3, [r3, #6]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	fb12 f303 	smulbb	r3, r2, r3
 8002f8a:	b299      	uxth	r1, r3
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff2f 	bl	8002df4 <BSP_LCD_DisplayStringAt>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	80fb      	strh	r3, [r7, #6]
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	80bb      	strh	r3, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <BSP_LCD_FillRect+0xa8>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4920      	ldr	r1, [pc, #128]	@ (800304c <BSP_LCD_FillRect+0xac>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fe3e 	bl	8002c58 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <BSP_LCD_FillRect+0xa8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8003050 <BSP_LCD_FillRect+0xb0>)
 8002fe2:	2134      	movs	r1, #52	@ 0x34
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	335c      	adds	r3, #92	@ 0x5c
 8002fec:	681c      	ldr	r4, [r3, #0]
 8002fee:	f7ff fd95 	bl	8002b1c <BSP_LCD_GetXSize>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	88bb      	ldrh	r3, [r7, #4]
 8002ff6:	fb03 f202 	mul.w	r2, r3, r2
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4423      	add	r3, r4
 8003002:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8003004:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <BSP_LCD_FillRect+0xa8>)
 8003006:	681c      	ldr	r4, [r3, #0]
 8003008:	68fd      	ldr	r5, [r7, #12]
 800300a:	887e      	ldrh	r6, [r7, #2]
 800300c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003010:	f7ff fd84 	bl	8002b1c <BSP_LCD_GetXSize>
 8003014:	4602      	mov	r2, r0
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	1ad1      	subs	r1, r2, r3
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <BSP_LCD_FillRect+0xa8>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	480b      	ldr	r0, [pc, #44]	@ (800304c <BSP_LCD_FillRect+0xac>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	9100      	str	r1, [sp, #0]
 8003030:	4643      	mov	r3, r8
 8003032:	4632      	mov	r2, r6
 8003034:	4629      	mov	r1, r5
 8003036:	4620      	mov	r0, r4
 8003038:	f000 f9c2 	bl	80033c0 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003046:	bf00      	nop
 8003048:	20001a14 	.word	0x20001a14
 800304c:	20001a18 	.word	0x20001a18
 8003050:	200018fc 	.word	0x200018fc

08003054 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	@ 0x38
 8003058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	4b61      	ldr	r3, [pc, #388]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	4a60      	ldr	r2, [pc, #384]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003068:	6453      	str	r3, [r2, #68]	@ 0x44
 800306a:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	4b5a      	ldr	r3, [pc, #360]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a59      	ldr	r2, [pc, #356]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a52      	ldr	r2, [pc, #328]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b50      	ldr	r3, [pc, #320]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4b4c      	ldr	r3, [pc, #304]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a4b      	ldr	r2, [pc, #300]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b49      	ldr	r3, [pc, #292]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b45      	ldr	r3, [pc, #276]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a44      	ldr	r2, [pc, #272]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b42      	ldr	r3, [pc, #264]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	4a3d      	ldr	r2, [pc, #244]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f6:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b37      	ldr	r3, [pc, #220]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	4a36      	ldr	r2, [pc, #216]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 800310c:	f043 0320 	orr.w	r3, r3, #32
 8003110:	6313      	str	r3, [r2, #48]	@ 0x30
 8003112:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4b30      	ldr	r3, [pc, #192]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a2f      	ldr	r2, [pc, #188]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <BSP_LCD_MspInit+0x190>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800313a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003148:	2302      	movs	r3, #2
 800314a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800314c:	230e      	movs	r3, #14
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	4824      	ldr	r0, [pc, #144]	@ (80031e8 <BSP_LCD_MspInit+0x194>)
 8003158:	f001 f926 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800315c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003166:	4619      	mov	r1, r3
 8003168:	4820      	ldr	r0, [pc, #128]	@ (80031ec <BSP_LCD_MspInit+0x198>)
 800316a:	f001 f91d 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800316e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003178:	4619      	mov	r1, r3
 800317a:	481d      	ldr	r0, [pc, #116]	@ (80031f0 <BSP_LCD_MspInit+0x19c>)
 800317c:	f001 f914 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003180:	2348      	movs	r3, #72	@ 0x48
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	481a      	ldr	r0, [pc, #104]	@ (80031f4 <BSP_LCD_MspInit+0x1a0>)
 800318c:	f001 f90c 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	4816      	ldr	r0, [pc, #88]	@ (80031f8 <BSP_LCD_MspInit+0x1a4>)
 800319e:	f001 f903 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80031a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80031a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ac:	4619      	mov	r1, r3
 80031ae:	4813      	ldr	r0, [pc, #76]	@ (80031fc <BSP_LCD_MspInit+0x1a8>)
 80031b0:	f001 f8fa 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80031b4:	2303      	movs	r3, #3
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80031b8:	2309      	movs	r3, #9
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80031bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031c0:	4619      	mov	r1, r3
 80031c2:	480a      	ldr	r0, [pc, #40]	@ (80031ec <BSP_LCD_MspInit+0x198>)
 80031c4:	f001 f8f0 	bl	80043a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80031c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80031ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d2:	4619      	mov	r1, r3
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <BSP_LCD_MspInit+0x1a8>)
 80031d6:	f001 f8e7 	bl	80043a8 <HAL_GPIO_Init>
}
 80031da:	bf00      	nop
 80031dc:	3738      	adds	r7, #56	@ 0x38
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021400 	.word	0x40021400
 80031fc:	40021800 	.word	0x40021800

08003200 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	603a      	str	r2, [r7, #0]
 800320a:	80fb      	strh	r3, [r7, #6]
 800320c:	460b      	mov	r3, r1
 800320e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003210:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <BSP_LCD_DrawPixel+0x44>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0c      	ldr	r2, [pc, #48]	@ (8003248 <BSP_LCD_DrawPixel+0x48>)
 8003216:	2134      	movs	r1, #52	@ 0x34
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	335c      	adds	r3, #92	@ 0x5c
 8003220:	681c      	ldr	r4, [r3, #0]
 8003222:	88bd      	ldrh	r5, [r7, #4]
 8003224:	f7ff fc7a 	bl	8002b1c <BSP_LCD_GetXSize>
 8003228:	4603      	mov	r3, r0
 800322a:	fb03 f205 	mul.w	r2, r3, r5
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4423      	add	r3, r4
 8003236:	461a      	mov	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bdb0      	pop	{r4, r5, r7, pc}
 8003244:	20001a14 	.word	0x20001a14
 8003248:	200018fc 	.word	0x200018fc

0800324c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	603a      	str	r2, [r7, #0]
 8003256:	80fb      	strh	r3, [r7, #6]
 8003258:	460b      	mov	r3, r1
 800325a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003268:	4b53      	ldr	r3, [pc, #332]	@ (80033b8 <DrawChar+0x16c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4953      	ldr	r1, [pc, #332]	@ (80033bc <DrawChar+0x170>)
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3308      	adds	r3, #8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	88db      	ldrh	r3, [r3, #6]
 800327e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003280:	4b4d      	ldr	r3, [pc, #308]	@ (80033b8 <DrawChar+0x16c>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	494d      	ldr	r1, [pc, #308]	@ (80033bc <DrawChar+0x170>)
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3308      	adds	r3, #8
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	889b      	ldrh	r3, [r3, #4]
 8003296:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8003298:	8a3b      	ldrh	r3, [r7, #16]
 800329a:	3307      	adds	r3, #7
 800329c:	2b00      	cmp	r3, #0
 800329e:	da00      	bge.n	80032a2 <DrawChar+0x56>
 80032a0:	3307      	adds	r3, #7
 80032a2:	10db      	asrs	r3, r3, #3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	8a3b      	ldrh	r3, [r7, #16]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e076      	b.n	80033a6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80032b8:	8a3b      	ldrh	r3, [r7, #16]
 80032ba:	3307      	adds	r3, #7
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da00      	bge.n	80032c2 <DrawChar+0x76>
 80032c0:	3307      	adds	r3, #7
 80032c2:	10db      	asrs	r3, r3, #3
 80032c4:	461a      	mov	r2, r3
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	3307      	adds	r3, #7
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da00      	bge.n	80032dc <DrawChar+0x90>
 80032da:	3307      	adds	r3, #7
 80032dc:	10db      	asrs	r3, r3, #3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d002      	beq.n	80032e8 <DrawChar+0x9c>
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d004      	beq.n	80032f0 <DrawChar+0xa4>
 80032e6:	e00c      	b.n	8003302 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	617b      	str	r3, [r7, #20]
        break;
 80032ee:	e016      	b.n	800331e <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	3201      	adds	r2, #1
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
        break;
 8003300:	e00d      	b.n	800331e <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	041a      	lsls	r2, r3, #16
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4313      	orrs	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	3202      	adds	r2, #2
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
        break;
 800331c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e036      	b.n	8003392 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003324:	8a3a      	ldrh	r2, [r7, #16]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	4413      	add	r3, r2
 800332e:	3b01      	subs	r3, #1
 8003330:	2201      	movs	r2, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	461a      	mov	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	b29a      	uxth	r2, r3
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	4413      	add	r3, r2
 8003348:	b298      	uxth	r0, r3
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <DrawChar+0x16c>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	491b      	ldr	r1, [pc, #108]	@ (80033bc <DrawChar+0x170>)
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	88bb      	ldrh	r3, [r7, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	f7ff ff4e 	bl	8003200 <BSP_LCD_DrawPixel>
 8003364:	e012      	b.n	800338c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	b29a      	uxth	r2, r3
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	4413      	add	r3, r2
 800336e:	b298      	uxth	r0, r3
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <DrawChar+0x16c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4911      	ldr	r1, [pc, #68]	@ (80033bc <DrawChar+0x170>)
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3304      	adds	r3, #4
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	88bb      	ldrh	r3, [r7, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	f7ff ff3a 	bl	8003200 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	3301      	adds	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	8a3b      	ldrh	r3, [r7, #16]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3c4      	bcc.n	8003324 <DrawChar+0xd8>
      }
    }
    Ypos++;
 800339a:	88bb      	ldrh	r3, [r7, #4]
 800339c:	3301      	adds	r3, #1
 800339e:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	8a7b      	ldrh	r3, [r7, #18]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d384      	bcc.n	80032b8 <DrawChar+0x6c>
  }
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20001a14 	.word	0x20001a14
 80033bc:	20001a18 	.word	0x20001a18

080033c0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <FillBuffer+0x68>)
 80033d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033d4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <FillBuffer+0x68>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80033dc:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <FillBuffer+0x68>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <FillBuffer+0x68>)
 80033e4:	4a11      	ldr	r2, [pc, #68]	@ (800342c <FillBuffer+0x6c>)
 80033e6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80033e8:	480f      	ldr	r0, [pc, #60]	@ (8003428 <FillBuffer+0x68>)
 80033ea:	f000 fd51 	bl	8003e90 <HAL_DMA2D_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d115      	bne.n	8003420 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	480c      	ldr	r0, [pc, #48]	@ (8003428 <FillBuffer+0x68>)
 80033f8:	f000 fea8 	bl	800414c <HAL_DMA2D_ConfigLayer>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69f9      	ldr	r1, [r7, #28]
 800340c:	4806      	ldr	r0, [pc, #24]	@ (8003428 <FillBuffer+0x68>)
 800340e:	f000 fd88 	bl	8003f22 <HAL_DMA2D_Start>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003418:	210a      	movs	r1, #10
 800341a:	4803      	ldr	r0, [pc, #12]	@ (8003428 <FillBuffer+0x68>)
 800341c:	f000 fdac 	bl	8003f78 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	200019a4 	.word	0x200019a4
 800342c:	4002b000 	.word	0x4002b000

08003430 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003434:	4b29      	ldr	r3, [pc, #164]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003436:	4a2a      	ldr	r2, [pc, #168]	@ (80034e0 <BSP_SDRAM_Init+0xb0>)
 8003438:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800343a:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 800343c:	2202      	movs	r2, #2
 800343e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003440:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 8003442:	2207      	movs	r2, #7
 8003444:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003446:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 8003448:	2204      	movs	r2, #4
 800344a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800344c:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 800344e:	2207      	movs	r2, #7
 8003450:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003452:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 8003454:	2202      	movs	r2, #2
 8003456:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 800345a:	2202      	movs	r2, #2
 800345c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800345e:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 8003460:	2202      	movs	r2, #2
 8003462:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003464:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003466:	2201      	movs	r2, #1
 8003468:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800346a:	4b1c      	ldr	r3, [pc, #112]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003470:	4b1a      	ldr	r3, [pc, #104]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003472:	2204      	movs	r2, #4
 8003474:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003476:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003478:	2210      	movs	r2, #16
 800347a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800347c:	4b17      	ldr	r3, [pc, #92]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 800347e:	2240      	movs	r2, #64	@ 0x40
 8003480:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003482:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003484:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003488:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800348a:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 8003492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003496:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003498:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 800349a:	2200      	movs	r2, #0
 800349c:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800349e:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 80034a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80034a6:	2100      	movs	r1, #0
 80034a8:	480c      	ldr	r0, [pc, #48]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 80034aa:	f000 f87f 	bl	80035ac <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80034ae:	490d      	ldr	r1, [pc, #52]	@ (80034e4 <BSP_SDRAM_Init+0xb4>)
 80034b0:	480a      	ldr	r0, [pc, #40]	@ (80034dc <BSP_SDRAM_Init+0xac>)
 80034b2:	f004 fd11 	bl	8007ed8 <HAL_SDRAM_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <BSP_SDRAM_Init+0xb8>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e002      	b.n	80034ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <BSP_SDRAM_Init+0xb8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80034ca:	f240 506a 	movw	r0, #1386	@ 0x56a
 80034ce:	f000 f80d 	bl	80034ec <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <BSP_SDRAM_Init+0xb8>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20001a34 	.word	0x20001a34
 80034e0:	a0000140 	.word	0xa0000140
 80034e4:	20001a68 	.word	0x20001a68
 80034e8:	20000060 	.word	0x20000060

080034ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80034f8:	4b2a      	ldr	r3, [pc, #168]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034fe:	4b29      	ldr	r3, [pc, #164]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003500:	2208      	movs	r2, #8
 8003502:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003504:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003506:	2201      	movs	r2, #1
 8003508:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800350a:	4b26      	ldr	r3, [pc, #152]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800350c:	2200      	movs	r2, #0
 800350e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003514:	4923      	ldr	r1, [pc, #140]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003516:	4824      	ldr	r0, [pc, #144]	@ (80035a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003518:	f004 fd12 	bl	8007f40 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800351c:	2001      	movs	r0, #1
 800351e:	f000 f9c3 	bl	80038a8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003524:	2202      	movs	r2, #2
 8003526:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003528:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800352a:	2208      	movs	r2, #8
 800352c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800352e:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003530:	2201      	movs	r2, #1
 8003532:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003534:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800353a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800353e:	4919      	ldr	r1, [pc, #100]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003540:	4819      	ldr	r0, [pc, #100]	@ (80035a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003542:	f004 fcfd 	bl	8007f40 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003546:	4b17      	ldr	r3, [pc, #92]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003548:	2203      	movs	r2, #3
 800354a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800354e:	2208      	movs	r2, #8
 8003550:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003552:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003554:	2204      	movs	r2, #4
 8003556:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003558:	4b12      	ldr	r3, [pc, #72]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800355e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003562:	4910      	ldr	r1, [pc, #64]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003564:	4810      	ldr	r0, [pc, #64]	@ (80035a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003566:	f004 fceb 	bl	8007f40 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800356a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800356e:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003570:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003572:	2204      	movs	r2, #4
 8003574:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003578:	2208      	movs	r2, #8
 800357a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800357c:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800357e:	2201      	movs	r2, #1
 8003580:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a07      	ldr	r2, [pc, #28]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003586:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800358c:	4905      	ldr	r1, [pc, #20]	@ (80035a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800358e:	4806      	ldr	r0, [pc, #24]	@ (80035a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003590:	f004 fcd6 	bl	8007f40 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4804      	ldr	r0, [pc, #16]	@ (80035a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003598:	f004 fd07 	bl	8007faa <HAL_SDRAM_ProgramRefreshRate>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20001a84 	.word	0x20001a84
 80035a8:	20001a34 	.word	0x20001a34

080035ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b090      	sub	sp, #64	@ 0x40
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80ec 	beq.w	8003796 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c2:	4b77      	ldr	r3, [pc, #476]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	4a76      	ldr	r2, [pc, #472]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80035ce:	4b74      	ldr	r3, [pc, #464]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035de:	4b70      	ldr	r3, [pc, #448]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a6f      	ldr	r2, [pc, #444]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b6d      	ldr	r3, [pc, #436]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	4b69      	ldr	r3, [pc, #420]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a68      	ldr	r2, [pc, #416]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b66      	ldr	r3, [pc, #408]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	4b62      	ldr	r3, [pc, #392]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a61      	ldr	r2, [pc, #388]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b5f      	ldr	r3, [pc, #380]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	4b5b      	ldr	r3, [pc, #364]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a5a      	ldr	r2, [pc, #360]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003638:	f043 0308 	orr.w	r3, r3, #8
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b58      	ldr	r3, [pc, #352]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	4b54      	ldr	r3, [pc, #336]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	4a53      	ldr	r2, [pc, #332]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003654:	f043 0310 	orr.w	r3, r3, #16
 8003658:	6313      	str	r3, [r2, #48]	@ 0x30
 800365a:	4b51      	ldr	r3, [pc, #324]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	4b4d      	ldr	r3, [pc, #308]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	6313      	str	r3, [r2, #48]	@ 0x30
 8003676:	4b4a      	ldr	r3, [pc, #296]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b46      	ldr	r3, [pc, #280]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	4a45      	ldr	r2, [pc, #276]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 800368c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003690:	6313      	str	r3, [r2, #48]	@ 0x30
 8003692:	4b43      	ldr	r3, [pc, #268]	@ (80037a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80036a2:	2302      	movs	r3, #2
 80036a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80036aa:	230c      	movs	r3, #12
 80036ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80036ae:	2360      	movs	r3, #96	@ 0x60
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80036b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b6:	4619      	mov	r1, r3
 80036b8:	483a      	ldr	r0, [pc, #232]	@ (80037a4 <BSP_SDRAM_MspInit+0x1f8>)
 80036ba:	f000 fe75 	bl	80043a8 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80036be:	2301      	movs	r3, #1
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80036c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c6:	4619      	mov	r1, r3
 80036c8:	4837      	ldr	r0, [pc, #220]	@ (80037a8 <BSP_SDRAM_MspInit+0x1fc>)
 80036ca:	f000 fe6d 	bl	80043a8 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80036ce:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80036d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d8:	4619      	mov	r1, r3
 80036da:	4834      	ldr	r0, [pc, #208]	@ (80037ac <BSP_SDRAM_MspInit+0x200>)
 80036dc:	f000 fe64 	bl	80043a8 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80036e0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80036e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	4830      	ldr	r0, [pc, #192]	@ (80037b0 <BSP_SDRAM_MspInit+0x204>)
 80036ee:	f000 fe5b 	bl	80043a8 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80036f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80036f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036fc:	4619      	mov	r1, r3
 80036fe:	482d      	ldr	r0, [pc, #180]	@ (80037b4 <BSP_SDRAM_MspInit+0x208>)
 8003700:	f000 fe52 	bl	80043a8 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003704:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800370a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800370e:	4619      	mov	r1, r3
 8003710:	4829      	ldr	r0, [pc, #164]	@ (80037b8 <BSP_SDRAM_MspInit+0x20c>)
 8003712:	f000 fe49 	bl	80043a8 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800371c:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800371e:	2280      	movs	r2, #128	@ 0x80
 8003720:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003722:	4b26      	ldr	r3, [pc, #152]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003728:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800372c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003730:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003732:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003734:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003738:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800373c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003740:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8003742:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003748:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800374a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800374e:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003752:	2200      	movs	r2, #0
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003758:	2203      	movs	r2, #3
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800375c:	4b17      	ldr	r3, [pc, #92]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800375e:	2200      	movs	r2, #0
 8003760:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003762:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003768:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800376a:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <BSP_SDRAM_MspInit+0x214>)
 800376c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
 8003774:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 800377a:	4810      	ldr	r0, [pc, #64]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 800377c:	f000 fa78 	bl	8003c70 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8003780:	480e      	ldr	r0, [pc, #56]	@ (80037bc <BSP_SDRAM_MspInit+0x210>)
 8003782:	f000 f9c7 	bl	8003b14 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	210f      	movs	r1, #15
 800378a:	2038      	movs	r0, #56	@ 0x38
 800378c:	f000 f98b 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003790:	2038      	movs	r0, #56	@ 0x38
 8003792:	f000 f9a4 	bl	8003ade <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003796:	bf00      	nop
 8003798:	3740      	adds	r7, #64	@ 0x40
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020400 	.word	0x40020400
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40021400 	.word	0x40021400
 80037b8:	40021800 	.word	0x40021800
 80037bc:	20001a94 	.word	0x20001a94
 80037c0:	40026410 	.word	0x40026410

080037c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <HAL_Init+0x40>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <HAL_Init+0x40>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_Init+0x40>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <HAL_Init+0x40>)
 80037da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a07      	ldr	r2, [pc, #28]	@ (8003804 <HAL_Init+0x40>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ec:	2003      	movs	r0, #3
 80037ee:	f000 f94f 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f2:	200f      	movs	r0, #15
 80037f4:	f000 f808 	bl	8003808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f8:	f7fd fcce 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_InitTick+0x54>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_InitTick+0x58>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800381e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f967 	bl	8003afa <HAL_SYSTICK_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00e      	b.n	8003854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0f      	cmp	r3, #15
 800383a:	d80a      	bhi.n	8003852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383c:	2200      	movs	r2, #0
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003844:	f000 f92f 	bl	8003aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003848:	4a06      	ldr	r2, [pc, #24]	@ (8003864 <HAL_InitTick+0x5c>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000004 	.word	0x20000004
 8003860:	20000068 	.word	0x20000068
 8003864:	20000064 	.word	0x20000064

08003868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_IncTick+0x20>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_IncTick+0x24>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4413      	add	r3, r2
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_IncTick+0x24>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000068 	.word	0x20000068
 800388c:	20001af4 	.word	0x20001af4

08003890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_GetTick+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20001af4 	.word	0x20001af4

080038a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7ff ffee 	bl	8003890 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c0:	d005      	beq.n	80038ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c2:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <HAL_Delay+0x44>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ce:	bf00      	nop
 80038d0:	f7ff ffde 	bl	8003890 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d8f7      	bhi.n	80038d0 <HAL_Delay+0x28>
  {
  }
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000068 	.word	0x20000068

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <__NVIC_EnableIRQ+0x38>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000e100 	.word	0xe000e100

08003990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db0a      	blt.n	80039ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <__NVIC_SetPriority+0x4c>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b8:	e00a      	b.n	80039d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4908      	ldr	r1, [pc, #32]	@ (80039e0 <__NVIC_SetPriority+0x50>)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3b04      	subs	r3, #4
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	440b      	add	r3, r1
 80039ce:	761a      	strb	r2, [r3, #24]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000e100 	.word	0xe000e100
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf28      	it	cs
 8003a02:	2304      	movcs	r3, #4
 8003a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <NVIC_EncodePriority+0x30>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3b03      	subs	r3, #3
 8003a12:	e000      	b.n	8003a16 <NVIC_EncodePriority+0x32>
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	4313      	orrs	r3, r2
         );
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a70:	f7ff ff8e 	bl	8003990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff29 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff3e 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff8e 	bl	80039e4 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5d 	bl	8003990 <__NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff31 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa2 	bl	8003a4c <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff feb6 	bl	8003890 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e099      	b.n	8003c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b50:	e00f      	b.n	8003b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b52:	f7ff fe9d 	bl	8003890 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d908      	bls.n	8003b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e078      	b.n	8003c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e8      	bne.n	8003b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <HAL_DMA_Init+0x158>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d107      	bne.n	8003bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d117      	bne.n	8003c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f8bd 	bl	8003d98 <DMA_CheckFifoParam>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c32:	2301      	movs	r3, #1
 8003c34:	e016      	b.n	8003c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f874 	bl	8003d2c <DMA_CalcBaseAndBitshift>
 8003c44:	4603      	mov	r3, r0
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	223f      	movs	r2, #63	@ 0x3f
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	f010803f 	.word	0xf010803f

08003c70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e050      	b.n	8003d24 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e048      	b.n	8003d24 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2221      	movs	r2, #33	@ 0x21
 8003cd0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f82a 	bl	8003d2c <DMA_CalcBaseAndBitshift>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	223f      	movs	r2, #63	@ 0x3f
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	3b10      	subs	r3, #16
 8003d3c:	4a14      	ldr	r2, [pc, #80]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x64>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d46:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <DMA_CalcBaseAndBitshift+0x68>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d909      	bls.n	8003d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d6c:	e007      	b.n	8003d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	aaaaaaab 	.word	0xaaaaaaab
 8003d94:	08014a38 	.word	0x08014a38

08003d98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11f      	bne.n	8003df2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d856      	bhi.n	8003e66 <DMA_CheckFifoParam+0xce>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <DMA_CheckFifoParam+0x28>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de3 	.word	0x08003de3
 8003dc8:	08003dd1 	.word	0x08003dd1
 8003dcc:	08003e67 	.word	0x08003e67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d046      	beq.n	8003e6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de0:	e043      	b.n	8003e6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dea:	d140      	bne.n	8003e6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df0:	e03d      	b.n	8003e6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfa:	d121      	bne.n	8003e40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d837      	bhi.n	8003e72 <DMA_CheckFifoParam+0xda>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <DMA_CheckFifoParam+0x70>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e1f 	.word	0x08003e1f
 8003e10:	08003e19 	.word	0x08003e19
 8003e14:	08003e31 	.word	0x08003e31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1c:	e030      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d025      	beq.n	8003e76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2e:	e022      	b.n	8003e76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e38:	d11f      	bne.n	8003e7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e3e:	e01c      	b.n	8003e7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d903      	bls.n	8003e4e <DMA_CheckFifoParam+0xb6>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d003      	beq.n	8003e54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e4c:	e018      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      break;
 8003e52:	e015      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e00b      	b.n	8003e7e <DMA_CheckFifoParam+0xe6>
      break;
 8003e66:	bf00      	nop
 8003e68:	e00a      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e008      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e006      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e03b      	b.n	8003f1a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd f996 	bl	80011e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	f023 0107 	bic.w	r1, r3, #7
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003efa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d1      	ldr	r1, [r2, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af02      	add	r7, sp, #8
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA2D_Start+0x1c>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e018      	b.n	8003f70 <HAL_DMA2D_Start+0x4e>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f989 	bl	8004270 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d056      	beq.n	8004042 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f94:	f7ff fc7c 	bl	8003890 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f9a:	e04b      	b.n	8004034 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d023      	beq.n	8003ff6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2221      	movs	r2, #33	@ 0x21
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e0a5      	b.n	8004142 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ffc:	d01a      	beq.n	8004034 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7ff fc47 	bl	8003890 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <HAL_DMA2D_PollForTransfer+0x9c>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10f      	bne.n	8004034 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2203      	movs	r2, #3
 8004024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e086      	b.n	8004142 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ac      	beq.n	8003f9c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d061      	beq.n	8004128 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004064:	f7ff fc14 	bl	8003890 <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800406a:	e056      	b.n	800411a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02e      	beq.n	80040dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2229      	movs	r2, #41	@ 0x29
 80040c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2204      	movs	r2, #4
 80040cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e2:	d01a      	beq.n	800411a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7ff fbd4 	bl	8003890 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <HAL_DMA2D_PollForTransfer+0x182>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2203      	movs	r2, #3
 800410a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e013      	b.n	8004142 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0a1      	beq.n	800406c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2212      	movs	r2, #18
 800412e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_DMA2D_ConfigLayer+0x20>
 8004168:	2302      	movs	r3, #2
 800416a:	e079      	b.n	8004260 <HAL_DMA2D_ConfigLayer+0x114>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	3318      	adds	r3, #24
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004196:	4b35      	ldr	r3, [pc, #212]	@ (800426c <HAL_DMA2D_ConfigLayer+0x120>)
 8004198:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b0a      	cmp	r3, #10
 80041a0:	d003      	beq.n	80041aa <HAL_DMA2D_ConfigLayer+0x5e>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d107      	bne.n	80041ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e005      	b.n	80041c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d120      	bne.n	800420e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	ea02 0103 	and.w	r1, r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	d003      	beq.n	80041fe <HAL_DMA2D_ConfigLayer+0xb2>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b09      	cmp	r3, #9
 80041fc:	d127      	bne.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
 800420c:	e01f      	b.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	ea02 0103 	and.w	r1, r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	430a      	orrs	r2, r1
 8004224:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b0a      	cmp	r3, #10
 8004236:	d003      	beq.n	8004240 <HAL_DMA2D_ConfigLayer+0xf4>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b09      	cmp	r3, #9
 800423e:	d106      	bne.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800424c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	ff03000f 	.word	0xff03000f

08004270 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004270:	b480      	push	{r7}
 8004272:	b08b      	sub	sp, #44	@ 0x2c
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	041a      	lsls	r2, r3, #16
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	431a      	orrs	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042a8:	d174      	bne.n	8004394 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80042b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80042c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d108      	bne.n	80042e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	4313      	orrs	r3, r2
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e0:	e053      	b.n	800438a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d106      	bne.n	80042f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f6:	e048      	b.n	800438a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d111      	bne.n	8004324 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	0cdb      	lsrs	r3, r3, #19
 8004304:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	0a9b      	lsrs	r3, r3, #10
 800430a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	02db      	lsls	r3, r3, #11
 800431a:	4313      	orrs	r3, r2
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	e032      	b.n	800438a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d117      	bne.n	800435c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	0fdb      	lsrs	r3, r3, #31
 8004330:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	0cdb      	lsrs	r3, r3, #19
 8004336:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	0adb      	lsrs	r3, r3, #11
 800433c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	029b      	lsls	r3, r3, #10
 800434c:	431a      	orrs	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	03db      	lsls	r3, r3, #15
 8004352:	4313      	orrs	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
 800435a:	e016      	b.n	800438a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	0f1b      	lsrs	r3, r3, #28
 8004360:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	0b1b      	lsrs	r3, r3, #12
 800436c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	011a      	lsls	r2, r3, #4
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	431a      	orrs	r2, r3
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	4313      	orrs	r3, r2
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004390:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004392:	e003      	b.n	800439c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	372c      	adds	r7, #44	@ 0x2c
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	@ 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e177      	b.n	80046b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043c4:	2201      	movs	r2, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	f040 8166 	bne.w	80046ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d005      	beq.n	80043fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d130      	bne.n	800445c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2203      	movs	r2, #3
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004430:	2201      	movs	r2, #1
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	f003 0201 	and.w	r2, r3, #1
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d017      	beq.n	8004498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d123      	bne.n	80044ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	08da      	lsrs	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3208      	adds	r2, #8
 80044ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	220f      	movs	r2, #15
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	08da      	lsrs	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3208      	adds	r2, #8
 80044e6:	69b9      	ldr	r1, [r7, #24]
 80044e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 0203 	and.w	r2, r3, #3
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80c0 	beq.w	80046ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b66      	ldr	r3, [pc, #408]	@ (80046cc <HAL_GPIO_Init+0x324>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	4a65      	ldr	r2, [pc, #404]	@ (80046cc <HAL_GPIO_Init+0x324>)
 8004538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800453c:	6453      	str	r3, [r2, #68]	@ 0x44
 800453e:	4b63      	ldr	r3, [pc, #396]	@ (80046cc <HAL_GPIO_Init+0x324>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800454a:	4a61      	ldr	r2, [pc, #388]	@ (80046d0 <HAL_GPIO_Init+0x328>)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	3302      	adds	r3, #2
 8004552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a58      	ldr	r2, [pc, #352]	@ (80046d4 <HAL_GPIO_Init+0x32c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d037      	beq.n	80045e6 <HAL_GPIO_Init+0x23e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a57      	ldr	r2, [pc, #348]	@ (80046d8 <HAL_GPIO_Init+0x330>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_GPIO_Init+0x23a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a56      	ldr	r2, [pc, #344]	@ (80046dc <HAL_GPIO_Init+0x334>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02b      	beq.n	80045de <HAL_GPIO_Init+0x236>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a55      	ldr	r2, [pc, #340]	@ (80046e0 <HAL_GPIO_Init+0x338>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d025      	beq.n	80045da <HAL_GPIO_Init+0x232>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a54      	ldr	r2, [pc, #336]	@ (80046e4 <HAL_GPIO_Init+0x33c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <HAL_GPIO_Init+0x22e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a53      	ldr	r2, [pc, #332]	@ (80046e8 <HAL_GPIO_Init+0x340>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d019      	beq.n	80045d2 <HAL_GPIO_Init+0x22a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <HAL_GPIO_Init+0x344>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_GPIO_Init+0x226>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a51      	ldr	r2, [pc, #324]	@ (80046f0 <HAL_GPIO_Init+0x348>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00d      	beq.n	80045ca <HAL_GPIO_Init+0x222>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a50      	ldr	r2, [pc, #320]	@ (80046f4 <HAL_GPIO_Init+0x34c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <HAL_GPIO_Init+0x21e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a4f      	ldr	r2, [pc, #316]	@ (80046f8 <HAL_GPIO_Init+0x350>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_GPIO_Init+0x21a>
 80045be:	2309      	movs	r3, #9
 80045c0:	e012      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045c2:	230a      	movs	r3, #10
 80045c4:	e010      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045c6:	2308      	movs	r3, #8
 80045c8:	e00e      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045ca:	2307      	movs	r3, #7
 80045cc:	e00c      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045ce:	2306      	movs	r3, #6
 80045d0:	e00a      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045d2:	2305      	movs	r3, #5
 80045d4:	e008      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045d6:	2304      	movs	r3, #4
 80045d8:	e006      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045da:	2303      	movs	r3, #3
 80045dc:	e004      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045de:	2302      	movs	r3, #2
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045e6:	2300      	movs	r3, #0
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f002 0203 	and.w	r2, r2, #3
 80045ee:	0092      	lsls	r2, r2, #2
 80045f0:	4093      	lsls	r3, r2
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045f8:	4935      	ldr	r1, [pc, #212]	@ (80046d0 <HAL_GPIO_Init+0x328>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004606:	4b3d      	ldr	r3, [pc, #244]	@ (80046fc <HAL_GPIO_Init+0x354>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800462a:	4a34      	ldr	r2, [pc, #208]	@ (80046fc <HAL_GPIO_Init+0x354>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004630:	4b32      	ldr	r3, [pc, #200]	@ (80046fc <HAL_GPIO_Init+0x354>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004654:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <HAL_GPIO_Init+0x354>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800465a:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_GPIO_Init+0x354>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800467e:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <HAL_GPIO_Init+0x354>)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004684:	4b1d      	ldr	r3, [pc, #116]	@ (80046fc <HAL_GPIO_Init+0x354>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046a8:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <HAL_GPIO_Init+0x354>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	f67f ae84 	bls.w	80043c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3724      	adds	r7, #36	@ 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40021400 	.word	0x40021400
 80046ec:	40021800 	.word	0x40021800
 80046f0:	40021c00 	.word	0x40021c00
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40022400 	.word	0x40022400
 80046fc:	40013c00 	.word	0x40013c00

08004700 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e0d9      	b.n	80048d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800471c:	2201      	movs	r2, #1
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	f040 80c9 	bne.w	80048ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004738:	4a6b      	ldr	r2, [pc, #428]	@ (80048e8 <HAL_GPIO_DeInit+0x1e8>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a63      	ldr	r2, [pc, #396]	@ (80048ec <HAL_GPIO_DeInit+0x1ec>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d037      	beq.n	80047d2 <HAL_GPIO_DeInit+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a62      	ldr	r2, [pc, #392]	@ (80048f0 <HAL_GPIO_DeInit+0x1f0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d031      	beq.n	80047ce <HAL_GPIO_DeInit+0xce>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a61      	ldr	r2, [pc, #388]	@ (80048f4 <HAL_GPIO_DeInit+0x1f4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02b      	beq.n	80047ca <HAL_GPIO_DeInit+0xca>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a60      	ldr	r2, [pc, #384]	@ (80048f8 <HAL_GPIO_DeInit+0x1f8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d025      	beq.n	80047c6 <HAL_GPIO_DeInit+0xc6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a5f      	ldr	r2, [pc, #380]	@ (80048fc <HAL_GPIO_DeInit+0x1fc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01f      	beq.n	80047c2 <HAL_GPIO_DeInit+0xc2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a5e      	ldr	r2, [pc, #376]	@ (8004900 <HAL_GPIO_DeInit+0x200>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d019      	beq.n	80047be <HAL_GPIO_DeInit+0xbe>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a5d      	ldr	r2, [pc, #372]	@ (8004904 <HAL_GPIO_DeInit+0x204>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_DeInit+0xba>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a5c      	ldr	r2, [pc, #368]	@ (8004908 <HAL_GPIO_DeInit+0x208>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_GPIO_DeInit+0xb6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_GPIO_DeInit+0x20c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <HAL_GPIO_DeInit+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004910 <HAL_GPIO_DeInit+0x210>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_GPIO_DeInit+0xae>
 80047aa:	2309      	movs	r3, #9
 80047ac:	e012      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047ae:	230a      	movs	r3, #10
 80047b0:	e010      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047b2:	2308      	movs	r3, #8
 80047b4:	e00e      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047b6:	2307      	movs	r3, #7
 80047b8:	e00c      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047ba:	2306      	movs	r3, #6
 80047bc:	e00a      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047be:	2305      	movs	r3, #5
 80047c0:	e008      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047c2:	2304      	movs	r3, #4
 80047c4:	e006      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047c6:	2303      	movs	r3, #3
 80047c8:	e004      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e002      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_GPIO_DeInit+0xd4>
 80047d2:	2300      	movs	r3, #0
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	f002 0203 	and.w	r2, r2, #3
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	4093      	lsls	r3, r2
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d132      	bne.n	800484a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80047e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	4949      	ldr	r1, [pc, #292]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047f2:	4b48      	ldr	r3, [pc, #288]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	4946      	ldr	r1, [pc, #280]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004800:	4b44      	ldr	r3, [pc, #272]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43db      	mvns	r3, r3
 8004808:	4942      	ldr	r1, [pc, #264]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 800480a:	4013      	ands	r3, r2
 800480c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800480e:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	43db      	mvns	r3, r3
 8004816:	493f      	ldr	r1, [pc, #252]	@ (8004914 <HAL_GPIO_DeInit+0x214>)
 8004818:	4013      	ands	r3, r2
 800481a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800482c:	4a2e      	ldr	r2, [pc, #184]	@ (80048e8 <HAL_GPIO_DeInit+0x1e8>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	43da      	mvns	r2, r3
 800483c:	482a      	ldr	r0, [pc, #168]	@ (80048e8 <HAL_GPIO_DeInit+0x1e8>)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	400a      	ands	r2, r1
 8004844:	3302      	adds	r3, #2
 8004846:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2103      	movs	r1, #3
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	401a      	ands	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	08d2      	lsrs	r2, r2, #3
 8004880:	4019      	ands	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2103      	movs	r1, #3
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	2101      	movs	r1, #1
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	401a      	ands	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	2103      	movs	r1, #3
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	401a      	ands	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	3301      	adds	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	f67f af22 	bls.w	800471c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40020800 	.word	0x40020800
 80048f8:	40020c00 	.word	0x40020c00
 80048fc:	40021000 	.word	0x40021000
 8004900:	40021400 	.word	0x40021400
 8004904:	40021800 	.word	0x40021800
 8004908:	40021c00 	.word	0x40021c00
 800490c:	40022000 	.word	0x40022000
 8004910:	40022400 	.word	0x40022400
 8004914:	40013c00 	.word	0x40013c00

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	619a      	str	r2, [r3, #24]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4013      	ands	r3, r2
 8004962:	041a      	lsls	r2, r3, #16
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	43d9      	mvns	r1, r3
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	400b      	ands	r3, r1
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800498a:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fbd4 	bl	800114c <HAL_GPIO_EXTI_Callback>
  }
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e059      	b.n	8004a76 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc ffbd 	bl	800195c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f0:	d102      	bne.n	80049f8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 fe14 	bl	800962a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7c1a      	ldrb	r2, [r3, #16]
 8004a0a:	f88d 2000 	strb.w	r2, [sp]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a12:	f004 fd95 	bl	8009540 <USB_CoreInit>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e026      	b.n	8004a76 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fe0c 	bl	800964c <USB_SetCurrentMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e017      	b.n	8004a76 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7c1a      	ldrb	r2, [r3, #16]
 8004a4e:	f88d 2000 	strb.w	r2, [sp]
 8004a52:	3304      	adds	r3, #4
 8004a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a56:	f004 ffaf 	bl	80099b8 <USB_HostInit>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e004      	b.n	8004a76 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004a7e:	b590      	push	{r4, r7, lr}
 8004a80:	b08b      	sub	sp, #44	@ 0x2c
 8004a82:	af04      	add	r7, sp, #16
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	4608      	mov	r0, r1
 8004a88:	4611      	mov	r1, r2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	70fb      	strb	r3, [r7, #3]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70bb      	strb	r3, [r7, #2]
 8004a94:	4613      	mov	r3, r2
 8004a96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004a98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a9a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_HCD_HC_Init+0x2c>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e09d      	b.n	8004be6 <HAL_HCD_HC_Init+0x168>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3319      	adds	r3, #25
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	787a      	ldrb	r2, [r7, #1]
 8004ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3315      	adds	r3, #21
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	3326      	adds	r3, #38	@ 0x26
 8004afe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	78bb      	ldrb	r3, [r7, #2]
 8004b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0c:	b2d8      	uxtb	r0, r3
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3316      	adds	r3, #22
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fbc7 	bl	80052b8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004b2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da0a      	bge.n	8004b48 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3317      	adds	r3, #23
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e009      	b.n	8004b5c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3317      	adds	r3, #23
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f005 f88d 	bl	8009c80 <USB_GetHostSpeed>
 8004b66:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004b68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10b      	bne.n	8004b88 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004b70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d107      	bne.n	8004b88 <HAL_HCD_HC_Init+0x10a>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2bbc      	cmp	r3, #188	@ 0xbc
 8004b82:	d901      	bls.n	8004b88 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004b84:	23bc      	movs	r3, #188	@ 0xbc
 8004b86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	3318      	adds	r3, #24
 8004b98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004b9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	b298      	uxth	r0, r3
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3328      	adds	r3, #40	@ 0x28
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	787c      	ldrb	r4, [r7, #1]
 8004bc0:	78ba      	ldrb	r2, [r7, #2]
 8004bc2:	78f9      	ldrb	r1, [r7, #3]
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	f005 f87c 	bl	8009cd0 <USB_HC_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}

08004bee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_HCD_HC_Halt+0x1e>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e00f      	b.n	8004c2c <HAL_HCD_HC_Halt+0x3e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f005 fc0e 	bl	800a43e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	70fb      	strb	r3, [r7, #3]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70bb      	strb	r3, [r7, #2]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3317      	adds	r3, #23
 8004c5e:	78ba      	ldrb	r2, [r7, #2]
 8004c60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3326      	adds	r3, #38	@ 0x26
 8004c72:	787a      	ldrb	r2, [r7, #1]
 8004c74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c76:	7c3b      	ldrb	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d114      	bne.n	8004ca6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	332a      	adds	r3, #42	@ 0x2a
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3319      	adds	r3, #25
 8004ca0:	7f3a      	ldrb	r2, [r7, #28]
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e009      	b.n	8004cba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	332a      	adds	r3, #42	@ 0x2a
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004cba:	787b      	ldrb	r3, [r7, #1]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	f200 8102 	bhi.w	8004ec6 <HAL_HCD_HC_SubmitRequest+0x292>
 8004cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004eb1 	.word	0x08004eb1
 8004cd0:	08004d9d 	.word	0x08004d9d
 8004cd4:	08004e27 	.word	0x08004e27
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004cd8:	7c3b      	ldrb	r3, [r7, #16]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	f040 80f5 	bne.w	8004eca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004ce0:	78bb      	ldrb	r3, [r7, #2]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d12d      	bne.n	8004d42 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004ce6:	8b3b      	ldrh	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	333d      	adds	r3, #61	@ 0x3d
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	333d      	adds	r3, #61	@ 0x3d
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	332a      	adds	r3, #42	@ 0x2a
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004d2a:	e0ce      	b.n	8004eca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	332a      	adds	r3, #42	@ 0x2a
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	701a      	strb	r2, [r3, #0]
      break;
 8004d40:	e0c3      	b.n	8004eca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	331a      	adds	r3, #26
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	f040 80b8 	bne.w	8004eca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	333c      	adds	r3, #60	@ 0x3c
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	332a      	adds	r3, #42	@ 0x2a
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
      break;
 8004d84:	e0a1      	b.n	8004eca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	332a      	adds	r3, #42	@ 0x2a
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
      break;
 8004d9a:	e096      	b.n	8004eca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004d9c:	78bb      	ldrb	r3, [r7, #2]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d120      	bne.n	8004de4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	333d      	adds	r3, #61	@ 0x3d
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	332a      	adds	r3, #42	@ 0x2a
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004dcc:	e07e      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	332a      	adds	r3, #42	@ 0x2a
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e073      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	333c      	adds	r3, #60	@ 0x3c
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	332a      	adds	r3, #42	@ 0x2a
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
      break;
 8004e0e:	e05d      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	332a      	adds	r3, #42	@ 0x2a
 8004e20:	2202      	movs	r2, #2
 8004e22:	701a      	strb	r2, [r3, #0]
      break;
 8004e24:	e052      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e26:	78bb      	ldrb	r3, [r7, #2]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d120      	bne.n	8004e6e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	333d      	adds	r3, #61	@ 0x3d
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	332a      	adds	r3, #42	@ 0x2a
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e56:	e039      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	332a      	adds	r3, #42	@ 0x2a
 8004e68:	2202      	movs	r2, #2
 8004e6a:	701a      	strb	r2, [r3, #0]
      break;
 8004e6c:	e02e      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	333c      	adds	r3, #60	@ 0x3c
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	332a      	adds	r3, #42	@ 0x2a
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
      break;
 8004e98:	e018      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	332a      	adds	r3, #42	@ 0x2a
 8004eaa:	2202      	movs	r2, #2
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e00d      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	332a      	adds	r3, #42	@ 0x2a
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
      break;
 8004ec4:	e002      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004eca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	332c      	adds	r3, #44	@ 0x2c
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	8b39      	ldrh	r1, [r7, #24]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4403      	add	r3, r0
 8004ef0:	3334      	adds	r3, #52	@ 0x34
 8004ef2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	334c      	adds	r3, #76	@ 0x4c
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3338      	adds	r3, #56	@ 0x38
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3315      	adds	r3, #21
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	334d      	adds	r3, #77	@ 0x4d
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3310      	adds	r3, #16
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	799b      	ldrb	r3, [r3, #6]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f004 ffe2 	bl	8009f28 <USB_HC_StartXfer>
 8004f64:	4603      	mov	r3, r0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 fcd6 	bl	8009938 <USB_GetMode>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f040 80fb 	bne.w	800518a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f004 fc99 	bl	80098d0 <USB_ReadInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80f1 	beq.w	8005188 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f004 fc90 	bl	80098d0 <USB_ReadInterrupts>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fba:	d104      	bne.n	8004fc6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004fc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f004 fc80 	bl	80098d0 <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fda:	d104      	bne.n	8004fe6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004fe4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fc70 	bl	80098d0 <USB_ReadInterrupts>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ffa:	d104      	bne.n	8005006 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005004:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fc60 	bl	80098d0 <USB_ReadInterrupts>
 8005010:	4603      	mov	r3, r0
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d103      	bne.n	8005022 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2202      	movs	r2, #2
 8005020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f004 fc52 	bl	80098d0 <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005036:	d120      	bne.n	800507a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005040:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005052:	2110      	movs	r1, #16
 8005054:	6938      	ldr	r0, [r7, #16]
 8005056:	f004 fb45 	bl	80096e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800505a:	6938      	ldr	r0, [r7, #16]
 800505c:	f004 fb74 	bl	8009748 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7a5b      	ldrb	r3, [r3, #9]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d105      	bne.n	8005074 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f004 fd66 	bl	8009b40 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fc fd03 	bl	8001a80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fc26 	bl	80098d0 <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800508a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508e:	d102      	bne.n	8005096 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fd33 	bl	8006afc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f004 fc18 	bl	80098d0 <USB_ReadInterrupts>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d106      	bne.n	80050b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fccc 	bl	8001a48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2208      	movs	r2, #8
 80050b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f004 fc07 	bl	80098d0 <USB_ReadInterrupts>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050cc:	d139      	bne.n	8005142 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f005 f9a2 	bl	800a41c <USB_HC_ReadInterrupt>
 80050d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e025      	b.n	800512c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510a:	d106      	bne.n	800511a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f905 	bl	8005322 <HCD_HC_IN_IRQHandler>
 8005118:	e005      	b.n	8005126 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 ff67 	bl	8005ff4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	795b      	ldrb	r3, [r3, #5]
 8005130:	461a      	mov	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4293      	cmp	r3, r2
 8005136:	d3d3      	bcc.n	80050e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fbc2 	bl	80098d0 <USB_ReadInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d101      	bne.n	800515a <HAL_HCD_IRQHandler+0x1ea>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_HCD_IRQHandler+0x1ec>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d014      	beq.n	800518a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0210 	bic.w	r2, r2, #16
 800516e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 fbe4 	bl	800693e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0210 	orr.w	r2, r2, #16
 8005184:	619a      	str	r2, [r3, #24]
 8005186:	e000      	b.n	800518a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005188:	bf00      	nop
    }
  }
}
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_HCD_Start+0x16>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e013      	b.n	80051ce <HAL_HCD_Start+0x3e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f004 fd2a 	bl	8009c0e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fa22 	bl	8009608 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_HCD_Stop+0x16>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e00d      	b.n	8005208 <HAL_HCD_Stop+0x32>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f005 fa7d 	bl	800a6f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f004 fccc 	bl	8009bba <USB_ResetPort>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	334c      	adds	r3, #76	@ 0x4c
 8005248:	781b      	ldrb	r3, [r3, #0]
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3338      	adds	r3, #56	@ 0x38
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f004 fd0e 	bl	8009cae <USB_GetCurrentFrame>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f004 fce9 	bl	8009c80 <USB_GetHostSpeed>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	331a      	adds	r3, #26
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	331b      	adds	r3, #27
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3325      	adds	r3, #37	@ 0x25
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3324      	adds	r3, #36	@ 0x24
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f004 fad8 	bl	80098f6 <USB_ReadChInterrupts>
 8005346:	4603      	mov	r3, r0
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d11a      	bne.n	8005386 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535c:	461a      	mov	r2, r3
 800535e:	2304      	movs	r3, #4
 8005360:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	@ 0x4d
 8005372:	2207      	movs	r2, #7
 8005374:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f005 f85d 	bl	800a43e <USB_HC_Halt>
 8005384:	e09e      	b.n	80054c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f004 fab1 	bl	80098f6 <USB_ReadChInterrupts>
 8005394:	4603      	mov	r3, r0
 8005396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539e:	d11b      	bne.n	80053d8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ac:	461a      	mov	r2, r3
 80053ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	334d      	adds	r3, #77	@ 0x4d
 80053c4:	2208      	movs	r2, #8
 80053c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f005 f834 	bl	800a43e <USB_HC_Halt>
 80053d6:	e075      	b.n	80054c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f004 fa88 	bl	80098f6 <USB_ReadChInterrupts>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d11a      	bne.n	8005426 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fc:	461a      	mov	r2, r3
 80053fe:	2308      	movs	r3, #8
 8005400:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	334d      	adds	r3, #77	@ 0x4d
 8005412:	2206      	movs	r2, #6
 8005414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f005 f80d 	bl	800a43e <USB_HC_Halt>
 8005424:	e04e      	b.n	80054c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f004 fa61 	bl	80098f6 <USB_ReadChInterrupts>
 8005434:	4603      	mov	r3, r0
 8005436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d11b      	bne.n	8005478 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544c:	461a      	mov	r2, r3
 800544e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005452:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	334d      	adds	r3, #77	@ 0x4d
 8005464:	2209      	movs	r2, #9
 8005466:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f004 ffe4 	bl	800a43e <USB_HC_Halt>
 8005476:	e025      	b.n	80054c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f004 fa38 	bl	80098f6 <USB_ReadChInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	2b80      	cmp	r3, #128	@ 0x80
 800548e:	d119      	bne.n	80054c4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800549c:	461a      	mov	r2, r3
 800549e:	2380      	movs	r3, #128	@ 0x80
 80054a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	334d      	adds	r3, #77	@ 0x4d
 80054b2:	2207      	movs	r2, #7
 80054b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f004 ffbd 	bl	800a43e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 fa12 	bl	80098f6 <USB_ReadChInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054dc:	d112      	bne.n	8005504 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f004 ffa9 	bl	800a43e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f8:	461a      	mov	r2, r3
 80054fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054fe:	6093      	str	r3, [r2, #8]
 8005500:	f000 bd75 	b.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f004 f9f2 	bl	80098f6 <USB_ReadChInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	f040 8128 	bne.w	800576e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800552a:	461a      	mov	r2, r3
 800552c:	2320      	movs	r3, #32
 800552e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	331b      	adds	r3, #27
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d119      	bne.n	800557a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	331b      	adds	r3, #27
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	440a      	add	r2, r1
 8005570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005578:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	799b      	ldrb	r3, [r3, #6]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01b      	beq.n	80055ba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3330      	adds	r3, #48	@ 0x30
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	1ac9      	subs	r1, r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4403      	add	r3, r0
 80055b6:	3338      	adds	r3, #56	@ 0x38
 80055b8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	334d      	adds	r3, #77	@ 0x4d
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	3344      	adds	r3, #68	@ 0x44
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ee:	461a      	mov	r2, r3
 80055f0:	2301      	movs	r3, #1
 80055f2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3326      	adds	r3, #38	@ 0x26
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3326      	adds	r3, #38	@ 0x26
 800561a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800561c:	2b02      	cmp	r3, #2
 800561e:	d110      	bne.n	8005642 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f004 ff08 	bl	800a43e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	2310      	movs	r3, #16
 800563e:	6093      	str	r3, [r2, #8]
 8005640:	e03d      	b.n	80056be <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3326      	adds	r3, #38	@ 0x26
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d00a      	beq.n	800566e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3326      	adds	r3, #38	@ 0x26
 8005668:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800566a:	2b01      	cmp	r3, #1
 800566c:	d127      	bne.n	80056be <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	440a      	add	r2, r1
 8005684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005688:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800568c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	334c      	adds	r3, #76	@ 0x4c
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334c      	adds	r3, #76	@ 0x4c
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fc fa0b 	bl	8001ad4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	799b      	ldrb	r3, [r3, #6]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d13b      	bne.n	800573e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3338      	adds	r3, #56	@ 0x38
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4403      	add	r3, r0
 80056e6:	3328      	adds	r3, #40	@ 0x28
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	440b      	add	r3, r1
 80056ec:	1e59      	subs	r1, r3, #1
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4403      	add	r3, r0
 80056fc:	3328      	adds	r3, #40	@ 0x28
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	fbb1 f3f3 	udiv	r3, r1, r3
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8470 	beq.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	333c      	adds	r3, #60	@ 0x3c
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2d8      	uxtb	r0, r3
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	333c      	adds	r3, #60	@ 0x3c
 8005736:	4602      	mov	r2, r0
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	f000 bc58 	b.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	333c      	adds	r3, #60	@ 0x3c
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	f083 0301 	eor.w	r3, r3, #1
 8005756:	b2d8      	uxtb	r0, r3
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	333c      	adds	r3, #60	@ 0x3c
 8005766:	4602      	mov	r2, r0
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	f000 bc40 	b.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f004 f8bd 	bl	80098f6 <USB_ReadChInterrupts>
 800577c:	4603      	mov	r3, r0
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b20      	cmp	r3, #32
 8005784:	d131      	bne.n	80057ea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005792:	461a      	mov	r2, r3
 8005794:	2320      	movs	r3, #32
 8005796:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	331a      	adds	r3, #26
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	f040 841f 	bne.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	331b      	adds	r3, #27
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	334d      	adds	r3, #77	@ 0x4d
 80057d4:	2203      	movs	r2, #3
 80057d6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	4611      	mov	r1, r2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f004 fe2c 	bl	800a43e <USB_HC_Halt>
 80057e6:	f000 bc02 	b.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f004 f87f 	bl	80098f6 <USB_ReadChInterrupts>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	f040 8305 	bne.w	8005e0e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005810:	461a      	mov	r2, r3
 8005812:	2302      	movs	r3, #2
 8005814:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	334d      	adds	r3, #77	@ 0x4d
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d114      	bne.n	8005856 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	334d      	adds	r3, #77	@ 0x4d
 800583c:	2202      	movs	r2, #2
 800583e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	334c      	adds	r3, #76	@ 0x4c
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e2cc      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334d      	adds	r3, #77	@ 0x4d
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d114      	bne.n	8005896 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	334d      	adds	r3, #77	@ 0x4d
 800587c:	2202      	movs	r2, #2
 800587e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	334c      	adds	r3, #76	@ 0x4c
 8005890:	2205      	movs	r2, #5
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e2ac      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005896:	78fa      	ldrb	r2, [r7, #3]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	334d      	adds	r3, #77	@ 0x4d
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b07      	cmp	r3, #7
 80058aa:	d00b      	beq.n	80058c4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	334d      	adds	r3, #77	@ 0x4d
 80058bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80058be:	2b09      	cmp	r3, #9
 80058c0:	f040 80a6 	bne.w	8005a10 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	334d      	adds	r3, #77	@ 0x4d
 80058d4:	2202      	movs	r2, #2
 80058d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	3344      	adds	r3, #68	@ 0x44
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	1c59      	adds	r1, r3, #1
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4403      	add	r3, r0
 80058f8:	3344      	adds	r3, #68	@ 0x44
 80058fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3344      	adds	r3, #68	@ 0x44
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d943      	bls.n	800599a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	3344      	adds	r3, #68	@ 0x44
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	331a      	adds	r3, #26
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d123      	bne.n	8005984 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	331b      	adds	r3, #27
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	331c      	adds	r3, #28
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	440a      	add	r2, r1
 800597a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800597e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005982:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005984:	78fa      	ldrb	r2, [r7, #3]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	334c      	adds	r3, #76	@ 0x4c
 8005994:	2204      	movs	r2, #4
 8005996:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005998:	e229      	b.n	8005dee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800599a:	78fa      	ldrb	r2, [r7, #3]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	334c      	adds	r3, #76	@ 0x4c
 80059aa:	2202      	movs	r2, #2
 80059ac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3326      	adds	r3, #38	@ 0x26
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3326      	adds	r3, #38	@ 0x26
 80059d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f040 8209 	bne.w	8005dee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a0e:	e1ee      	b.n	8005dee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	334d      	adds	r3, #77	@ 0x4d
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	f040 80c8 	bne.w	8005bb8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	334d      	adds	r3, #77	@ 0x4d
 8005a38:	2202      	movs	r2, #2
 8005a3a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	331b      	adds	r3, #27
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	f040 81ce 	bne.w	8005df0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3326      	adds	r3, #38	@ 0x26
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d16b      	bne.n	8005b42 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3348      	adds	r3, #72	@ 0x48
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4403      	add	r3, r0
 8005a8a:	3348      	adds	r3, #72	@ 0x48
 8005a8c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3348      	adds	r3, #72	@ 0x48
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d943      	bls.n	8005b2c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3348      	adds	r3, #72	@ 0x48
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	331b      	adds	r3, #27
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	3344      	adds	r3, #68	@ 0x44
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d809      	bhi.n	8005af6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	331c      	adds	r3, #28
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b14:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	334c      	adds	r3, #76	@ 0x4c
 8005b26:	2204      	movs	r2, #4
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e014      	b.n	8005b56 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	334c      	adds	r3, #76	@ 0x4c
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e009      	b.n	8005b56 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	334c      	adds	r3, #76	@ 0x4c
 8005b52:	2202      	movs	r2, #2
 8005b54:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3326      	adds	r3, #38	@ 0x26
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	3326      	adds	r3, #38	@ 0x26
 8005b7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f040 8136 	bne.w	8005df0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ba2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e11b      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	334d      	adds	r3, #77	@ 0x4d
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	f040 8081 	bne.w	8005cd2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	334d      	adds	r3, #77	@ 0x4d
 8005be0:	2202      	movs	r2, #2
 8005be2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	331b      	adds	r3, #27
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	f040 80fa 	bne.w	8005df0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	334c      	adds	r3, #76	@ 0x4c
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c4e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c6a:	f023 0320 	bic.w	r3, r3, #32
 8005c6e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	3326      	adds	r3, #38	@ 0x26
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3326      	adds	r3, #38	@ 0x26
 8005c96:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f040 80a9 	bne.w	8005df0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e08e      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	334d      	adds	r3, #77	@ 0x4d
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d143      	bne.n	8005d70 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	334d      	adds	r3, #77	@ 0x4d
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	334c      	adds	r3, #76	@ 0x4c
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3326      	adds	r3, #38	@ 0x26
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3326      	adds	r3, #38	@ 0x26
 8005d36:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d159      	bne.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d52:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d5a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e03f      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	334d      	adds	r3, #77	@ 0x4d
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d126      	bne.n	8005dd4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	334d      	adds	r3, #77	@ 0x4d
 8005d96:	2202      	movs	r2, #2
 8005d98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3344      	adds	r3, #68	@ 0x44
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	1c59      	adds	r1, r3, #1
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4403      	add	r3, r0
 8005dba:	3344      	adds	r3, #68	@ 0x44
 8005dbc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	334c      	adds	r3, #76	@ 0x4c
 8005dce:	2204      	movs	r2, #4
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e00d      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	334d      	adds	r3, #77	@ 0x4d
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	f000 8100 	beq.w	8005fec <HCD_HC_IN_IRQHandler+0xcca>
 8005dec:	e000      	b.n	8005df0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	334c      	adds	r3, #76	@ 0x4c
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fb fe64 	bl	8001ad4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e0c:	e0ef      	b.n	8005fee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f003 fd6d 	bl	80098f6 <USB_ReadChInterrupts>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e22:	2b40      	cmp	r3, #64	@ 0x40
 8005e24:	d12f      	bne.n	8005e86 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e32:	461a      	mov	r2, r3
 8005e34:	2340      	movs	r3, #64	@ 0x40
 8005e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	334d      	adds	r3, #77	@ 0x4d
 8005e48:	2205      	movs	r2, #5
 8005e4a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	331a      	adds	r3, #26
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3344      	adds	r3, #68	@ 0x44
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 fadd 	bl	800a43e <USB_HC_Halt>
 8005e84:	e0b3      	b.n	8005fee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f003 fd31 	bl	80098f6 <USB_ReadChInterrupts>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	f040 80a7 	bne.w	8005fee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	3326      	adds	r3, #38	@ 0x26
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d11b      	bne.n	8005eee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3344      	adds	r3, #68	@ 0x44
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	334d      	adds	r3, #77	@ 0x4d
 8005eda:	2204      	movs	r2, #4
 8005edc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f004 faa9 	bl	800a43e <USB_HC_Halt>
 8005eec:	e03f      	b.n	8005f6e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3326      	adds	r3, #38	@ 0x26
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3326      	adds	r3, #38	@ 0x26
 8005f14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d129      	bne.n	8005f6e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	3344      	adds	r3, #68	@ 0x44
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	799b      	ldrb	r3, [r3, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HCD_HC_IN_IRQHandler+0xc2a>
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	331b      	adds	r3, #27
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	334d      	adds	r3, #77	@ 0x4d
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f004 fa68 	bl	800a43e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	331b      	adds	r3, #27
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d129      	bne.n	8005fd8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	331b      	adds	r3, #27
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd2:	f043 0320 	orr.w	r3, r3, #32
 8005fd6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	6093      	str	r3, [r2, #8]
 8005fea:	e000      	b.n	8005fee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005fec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f003 fc6f 	bl	80098f6 <USB_ReadChInterrupts>
 8006018:	4603      	mov	r3, r0
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d11b      	bne.n	800605a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602e:	461a      	mov	r2, r3
 8006030:	2304      	movs	r3, #4
 8006032:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	334d      	adds	r3, #77	@ 0x4d
 8006044:	2207      	movs	r2, #7
 8006046:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f004 f9f4 	bl	800a43e <USB_HC_Halt>
 8006056:	f000 bc6f 	b.w	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f003 fc47 	bl	80098f6 <USB_ReadChInterrupts>
 8006068:	4603      	mov	r3, r0
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b20      	cmp	r3, #32
 8006070:	f040 8082 	bne.w	8006178 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006080:	461a      	mov	r2, r3
 8006082:	2320      	movs	r3, #32
 8006084:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	3319      	adds	r3, #25
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d124      	bne.n	80060e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	3319      	adds	r3, #25
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	334c      	adds	r3, #76	@ 0x4c
 80060c0:	2202      	movs	r2, #2
 80060c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	334d      	adds	r3, #77	@ 0x4d
 80060d4:	2203      	movs	r2, #3
 80060d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	4611      	mov	r1, r2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f004 f9ac 	bl	800a43e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80060e6:	78fa      	ldrb	r2, [r7, #3]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	331a      	adds	r3, #26
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	f040 841d 	bne.w	8006938 <HCD_HC_OUT_IRQHandler+0x944>
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	331b      	adds	r3, #27
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 8411 	bne.w	8006938 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3326      	adds	r3, #38	@ 0x26
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d009      	beq.n	8006140 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	331b      	adds	r3, #27
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	334d      	adds	r3, #77	@ 0x4d
 8006150:	2203      	movs	r2, #3
 8006152:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f004 f96e 	bl	800a43e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3344      	adds	r3, #68	@ 0x44
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e3df      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	4611      	mov	r1, r2
 8006180:	4618      	mov	r0, r3
 8006182:	f003 fbb8 	bl	80098f6 <USB_ReadChInterrupts>
 8006186:	4603      	mov	r3, r0
 8006188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d111      	bne.n	80061b6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f004 f945 	bl	800a43e <USB_HC_Halt>
 80061b4:	e3c0      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f003 fb99 	bl	80098f6 <USB_ReadChInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d168      	bne.n	80062a0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	3344      	adds	r3, #68	@ 0x44
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f003 fb83 	bl	80098f6 <USB_ReadChInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d112      	bne.n	8006220 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	3319      	adds	r3, #25
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621a:	461a      	mov	r2, r3
 800621c:	2340      	movs	r3, #64	@ 0x40
 800621e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	331b      	adds	r3, #27
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d019      	beq.n	800626a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	331b      	adds	r3, #27
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	440a      	add	r2, r1
 8006260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006268:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006276:	461a      	mov	r2, r3
 8006278:	2301      	movs	r3, #1
 800627a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	334d      	adds	r3, #77	@ 0x4d
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f004 f8d0 	bl	800a43e <USB_HC_Halt>
 800629e:	e34b      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f003 fb24 	bl	80098f6 <USB_ReadChInterrupts>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b40      	cmp	r3, #64	@ 0x40
 80062b6:	d139      	bne.n	800632c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	334d      	adds	r3, #77	@ 0x4d
 80062c8:	2205      	movs	r2, #5
 80062ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	331a      	adds	r3, #26
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3319      	adds	r3, #25
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3344      	adds	r3, #68	@ 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	78fa      	ldrb	r2, [r7, #3]
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f004 f893 	bl	800a43e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006324:	461a      	mov	r2, r3
 8006326:	2340      	movs	r3, #64	@ 0x40
 8006328:	6093      	str	r3, [r2, #8]
 800632a:	e305      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f003 fade 	bl	80098f6 <USB_ReadChInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d11a      	bne.n	800637a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	2308      	movs	r3, #8
 8006354:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	334d      	adds	r3, #77	@ 0x4d
 8006366:	2206      	movs	r2, #6
 8006368:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f004 f863 	bl	800a43e <USB_HC_Halt>
 8006378:	e2de      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f003 fab7 	bl	80098f6 <USB_ReadChInterrupts>
 8006388:	4603      	mov	r3, r0
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b10      	cmp	r3, #16
 8006390:	d144      	bne.n	800641c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006392:	78fa      	ldrb	r2, [r7, #3]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	3344      	adds	r3, #68	@ 0x44
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	334d      	adds	r3, #77	@ 0x4d
 80063b6:	2204      	movs	r2, #4
 80063b8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3319      	adds	r3, #25
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d114      	bne.n	80063fa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3318      	adds	r3, #24
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3319      	adds	r3, #25
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	78fa      	ldrb	r2, [r7, #3]
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f004 f81b 	bl	800a43e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006414:	461a      	mov	r2, r3
 8006416:	2310      	movs	r3, #16
 8006418:	6093      	str	r3, [r2, #8]
 800641a:	e28d      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f003 fa66 	bl	80098f6 <USB_ReadChInterrupts>
 800642a:	4603      	mov	r3, r0
 800642c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006430:	2b80      	cmp	r3, #128	@ 0x80
 8006432:	d169      	bne.n	8006508 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	799b      	ldrb	r3, [r3, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d111      	bne.n	8006460 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	334d      	adds	r3, #77	@ 0x4d
 800644c:	2207      	movs	r2, #7
 800644e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	78fa      	ldrb	r2, [r7, #3]
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f003 fff0 	bl	800a43e <USB_HC_Halt>
 800645e:	e049      	b.n	80064f4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3344      	adds	r3, #68	@ 0x44
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4403      	add	r3, r0
 8006480:	3344      	adds	r3, #68	@ 0x44
 8006482:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	3344      	adds	r3, #68	@ 0x44
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d922      	bls.n	80064e0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3344      	adds	r3, #68	@ 0x44
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	334c      	adds	r3, #76	@ 0x4c
 80064be:	2204      	movs	r2, #4
 80064c0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	334c      	adds	r3, #76	@ 0x4c
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fb fafb 	bl	8001ad4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064de:	e009      	b.n	80064f4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	334c      	adds	r3, #76	@ 0x4c
 80064f0:	2202      	movs	r2, #2
 80064f2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006500:	461a      	mov	r2, r3
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	6093      	str	r3, [r2, #8]
 8006506:	e217      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f003 f9f0 	bl	80098f6 <USB_ReadChInterrupts>
 8006516:	4603      	mov	r3, r0
 8006518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006520:	d11b      	bne.n	800655a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	334d      	adds	r3, #77	@ 0x4d
 8006532:	2209      	movs	r2, #9
 8006534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f003 ff7d 	bl	800a43e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006550:	461a      	mov	r2, r3
 8006552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006556:	6093      	str	r3, [r2, #8]
 8006558:	e1ee      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f003 f9c7 	bl	80098f6 <USB_ReadChInterrupts>
 8006568:	4603      	mov	r3, r0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	f040 81df 	bne.w	8006932 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006580:	461a      	mov	r2, r3
 8006582:	2302      	movs	r3, #2
 8006584:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	334d      	adds	r3, #77	@ 0x4d
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 8093 	bne.w	80066c4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	334d      	adds	r3, #77	@ 0x4d
 80065ae:	2202      	movs	r2, #2
 80065b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	334c      	adds	r3, #76	@ 0x4c
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3326      	adds	r3, #38	@ 0x26
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d00b      	beq.n	80065f4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3326      	adds	r3, #38	@ 0x26
 80065ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	f040 8190 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	799b      	ldrb	r3, [r3, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d115      	bne.n	8006628 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	333d      	adds	r3, #61	@ 0x3d
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	f083 0301 	eor.w	r3, r3, #1
 8006614:	b2d8      	uxtb	r0, r3
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	333d      	adds	r3, #61	@ 0x3d
 8006624:	4602      	mov	r2, r0
 8006626:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	799b      	ldrb	r3, [r3, #6]
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 8171 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	3334      	adds	r3, #52	@ 0x34
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8165 	beq.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3334      	adds	r3, #52	@ 0x34
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4403      	add	r3, r0
 800666a:	3328      	adds	r3, #40	@ 0x28
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	440b      	add	r3, r1
 8006670:	1e59      	subs	r1, r3, #1
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4403      	add	r3, r0
 8006680:	3328      	adds	r3, #40	@ 0x28
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	fbb1 f3f3 	udiv	r3, r1, r3
 8006688:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 813f 	beq.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	333d      	adds	r3, #61	@ 0x3d
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2d8      	uxtb	r0, r3
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	333d      	adds	r3, #61	@ 0x3d
 80066be:	4602      	mov	r2, r0
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e127      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	334d      	adds	r3, #77	@ 0x4d
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d120      	bne.n	800671c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	334d      	adds	r3, #77	@ 0x4d
 80066ea:	2202      	movs	r2, #2
 80066ec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	331b      	adds	r3, #27
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	f040 8107 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	334c      	adds	r3, #76	@ 0x4c
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e0fb      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	4613      	mov	r3, r2
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	334d      	adds	r3, #77	@ 0x4d
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d13a      	bne.n	80067a8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	334d      	adds	r3, #77	@ 0x4d
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	334c      	adds	r3, #76	@ 0x4c
 8006756:	2202      	movs	r2, #2
 8006758:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	331b      	adds	r3, #27
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 80d1 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	331b      	adds	r3, #27
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	440a      	add	r2, r1
 800679c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a4:	6053      	str	r3, [r2, #4]
 80067a6:	e0b5      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80067a8:	78fa      	ldrb	r2, [r7, #3]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	334d      	adds	r3, #77	@ 0x4d
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d114      	bne.n	80067e8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067be:	78fa      	ldrb	r2, [r7, #3]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	334d      	adds	r3, #77	@ 0x4d
 80067ce:	2202      	movs	r2, #2
 80067d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	334c      	adds	r3, #76	@ 0x4c
 80067e2:	2202      	movs	r2, #2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e095      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	334d      	adds	r3, #77	@ 0x4d
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d114      	bne.n	8006828 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	334d      	adds	r3, #77	@ 0x4d
 800680e:	2202      	movs	r2, #2
 8006810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	334c      	adds	r3, #76	@ 0x4c
 8006822:	2205      	movs	r2, #5
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e075      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	334d      	adds	r3, #77	@ 0x4d
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b07      	cmp	r3, #7
 800683c:	d00a      	beq.n	8006854 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	334d      	adds	r3, #77	@ 0x4d
 800684e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006850:	2b09      	cmp	r3, #9
 8006852:	d170      	bne.n	8006936 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	334d      	adds	r3, #77	@ 0x4d
 8006864:	2202      	movs	r2, #2
 8006866:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	3344      	adds	r3, #68	@ 0x44
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4403      	add	r3, r0
 8006888:	3344      	adds	r3, #68	@ 0x44
 800688a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	3344      	adds	r3, #68	@ 0x44
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d914      	bls.n	80068cc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	3344      	adds	r3, #68	@ 0x44
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	334c      	adds	r3, #76	@ 0x4c
 80068c6:	2204      	movs	r2, #4
 80068c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80068ca:	e022      	b.n	8006912 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068cc:	78fa      	ldrb	r2, [r7, #3]
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	334c      	adds	r3, #76	@ 0x4c
 80068dc:	2202      	movs	r2, #2
 80068de:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690c:	461a      	mov	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006912:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	334c      	adds	r3, #76	@ 0x4c
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fb f8d2 	bl	8001ad4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006930:	e002      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006936:	bf00      	nop
  }
}
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b08a      	sub	sp, #40	@ 0x28
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	0c5b      	lsrs	r3, r3, #17
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006972:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d004      	beq.n	8006984 <HCD_RXQLVL_IRQHandler+0x46>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b05      	cmp	r3, #5
 800697e:	f000 80b6 	beq.w	8006aee <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006982:	e0b7      	b.n	8006af4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 80b3 	beq.w	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	332c      	adds	r3, #44	@ 0x2c
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80a7 	beq.w	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4613      	mov	r3, r2
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	3338      	adds	r3, #56	@ 0x38
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	18d1      	adds	r1, r2, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4613      	mov	r3, r2
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4403      	add	r3, r0
 80069c8:	3334      	adds	r3, #52	@ 0x34
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4299      	cmp	r1, r3
 80069ce:	f200 8083 	bhi.w	8006ad8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4613      	mov	r3, r2
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	332c      	adds	r3, #44	@ 0x2c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	b292      	uxth	r2, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	f002 ff17 	bl	8009820 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4613      	mov	r3, r2
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	332c      	adds	r3, #44	@ 0x2c
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	18d1      	adds	r1, r2, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4403      	add	r3, r0
 8006a16:	332c      	adds	r3, #44	@ 0x2c
 8006a18:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	3338      	adds	r3, #56	@ 0x38
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	18d1      	adds	r1, r2, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4613      	mov	r3, r2
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4403      	add	r3, r0
 8006a3e:	3338      	adds	r3, #56	@ 0x38
 8006a40:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	0cdb      	lsrs	r3, r3, #19
 8006a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a56:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3328      	adds	r3, #40	@ 0x28
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d13f      	bne.n	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d03c      	beq.n	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a96:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	333c      	adds	r3, #60	@ 0x3c
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f083 0301 	eor.w	r3, r3, #1
 8006ac0:	b2d8      	uxtb	r0, r3
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	333c      	adds	r3, #60	@ 0x3c
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	701a      	strb	r2, [r3, #0]
      break;
 8006ad6:	e00c      	b.n	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4613      	mov	r3, r2
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	334c      	adds	r3, #76	@ 0x4c
 8006ae8:	2204      	movs	r2, #4
 8006aea:	701a      	strb	r2, [r3, #0]
      break;
 8006aec:	e001      	b.n	8006af2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006aee:	bf00      	nop
 8006af0:	e000      	b.n	8006af4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006af2:	bf00      	nop
  }
}
 8006af4:	bf00      	nop
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006b28:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d10b      	bne.n	8006b4c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d102      	bne.n	8006b44 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fa ff90 	bl	8001a64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f043 0302 	orr.w	r3, r3, #2
 8006b4a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d132      	bne.n	8006bbc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d126      	bne.n	8006bb6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7a5b      	ldrb	r3, [r3, #9]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d113      	bne.n	8006b98 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b7a:	d106      	bne.n	8006b8a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2102      	movs	r1, #2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f002 ffdc 	bl	8009b40 <USB_InitFSLSPClkSel>
 8006b88:	e011      	b.n	8006bae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 ffd5 	bl	8009b40 <USB_InitFSLSPClkSel>
 8006b96:	e00a      	b.n	8006bae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	79db      	ldrb	r3, [r3, #7]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d106      	bne.n	8006bae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006bac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa ff74 	bl	8001a9c <HAL_HCD_PortEnabled_Callback>
 8006bb4:	e002      	b.n	8006bbc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fa ff7e 	bl	8001ab8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d103      	bne.n	8006bce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6013      	str	r3, [r2, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0bf      	b.n	8006d76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fb14 	bl	8001238 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6999      	ldr	r1, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b4a      	ldr	r3, [pc, #296]	@ (8006d80 <HAL_LTDC_Init+0x19c>)
 8006c58:	400b      	ands	r3, r1
 8006c5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6899      	ldr	r1, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68d9      	ldr	r1, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b3e      	ldr	r3, [pc, #248]	@ (8006d80 <HAL_LTDC_Init+0x19c>)
 8006c86:	400b      	ands	r3, r1
 8006c88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68d9      	ldr	r1, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1a      	ldr	r2, [r3, #32]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <HAL_LTDC_Init+0x19c>)
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	041b      	lsls	r3, r3, #16
 8006cbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6919      	ldr	r1, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6959      	ldr	r1, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <HAL_LTDC_Init+0x19c>)
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6959      	ldr	r1, [r3, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d14:	041b      	lsls	r3, r3, #16
 8006d16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0206 	orr.w	r2, r2, #6
 8006d52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	f000f800 	.word	0xf000f800

08006d84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_LTDC_ConfigLayer+0x1a>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e02c      	b.n	8006df8 <HAL_LTDC_ConfigLayer+0x74>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2134      	movs	r1, #52	@ 0x34
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f871 	bl	8006ec0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2201      	movs	r2, #1
 8006de4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bdb0      	pop	{r4, r5, r7, pc}

08006e00 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_LTDC_EnableDither+0x16>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e016      	b.n	8006e44 <HAL_LTDC_EnableDither+0x44>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006e26:	4b0a      	ldr	r3, [pc, #40]	@ (8006e50 <HAL_LTDC_EnableDither+0x50>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	4a09      	ldr	r2, [pc, #36]	@ (8006e50 <HAL_LTDC_EnableDither+0x50>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e30:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40016800 	.word	0x40016800

08006e54 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_LTDC_SetAlpha+0x1a>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e024      	b.n	8006eb8 <HAL_LTDC_SetAlpha+0x64>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2234      	movs	r2, #52	@ 0x34
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	3338      	adds	r3, #56	@ 0x38
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f811 	bl	8006ec0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	@ 0x24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006edc:	4413      	add	r3, r2
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	01db      	lsls	r3, r3, #7
 8006eec:	4413      	add	r3, r2
 8006eee:	3384      	adds	r3, #132	@ 0x84
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	01d2      	lsls	r2, r2, #7
 8006efc:	440a      	add	r2, r1
 8006efe:	3284      	adds	r2, #132	@ 0x84
 8006f00:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006f04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	01db      	lsls	r3, r3, #7
 8006f24:	440b      	add	r3, r1
 8006f26:	3384      	adds	r3, #132	@ 0x84
 8006f28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f3e:	4413      	add	r3, r2
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	01db      	lsls	r3, r3, #7
 8006f4e:	4413      	add	r3, r2
 8006f50:	3384      	adds	r3, #132	@ 0x84
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	01d2      	lsls	r2, r2, #7
 8006f5e:	440a      	add	r2, r1
 8006f60:	3284      	adds	r2, #132	@ 0x84
 8006f62:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006f66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f76:	4413      	add	r3, r2
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	440b      	add	r3, r1
 8006f86:	3384      	adds	r3, #132	@ 0x84
 8006f88:	4619      	mov	r1, r3
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	01db      	lsls	r3, r3, #7
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3384      	adds	r3, #132	@ 0x84
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	6812      	ldr	r2, [r2, #0]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	01d2      	lsls	r2, r2, #7
 8006faa:	440a      	add	r2, r1
 8006fac:	3284      	adds	r2, #132	@ 0x84
 8006fae:	f023 0307 	bic.w	r3, r3, #7
 8006fb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3384      	adds	r3, #132	@ 0x84
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	01db      	lsls	r3, r3, #7
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3384      	adds	r3, #132	@ 0x84
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	01db      	lsls	r3, r3, #7
 8007000:	4413      	add	r3, r2
 8007002:	3384      	adds	r3, #132	@ 0x84
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007010:	461a      	mov	r2, r3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	431a      	orrs	r2, r3
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	431a      	orrs	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4619      	mov	r1, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	01db      	lsls	r3, r3, #7
 8007024:	440b      	add	r3, r1
 8007026:	3384      	adds	r3, #132	@ 0x84
 8007028:	4619      	mov	r1, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	01db      	lsls	r3, r3, #7
 800703a:	4413      	add	r3, r2
 800703c:	3384      	adds	r3, #132	@ 0x84
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	4611      	mov	r1, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	01d2      	lsls	r2, r2, #7
 800704a:	440a      	add	r2, r1
 800704c:	3284      	adds	r2, #132	@ 0x84
 800704e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007052:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	01db      	lsls	r3, r3, #7
 800705e:	4413      	add	r3, r2
 8007060:	3384      	adds	r3, #132	@ 0x84
 8007062:	461a      	mov	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	01db      	lsls	r3, r3, #7
 8007074:	4413      	add	r3, r2
 8007076:	3384      	adds	r3, #132	@ 0x84
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	4611      	mov	r1, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	01d2      	lsls	r2, r2, #7
 8007084:	440a      	add	r2, r1
 8007086:	3284      	adds	r2, #132	@ 0x84
 8007088:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6809      	ldr	r1, [r1, #0]
 800709e:	4608      	mov	r0, r1
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	01c9      	lsls	r1, r1, #7
 80070a4:	4401      	add	r1, r0
 80070a6:	3184      	adds	r1, #132	@ 0x84
 80070a8:	4313      	orrs	r3, r2
 80070aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	01db      	lsls	r3, r3, #7
 80070b6:	4413      	add	r3, r2
 80070b8:	3384      	adds	r3, #132	@ 0x84
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	01db      	lsls	r3, r3, #7
 80070c6:	4413      	add	r3, r2
 80070c8:	3384      	adds	r3, #132	@ 0x84
 80070ca:	461a      	mov	r2, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	01db      	lsls	r3, r3, #7
 80070da:	4413      	add	r3, r2
 80070dc:	3384      	adds	r3, #132	@ 0x84
 80070de:	461a      	mov	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80070ee:	2304      	movs	r3, #4
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e01b      	b.n	800712c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d102      	bne.n	8007102 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80070fc:	2303      	movs	r3, #3
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e014      	b.n	800712c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d00b      	beq.n	8007122 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800710e:	2b02      	cmp	r3, #2
 8007110:	d007      	beq.n	8007122 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007116:	2b03      	cmp	r3, #3
 8007118:	d003      	beq.n	8007122 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800711e:	2b07      	cmp	r3, #7
 8007120:	d102      	bne.n	8007128 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007122:	2302      	movs	r3, #2
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	e001      	b.n	800712c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007128:	2301      	movs	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	01db      	lsls	r3, r3, #7
 8007136:	4413      	add	r3, r2
 8007138:	3384      	adds	r3, #132	@ 0x84
 800713a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	4611      	mov	r1, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	01d2      	lsls	r2, r2, #7
 8007146:	440a      	add	r2, r1
 8007148:	3284      	adds	r2, #132	@ 0x84
 800714a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800714e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6859      	ldr	r1, [r3, #4]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	1acb      	subs	r3, r1, r3
 8007166:	69f9      	ldr	r1, [r7, #28]
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	6809      	ldr	r1, [r1, #0]
 8007172:	4608      	mov	r0, r1
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	01c9      	lsls	r1, r1, #7
 8007178:	4401      	add	r1, r0
 800717a:	3184      	adds	r1, #132	@ 0x84
 800717c:	4313      	orrs	r3, r2
 800717e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	01db      	lsls	r3, r3, #7
 800718a:	4413      	add	r3, r2
 800718c:	3384      	adds	r3, #132	@ 0x84
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	4611      	mov	r1, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	01d2      	lsls	r2, r2, #7
 800719a:	440a      	add	r2, r1
 800719c:	3284      	adds	r2, #132	@ 0x84
 800719e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80071a2:	f023 0307 	bic.w	r3, r3, #7
 80071a6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	01db      	lsls	r3, r3, #7
 80071b2:	4413      	add	r3, r2
 80071b4:	3384      	adds	r3, #132	@ 0x84
 80071b6:	461a      	mov	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	01db      	lsls	r3, r3, #7
 80071c8:	4413      	add	r3, r2
 80071ca:	3384      	adds	r3, #132	@ 0x84
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	4611      	mov	r1, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	01d2      	lsls	r2, r2, #7
 80071d8:	440a      	add	r2, r1
 80071da:	3284      	adds	r2, #132	@ 0x84
 80071dc:	f043 0301 	orr.w	r3, r3, #1
 80071e0:	6013      	str	r3, [r2, #0]
}
 80071e2:	bf00      	nop
 80071e4:	3724      	adds	r7, #36	@ 0x24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4b20      	ldr	r3, [pc, #128]	@ (8007280 <HAL_PWREx_EnableOverDrive+0x90>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007202:	4a1f      	ldr	r2, [pc, #124]	@ (8007280 <HAL_PWREx_EnableOverDrive+0x90>)
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007208:	6413      	str	r3, [r2, #64]	@ 0x40
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <HAL_PWREx_EnableOverDrive+0x90>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007216:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <HAL_PWREx_EnableOverDrive+0x94>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800721c:	f7fc fb38 	bl	8003890 <HAL_GetTick>
 8007220:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007222:	e009      	b.n	8007238 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007224:	f7fc fb34 	bl	8003890 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007232:	d901      	bls.n	8007238 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e01f      	b.n	8007278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007238:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <HAL_PWREx_EnableOverDrive+0x98>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007244:	d1ee      	bne.n	8007224 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007246:	4b11      	ldr	r3, [pc, #68]	@ (800728c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800724c:	f7fc fb20 	bl	8003890 <HAL_GetTick>
 8007250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007252:	e009      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007254:	f7fc fb1c 	bl	8003890 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007262:	d901      	bls.n	8007268 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e007      	b.n	8007278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007268:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <HAL_PWREx_EnableOverDrive+0x98>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007274:	d1ee      	bne.n	8007254 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40023800 	.word	0x40023800
 8007284:	420e0040 	.word	0x420e0040
 8007288:	40007000 	.word	0x40007000
 800728c:	420e0044 	.word	0x420e0044

08007290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e267      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d075      	beq.n	800739a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ae:	4b88      	ldr	r3, [pc, #544]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 030c 	and.w	r3, r3, #12
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d00c      	beq.n	80072d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ba:	4b85      	ldr	r3, [pc, #532]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d112      	bne.n	80072ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072c6:	4b82      	ldr	r3, [pc, #520]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d2:	d10b      	bne.n	80072ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d4:	4b7e      	ldr	r3, [pc, #504]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d05b      	beq.n	8007398 <HAL_RCC_OscConfig+0x108>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d157      	bne.n	8007398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e242      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f4:	d106      	bne.n	8007304 <HAL_RCC_OscConfig+0x74>
 80072f6:	4b76      	ldr	r3, [pc, #472]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a75      	ldr	r2, [pc, #468]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80072fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e01d      	b.n	8007340 <HAL_RCC_OscConfig+0xb0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800730c:	d10c      	bne.n	8007328 <HAL_RCC_OscConfig+0x98>
 800730e:	4b70      	ldr	r3, [pc, #448]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a6f      	ldr	r2, [pc, #444]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	4b6d      	ldr	r3, [pc, #436]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a6c      	ldr	r2, [pc, #432]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	e00b      	b.n	8007340 <HAL_RCC_OscConfig+0xb0>
 8007328:	4b69      	ldr	r3, [pc, #420]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a68      	ldr	r2, [pc, #416]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800732e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	4b66      	ldr	r3, [pc, #408]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a65      	ldr	r2, [pc, #404]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800733a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800733e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d013      	beq.n	8007370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007348:	f7fc faa2 	bl	8003890 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007350:	f7fc fa9e 	bl	8003890 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b64      	cmp	r3, #100	@ 0x64
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e207      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007362:	4b5b      	ldr	r3, [pc, #364]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f0      	beq.n	8007350 <HAL_RCC_OscConfig+0xc0>
 800736e:	e014      	b.n	800739a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007370:	f7fc fa8e 	bl	8003890 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007378:	f7fc fa8a 	bl	8003890 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b64      	cmp	r3, #100	@ 0x64
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e1f3      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738a:	4b51      	ldr	r3, [pc, #324]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0xe8>
 8007396:	e000      	b.n	800739a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d063      	beq.n	800746e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073a6:	4b4a      	ldr	r3, [pc, #296]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 030c 	and.w	r3, r3, #12
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073b2:	4b47      	ldr	r3, [pc, #284]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d11c      	bne.n	80073f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073be:	4b44      	ldr	r3, [pc, #272]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d116      	bne.n	80073f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ca:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_RCC_OscConfig+0x152>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d001      	beq.n	80073e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e1c7      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e2:	4b3b      	ldr	r3, [pc, #236]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4937      	ldr	r1, [pc, #220]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073f6:	e03a      	b.n	800746e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007400:	4b34      	ldr	r3, [pc, #208]	@ (80074d4 <HAL_RCC_OscConfig+0x244>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007406:	f7fc fa43 	bl	8003890 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800740e:	f7fc fa3f 	bl	8003890 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e1a8      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007420:	4b2b      	ldr	r3, [pc, #172]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742c:	4b28      	ldr	r3, [pc, #160]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4925      	ldr	r1, [pc, #148]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 800743c:	4313      	orrs	r3, r2
 800743e:	600b      	str	r3, [r1, #0]
 8007440:	e015      	b.n	800746e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007442:	4b24      	ldr	r3, [pc, #144]	@ (80074d4 <HAL_RCC_OscConfig+0x244>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fc fa22 	bl	8003890 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007450:	f7fc fa1e 	bl	8003890 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e187      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007462:	4b1b      	ldr	r3, [pc, #108]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d036      	beq.n	80074e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007482:	4b15      	ldr	r3, [pc, #84]	@ (80074d8 <HAL_RCC_OscConfig+0x248>)
 8007484:	2201      	movs	r2, #1
 8007486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007488:	f7fc fa02 	bl	8003890 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007490:	f7fc f9fe 	bl	8003890 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e167      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a2:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <HAL_RCC_OscConfig+0x240>)
 80074a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f0      	beq.n	8007490 <HAL_RCC_OscConfig+0x200>
 80074ae:	e01b      	b.n	80074e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b0:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <HAL_RCC_OscConfig+0x248>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b6:	f7fc f9eb 	bl	8003890 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074bc:	e00e      	b.n	80074dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074be:	f7fc f9e7 	bl	8003890 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d907      	bls.n	80074dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e150      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
 80074d0:	40023800 	.word	0x40023800
 80074d4:	42470000 	.word	0x42470000
 80074d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074dc:	4b88      	ldr	r3, [pc, #544]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80074de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ea      	bne.n	80074be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8097 	beq.w	8007624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fa:	4b81      	ldr	r3, [pc, #516]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10f      	bne.n	8007526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	4b7d      	ldr	r3, [pc, #500]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	4a7c      	ldr	r2, [pc, #496]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007514:	6413      	str	r3, [r2, #64]	@ 0x40
 8007516:	4b7a      	ldr	r3, [pc, #488]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800751e:	60bb      	str	r3, [r7, #8]
 8007520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007526:	4b77      	ldr	r3, [pc, #476]	@ (8007704 <HAL_RCC_OscConfig+0x474>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d118      	bne.n	8007564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007532:	4b74      	ldr	r3, [pc, #464]	@ (8007704 <HAL_RCC_OscConfig+0x474>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a73      	ldr	r2, [pc, #460]	@ (8007704 <HAL_RCC_OscConfig+0x474>)
 8007538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800753c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800753e:	f7fc f9a7 	bl	8003890 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007546:	f7fc f9a3 	bl	8003890 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e10c      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007558:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <HAL_RCC_OscConfig+0x474>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d106      	bne.n	800757a <HAL_RCC_OscConfig+0x2ea>
 800756c:	4b64      	ldr	r3, [pc, #400]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 800756e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007570:	4a63      	ldr	r2, [pc, #396]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	6713      	str	r3, [r2, #112]	@ 0x70
 8007578:	e01c      	b.n	80075b4 <HAL_RCC_OscConfig+0x324>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	2b05      	cmp	r3, #5
 8007580:	d10c      	bne.n	800759c <HAL_RCC_OscConfig+0x30c>
 8007582:	4b5f      	ldr	r3, [pc, #380]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007586:	4a5e      	ldr	r2, [pc, #376]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007588:	f043 0304 	orr.w	r3, r3, #4
 800758c:	6713      	str	r3, [r2, #112]	@ 0x70
 800758e:	4b5c      	ldr	r3, [pc, #368]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007592:	4a5b      	ldr	r2, [pc, #364]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007594:	f043 0301 	orr.w	r3, r3, #1
 8007598:	6713      	str	r3, [r2, #112]	@ 0x70
 800759a:	e00b      	b.n	80075b4 <HAL_RCC_OscConfig+0x324>
 800759c:	4b58      	ldr	r3, [pc, #352]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a0:	4a57      	ldr	r2, [pc, #348]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075a8:	4b55      	ldr	r3, [pc, #340]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ac:	4a54      	ldr	r2, [pc, #336]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80075ae:	f023 0304 	bic.w	r3, r3, #4
 80075b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d015      	beq.n	80075e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fc f968 	bl	8003890 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c2:	e00a      	b.n	80075da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075c4:	f7fc f964 	bl	8003890 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e0cb      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075da:	4b49      	ldr	r3, [pc, #292]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0ee      	beq.n	80075c4 <HAL_RCC_OscConfig+0x334>
 80075e6:	e014      	b.n	8007612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075e8:	f7fc f952 	bl	8003890 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075ee:	e00a      	b.n	8007606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075f0:	f7fc f94e 	bl	8003890 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075fe:	4293      	cmp	r3, r2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e0b5      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007606:	4b3e      	ldr	r3, [pc, #248]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1ee      	bne.n	80075f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d105      	bne.n	8007624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007618:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	4a38      	ldr	r2, [pc, #224]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 800761e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80a1 	beq.w	8007770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800762e:	4b34      	ldr	r3, [pc, #208]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 030c 	and.w	r3, r3, #12
 8007636:	2b08      	cmp	r3, #8
 8007638:	d05c      	beq.n	80076f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d141      	bne.n	80076c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007642:	4b31      	ldr	r3, [pc, #196]	@ (8007708 <HAL_RCC_OscConfig+0x478>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fc f922 	bl	8003890 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007650:	f7fc f91e 	bl	8003890 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e087      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007662:	4b27      	ldr	r3, [pc, #156]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	3b01      	subs	r3, #1
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	061b      	lsls	r3, r3, #24
 8007692:	491b      	ldr	r1, [pc, #108]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 8007694:	4313      	orrs	r3, r2
 8007696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007698:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <HAL_RCC_OscConfig+0x478>)
 800769a:	2201      	movs	r2, #1
 800769c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769e:	f7fc f8f7 	bl	8003890 <HAL_GetTick>
 80076a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a4:	e008      	b.n	80076b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a6:	f7fc f8f3 	bl	8003890 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e05c      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b8:	4b11      	ldr	r3, [pc, #68]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0f0      	beq.n	80076a6 <HAL_RCC_OscConfig+0x416>
 80076c4:	e054      	b.n	8007770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c6:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <HAL_RCC_OscConfig+0x478>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076cc:	f7fc f8e0 	bl	8003890 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fc f8dc 	bl	8003890 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e045      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e6:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <HAL_RCC_OscConfig+0x470>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f0      	bne.n	80076d4 <HAL_RCC_OscConfig+0x444>
 80076f2:	e03d      	b.n	8007770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d107      	bne.n	800770c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e038      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
 8007700:	40023800 	.word	0x40023800
 8007704:	40007000 	.word	0x40007000
 8007708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800770c:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <HAL_RCC_OscConfig+0x4ec>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d028      	beq.n	800776c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007724:	429a      	cmp	r2, r3
 8007726:	d121      	bne.n	800776c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007732:	429a      	cmp	r2, r3
 8007734:	d11a      	bne.n	800776c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800773c:	4013      	ands	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007744:	4293      	cmp	r3, r2
 8007746:	d111      	bne.n	800776c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	3b01      	subs	r3, #1
 8007756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007758:	429a      	cmp	r2, r3
 800775a:	d107      	bne.n	800776c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023800 	.word	0x40023800

08007780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0cc      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007794:	4b68      	ldr	r3, [pc, #416]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d90c      	bls.n	80077bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077a2:	4b65      	ldr	r3, [pc, #404]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077aa:	4b63      	ldr	r3, [pc, #396]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0b8      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d020      	beq.n	800780a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077d4:	4b59      	ldr	r3, [pc, #356]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	4a58      	ldr	r2, [pc, #352]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077ec:	4b53      	ldr	r3, [pc, #332]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	4a52      	ldr	r2, [pc, #328]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f8:	4b50      	ldr	r3, [pc, #320]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	494d      	ldr	r1, [pc, #308]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	4313      	orrs	r3, r2
 8007808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d044      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d107      	bne.n	800782e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800781e:	4b47      	ldr	r3, [pc, #284]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d119      	bne.n	800785e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e07f      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d003      	beq.n	800783e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800783a:	2b03      	cmp	r3, #3
 800783c:	d107      	bne.n	800784e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800783e:	4b3f      	ldr	r3, [pc, #252]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e06f      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784e:	4b3b      	ldr	r3, [pc, #236]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e067      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800785e:	4b37      	ldr	r3, [pc, #220]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f023 0203 	bic.w	r2, r3, #3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	4934      	ldr	r1, [pc, #208]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	4313      	orrs	r3, r2
 800786e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007870:	f7fc f80e 	bl	8003890 <HAL_GetTick>
 8007874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007876:	e00a      	b.n	800788e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007878:	f7fc f80a 	bl	8003890 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e04f      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800788e:	4b2b      	ldr	r3, [pc, #172]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 020c 	and.w	r2, r3, #12
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	429a      	cmp	r2, r3
 800789e:	d1eb      	bne.n	8007878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078a0:	4b25      	ldr	r3, [pc, #148]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d20c      	bcs.n	80078c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ae:	4b22      	ldr	r3, [pc, #136]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b6:	4b20      	ldr	r3, [pc, #128]	@ (8007938 <HAL_RCC_ClockConfig+0x1b8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d001      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e032      	b.n	800792e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078d4:	4b19      	ldr	r3, [pc, #100]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	4916      	ldr	r1, [pc, #88]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078f2:	4b12      	ldr	r3, [pc, #72]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	490e      	ldr	r1, [pc, #56]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	4313      	orrs	r3, r2
 8007904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007906:	f000 f821 	bl	800794c <HAL_RCC_GetSysClockFreq>
 800790a:	4602      	mov	r2, r0
 800790c:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	091b      	lsrs	r3, r3, #4
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	490a      	ldr	r1, [pc, #40]	@ (8007940 <HAL_RCC_ClockConfig+0x1c0>)
 8007918:	5ccb      	ldrb	r3, [r1, r3]
 800791a:	fa22 f303 	lsr.w	r3, r2, r3
 800791e:	4a09      	ldr	r2, [pc, #36]	@ (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 8007920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007922:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f7fb ff6e 	bl	8003808 <HAL_InitTick>

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40023c00 	.word	0x40023c00
 800793c:	40023800 	.word	0x40023800
 8007940:	08012ae4 	.word	0x08012ae4
 8007944:	20000004 	.word	0x20000004
 8007948:	20000064 	.word	0x20000064

0800794c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800794c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007950:	b094      	sub	sp, #80	@ 0x50
 8007952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	647b      	str	r3, [r7, #68]	@ 0x44
 8007958:	2300      	movs	r3, #0
 800795a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800795c:	2300      	movs	r3, #0
 800795e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007964:	4b79      	ldr	r3, [pc, #484]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 030c 	and.w	r3, r3, #12
 800796c:	2b08      	cmp	r3, #8
 800796e:	d00d      	beq.n	800798c <HAL_RCC_GetSysClockFreq+0x40>
 8007970:	2b08      	cmp	r3, #8
 8007972:	f200 80e1 	bhi.w	8007b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_RCC_GetSysClockFreq+0x34>
 800797a:	2b04      	cmp	r3, #4
 800797c:	d003      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x3a>
 800797e:	e0db      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007980:	4b73      	ldr	r3, [pc, #460]	@ (8007b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007982:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007984:	e0db      	b.n	8007b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007986:	4b73      	ldr	r3, [pc, #460]	@ (8007b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8007988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800798a:	e0d8      	b.n	8007b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800798c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007994:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007996:	4b6d      	ldr	r3, [pc, #436]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d063      	beq.n	8007a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	2200      	movs	r2, #0
 80079aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b6:	2300      	movs	r3, #0
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80079be:	4622      	mov	r2, r4
 80079c0:	462b      	mov	r3, r5
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	0159      	lsls	r1, r3, #5
 80079cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079d0:	0150      	lsls	r0, r2, #5
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4621      	mov	r1, r4
 80079d8:	1a51      	subs	r1, r2, r1
 80079da:	6139      	str	r1, [r7, #16]
 80079dc:	4629      	mov	r1, r5
 80079de:	eb63 0301 	sbc.w	r3, r3, r1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079f0:	4659      	mov	r1, fp
 80079f2:	018b      	lsls	r3, r1, #6
 80079f4:	4651      	mov	r1, sl
 80079f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079fa:	4651      	mov	r1, sl
 80079fc:	018a      	lsls	r2, r1, #6
 80079fe:	4651      	mov	r1, sl
 8007a00:	ebb2 0801 	subs.w	r8, r2, r1
 8007a04:	4659      	mov	r1, fp
 8007a06:	eb63 0901 	sbc.w	r9, r3, r1
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a1e:	4690      	mov	r8, r2
 8007a20:	4699      	mov	r9, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	eb18 0303 	adds.w	r3, r8, r3
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	eb49 0303 	adc.w	r3, r9, r3
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a3e:	4629      	mov	r1, r5
 8007a40:	024b      	lsls	r3, r1, #9
 8007a42:	4621      	mov	r1, r4
 8007a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a48:	4621      	mov	r1, r4
 8007a4a:	024a      	lsls	r2, r1, #9
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a52:	2200      	movs	r2, #0
 8007a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a5c:	f7f8 fc20 	bl	80002a0 <__aeabi_uldivmod>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4613      	mov	r3, r2
 8007a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a68:	e058      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a6a:	4b38      	ldr	r3, [pc, #224]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	099b      	lsrs	r3, r3, #6
 8007a70:	2200      	movs	r2, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	4611      	mov	r1, r2
 8007a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	f04f 0000 	mov.w	r0, #0
 8007a8c:	f04f 0100 	mov.w	r1, #0
 8007a90:	0159      	lsls	r1, r3, #5
 8007a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a96:	0150      	lsls	r0, r2, #5
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007abc:	ebb2 040a 	subs.w	r4, r2, sl
 8007ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	00eb      	lsls	r3, r5, #3
 8007ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ad2:	00e2      	lsls	r2, r4, #3
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	4643      	mov	r3, r8
 8007ada:	18e3      	adds	r3, r4, r3
 8007adc:	603b      	str	r3, [r7, #0]
 8007ade:	464b      	mov	r3, r9
 8007ae0:	eb45 0303 	adc.w	r3, r5, r3
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007af2:	4629      	mov	r1, r5
 8007af4:	028b      	lsls	r3, r1, #10
 8007af6:	4621      	mov	r1, r4
 8007af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007afc:	4621      	mov	r1, r4
 8007afe:	028a      	lsls	r2, r1, #10
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b06:	2200      	movs	r2, #0
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	61fa      	str	r2, [r7, #28]
 8007b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b10:	f7f8 fbc6 	bl	80002a0 <__aeabi_uldivmod>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4613      	mov	r3, r2
 8007b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	3301      	adds	r3, #1
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b36:	e002      	b.n	8007b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b38:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3750      	adds	r7, #80	@ 0x50
 8007b44:	46bd      	mov	sp, r7
 8007b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	00f42400 	.word	0x00f42400
 8007b54:	007a1200 	.word	0x007a1200

08007b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d075      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b8c:	4b91      	ldr	r3, [pc, #580]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b92:	f7fb fe7d 	bl	8003890 <HAL_GetTick>
 8007b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b9a:	f7fb fe79 	bl	8003890 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e189      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bac:	4b8a      	ldr	r3, [pc, #552]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	019a      	lsls	r2, r3, #6
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	071b      	lsls	r3, r3, #28
 8007bd0:	4981      	ldr	r1, [pc, #516]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007be4:	4b7c      	ldr	r3, [pc, #496]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bea:	0f1b      	lsrs	r3, r3, #28
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	019a      	lsls	r2, r3, #6
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	061b      	lsls	r3, r3, #24
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	071b      	lsls	r3, r3, #28
 8007c04:	4974      	ldr	r1, [pc, #464]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c0c:	4b72      	ldr	r3, [pc, #456]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c12:	f023 021f 	bic.w	r2, r3, #31
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	496e      	ldr	r1, [pc, #440]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	019a      	lsls	r2, r3, #6
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	061b      	lsls	r3, r3, #24
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	071b      	lsls	r3, r3, #28
 8007c44:	4964      	ldr	r1, [pc, #400]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c4c:	4b61      	ldr	r3, [pc, #388]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c52:	f7fb fe1d 	bl	8003890 <HAL_GetTick>
 8007c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c58:	e008      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c5a:	f7fb fe19 	bl	8003890 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e129      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f0      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d079      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c90:	4b52      	ldr	r3, [pc, #328]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c96:	f7fb fdfb 	bl	8003890 <HAL_GetTick>
 8007c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c9c:	e008      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c9e:	f7fb fdf7 	bl	8003890 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e107      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cb0:	4b49      	ldr	r3, [pc, #292]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cbc:	d0ef      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d020      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cca:	4b43      	ldr	r3, [pc, #268]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd0:	0f1b      	lsrs	r3, r3, #28
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	019a      	lsls	r2, r3, #6
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	061b      	lsls	r3, r3, #24
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	071b      	lsls	r3, r3, #28
 8007cea:	493b      	ldr	r1, [pc, #236]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007cf2:	4b39      	ldr	r3, [pc, #228]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cf8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	4934      	ldr	r1, [pc, #208]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01e      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d18:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1e:	0e1b      	lsrs	r3, r3, #24
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	019a      	lsls	r2, r3, #6
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	061b      	lsls	r3, r3, #24
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	071b      	lsls	r3, r3, #28
 8007d38:	4927      	ldr	r1, [pc, #156]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d40:	4b25      	ldr	r3, [pc, #148]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	4922      	ldr	r1, [pc, #136]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007d56:	4b21      	ldr	r3, [pc, #132]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d5c:	f7fb fd98 	bl	8003890 <HAL_GetTick>
 8007d60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007d64:	f7fb fd94 	bl	8003890 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e0a4      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d76:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d82:	d1ef      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 808b 	beq.w	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007dae:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a0b      	ldr	r2, [pc, #44]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dba:	f7fb fd69 	bl	8003890 <HAL_GetTick>
 8007dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007dc0:	e010      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007dc2:	f7fb fd65 	bl	8003890 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d909      	bls.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e075      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007dd4:	42470068 	.word	0x42470068
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	42470070 	.word	0x42470070
 8007de0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007de4:	4b38      	ldr	r3, [pc, #224]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0e8      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007df0:	4b36      	ldr	r3, [pc, #216]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007df8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02f      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d028      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e18:	4b2d      	ldr	r3, [pc, #180]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e24:	4a29      	ldr	r2, [pc, #164]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e2a:	4b28      	ldr	r3, [pc, #160]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d114      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e36:	f7fb fd2b 	bl	8003890 <HAL_GetTick>
 8007e3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e3c:	e00a      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e3e:	f7fb fd27 	bl	8003890 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e035      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e54:	4b1d      	ldr	r3, [pc, #116]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0ee      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e6c:	d10d      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e6e:	4b17      	ldr	r3, [pc, #92]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e82:	4912      	ldr	r1, [pc, #72]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	608b      	str	r3, [r1, #8]
 8007e88:	e005      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007e8a:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007e94:	6093      	str	r3, [r2, #8]
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea2:	490a      	ldr	r1, [pc, #40]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007eba:	4b06      	ldr	r3, [pc, #24]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007ebc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40007000 	.word	0x40007000
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	42470e40 	.word	0x42470e40
 8007ed4:	424711e0 	.word	0x424711e0

08007ed8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e025      	b.n	8007f38 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7f9 fc1d 	bl	8001740 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f001 f9f7 	bl	800930c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	f001 fa4c 	bl	80093c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f52:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d101      	bne.n	8007f5e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e021      	b.n	8007fa2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d002      	beq.n	8007f6a <HAL_SDRAM_SendCommand+0x2a>
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d118      	bne.n	8007f9c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fa8c 	bl	8009498 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d104      	bne.n	8007f92 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f90:	e006      	b.n	8007fa0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f9a:	e001      	b.n	8007fa0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d101      	bne.n	8007fc4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e016      	b.n	8007ff2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d10f      	bne.n	8007ff0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fa97 	bl	8009512 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e000      	b.n	8007ff2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e07b      	b.n	8008104 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d108      	bne.n	8008026 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800801c:	d009      	beq.n	8008032 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	61da      	str	r2, [r3, #28]
 8008024:	e005      	b.n	8008032 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7f9 fa23 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008068:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	ea42 0103 	orr.w	r1, r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	f003 0104 	and.w	r1, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d8:	f003 0210 	and.w	r2, r3, #16
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69da      	ldr	r2, [r3, #28]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e01a      	b.n	8008154 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008134:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f9f6 	bl	8001528 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_SPI_Transmit+0x22>
 800817a:	2302      	movs	r3, #2
 800817c:	e12d      	b.n	80083da <HAL_SPI_Transmit+0x27e>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008186:	f7fb fb83 	bl	8003890 <HAL_GetTick>
 800818a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d002      	beq.n	80081a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800819c:	2302      	movs	r3, #2
 800819e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081a0:	e116      	b.n	80083d0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_SPI_Transmit+0x52>
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081b2:	e10d      	b.n	80083d0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2203      	movs	r2, #3
 80081b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081fa:	d10f      	bne.n	800821c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800820a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800821a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d007      	beq.n	800823a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008242:	d14f      	bne.n	80082e4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <HAL_SPI_Transmit+0xf6>
 800824c:	8afb      	ldrh	r3, [r7, #22]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d142      	bne.n	80082d8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	881a      	ldrh	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008262:	1c9a      	adds	r2, r3, #2
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800826c:	b29b      	uxth	r3, r3
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008276:	e02f      	b.n	80082d8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d112      	bne.n	80082ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828a:	881a      	ldrh	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008296:	1c9a      	adds	r2, r3, #2
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80082aa:	e015      	b.n	80082d8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ac:	f7fb faf0 	bl	8003890 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d803      	bhi.n	80082c4 <HAL_SPI_Transmit+0x168>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c2:	d102      	bne.n	80082ca <HAL_SPI_Transmit+0x16e>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80082d6:	e07b      	b.n	80083d0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1ca      	bne.n	8008278 <HAL_SPI_Transmit+0x11c>
 80082e2:	e050      	b.n	8008386 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <HAL_SPI_Transmit+0x196>
 80082ec:	8afb      	ldrh	r3, [r7, #22]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d144      	bne.n	800837c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	330c      	adds	r3, #12
 80082fc:	7812      	ldrb	r2, [r2, #0]
 80082fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008318:	e030      	b.n	800837c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d113      	bne.n	8008350 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800834e:	e015      	b.n	800837c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008350:	f7fb fa9e 	bl	8003890 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d803      	bhi.n	8008368 <HAL_SPI_Transmit+0x20c>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008366:	d102      	bne.n	800836e <HAL_SPI_Transmit+0x212>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800837a:	e029      	b.n	80083d0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1c9      	bne.n	800831a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fbee 	bl	8008b6c <SPI_EndRxTxTransaction>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083a4:	2300      	movs	r3, #0
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e003      	b.n	80083d0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80083d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b088      	sub	sp, #32
 80083e6:	af02      	add	r7, sp, #8
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d002      	beq.n	8008408 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008402:	2302      	movs	r3, #2
 8008404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008406:	e0fb      	b.n	8008600 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008410:	d112      	bne.n	8008438 <HAL_SPI_Receive+0x56>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10e      	bne.n	8008438 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2204      	movs	r2, #4
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 f8ef 	bl	8008612 <HAL_SPI_TransmitReceive>
 8008434:	4603      	mov	r3, r0
 8008436:	e0e8      	b.n	800860a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_SPI_Receive+0x64>
 8008442:	2302      	movs	r3, #2
 8008444:	e0e1      	b.n	800860a <HAL_SPI_Receive+0x228>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800844e:	f7fb fa1f 	bl	8003890 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_SPI_Receive+0x7e>
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008464:	e0cc      	b.n	8008600 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2204      	movs	r2, #4
 800846a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ac:	d10f      	bne.n	80084ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80084cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d007      	beq.n	80084ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d16a      	bne.n	80085ca <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80084f4:	e032      	b.n	800855c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b01      	cmp	r3, #1
 8008502:	d115      	bne.n	8008530 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f103 020c 	add.w	r2, r3, #12
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	7812      	ldrb	r2, [r2, #0]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800852e:	e015      	b.n	800855c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008530:	f7fb f9ae 	bl	8003890 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d803      	bhi.n	8008548 <HAL_SPI_Receive+0x166>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008546:	d102      	bne.n	800854e <HAL_SPI_Receive+0x16c>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800855a:	e051      	b.n	8008600 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1c7      	bne.n	80084f6 <HAL_SPI_Receive+0x114>
 8008566:	e035      	b.n	80085d4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	d113      	bne.n	800859e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008580:	b292      	uxth	r2, r2
 8008582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	1c9a      	adds	r2, r3, #2
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800859c:	e015      	b.n	80085ca <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800859e:	f7fb f977 	bl	8003890 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d803      	bhi.n	80085b6 <HAL_SPI_Receive+0x1d4>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085b4:	d102      	bne.n	80085bc <HAL_SPI_Receive+0x1da>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80085c8:	e01a      	b.n	8008600 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1c9      	bne.n	8008568 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fa61 	bl	8008aa0 <SPI_EndRxTransaction>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	75fb      	strb	r3, [r7, #23]
 80085f6:	e003      	b.n	8008600 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08c      	sub	sp, #48	@ 0x30
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008620:	2301      	movs	r3, #1
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_SPI_TransmitReceive+0x26>
 8008634:	2302      	movs	r3, #2
 8008636:	e198      	b.n	800896a <HAL_SPI_TransmitReceive+0x358>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008640:	f7fb f926 	bl	8003890 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800864c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008656:	887b      	ldrh	r3, [r7, #2]
 8008658:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800865a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800865e:	2b01      	cmp	r3, #1
 8008660:	d00f      	beq.n	8008682 <HAL_SPI_TransmitReceive+0x70>
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008668:	d107      	bne.n	800867a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <HAL_SPI_TransmitReceive+0x68>
 8008672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008676:	2b04      	cmp	r3, #4
 8008678:	d003      	beq.n	8008682 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800867a:	2302      	movs	r3, #2
 800867c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008680:	e16d      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x82>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x82>
 800868e:	887b      	ldrh	r3, [r7, #2]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800869a:	e160      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d003      	beq.n	80086b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2205      	movs	r2, #5
 80086ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	887a      	ldrh	r2, [r7, #2]
 80086c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	887a      	ldrh	r2, [r7, #2]
 80086c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	887a      	ldrh	r2, [r7, #2]
 80086d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b40      	cmp	r3, #64	@ 0x40
 80086f2:	d007      	beq.n	8008704 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800870c:	d17c      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <HAL_SPI_TransmitReceive+0x10a>
 8008716:	8b7b      	ldrh	r3, [r7, #26]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d16a      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008720:	881a      	ldrh	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872c:	1c9a      	adds	r2, r3, #2
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008736:	b29b      	uxth	r3, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	b29a      	uxth	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008740:	e057      	b.n	80087f2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b02      	cmp	r3, #2
 800874e:	d11b      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x176>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d016      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x176>
 800875a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d113      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008764:	881a      	ldrh	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008770:	1c9a      	adds	r2, r3, #2
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b01      	cmp	r3, #1
 8008794:	d119      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x1b8>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879a:	b29b      	uxth	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d014      	beq.n	80087ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087aa:	b292      	uxth	r2, r2
 80087ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b2:	1c9a      	adds	r2, r3, #2
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087c6:	2301      	movs	r3, #1
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087ca:	f7fb f861 	bl	8003890 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d80b      	bhi.n	80087f2 <HAL_SPI_TransmitReceive+0x1e0>
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e0:	d007      	beq.n	80087f2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80087f0:	e0b5      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1a2      	bne.n	8008742 <HAL_SPI_TransmitReceive+0x130>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d19d      	bne.n	8008742 <HAL_SPI_TransmitReceive+0x130>
 8008806:	e080      	b.n	800890a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_SPI_TransmitReceive+0x204>
 8008810:	8b7b      	ldrh	r3, [r7, #26]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d16f      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	330c      	adds	r3, #12
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008832:	b29b      	uxth	r3, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800883c:	e05b      	b.n	80088f6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b02      	cmp	r3, #2
 800884a:	d11c      	bne.n	8008886 <HAL_SPI_TransmitReceive+0x274>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d017      	beq.n	8008886 <HAL_SPI_TransmitReceive+0x274>
 8008856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d114      	bne.n	8008886 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	7812      	ldrb	r2, [r2, #0]
 8008868:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d119      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x2b6>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d014      	beq.n	80088c8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088c4:	2301      	movs	r3, #1
 80088c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088c8:	f7fa ffe2 	bl	8003890 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d803      	bhi.n	80088e0 <HAL_SPI_TransmitReceive+0x2ce>
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088de:	d102      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x2d4>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80088f4:	e033      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d19e      	bne.n	800883e <HAL_SPI_TransmitReceive+0x22c>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d199      	bne.n	800883e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800890a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800890c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f92c 	bl	8008b6c <SPI_EndRxTxTransaction>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008926:	e01a      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008954:	e003      	b.n	800895e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008966:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800896a:	4618      	mov	r0, r3
 800896c:	3730      	adds	r7, #48	@ 0x30
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008980:	b2db      	uxtb	r3, r3
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	4613      	mov	r3, r2
 800899e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089a0:	f7fa ff76 	bl	8003890 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4413      	add	r3, r2
 80089ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089b0:	f7fa ff6e 	bl	8003890 <HAL_GetTick>
 80089b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089b6:	4b39      	ldr	r3, [pc, #228]	@ (8008a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	015b      	lsls	r3, r3, #5
 80089bc:	0d1b      	lsrs	r3, r3, #20
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	fb02 f303 	mul.w	r3, r2, r3
 80089c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089c6:	e054      	b.n	8008a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089ce:	d050      	beq.n	8008a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089d0:	f7fa ff5e 	bl	8003890 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d902      	bls.n	80089e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d13d      	bne.n	8008a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089fe:	d111      	bne.n	8008a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a08:	d004      	beq.n	8008a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a12:	d107      	bne.n	8008a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a2c:	d10f      	bne.n	8008a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e017      	b.n	8008a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	bf0c      	ite	eq
 8008a82:	2301      	moveq	r3, #1
 8008a84:	2300      	movne	r3, #0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d19b      	bne.n	80089c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000004 	.word	0x20000004

08008aa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ab4:	d111      	bne.n	8008ada <SPI_EndRxTransaction+0x3a>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008abe:	d004      	beq.n	8008aca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac8:	d107      	bne.n	8008ada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ad8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ae2:	d12a      	bne.n	8008b3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aec:	d012      	beq.n	8008b14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	2180      	movs	r1, #128	@ 0x80
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff ff49 	bl	8008990 <SPI_WaitFlagStateUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d02d      	beq.n	8008b60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e026      	b.n	8008b62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff ff36 	bl	8008990 <SPI_WaitFlagStateUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01a      	beq.n	8008b60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b2e:	f043 0220 	orr.w	r2, r3, #32
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e013      	b.n	8008b62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2101      	movs	r1, #1
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7ff ff23 	bl	8008990 <SPI_WaitFlagStateUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b54:	f043 0220 	orr.w	r2, r3, #32
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e000      	b.n	8008b62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	2102      	movs	r1, #2
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff ff04 	bl	8008990 <SPI_WaitFlagStateUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b92:	f043 0220 	orr.w	r2, r3, #32
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e032      	b.n	8008c04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c0c <SPI_EndRxTxTransaction+0xa0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8008c10 <SPI_EndRxTxTransaction+0xa4>)
 8008ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba8:	0d5b      	lsrs	r3, r3, #21
 8008baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bbc:	d112      	bne.n	8008be4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff fee1 	bl	8008990 <SPI_WaitFlagStateUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d016      	beq.n	8008c02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e00f      	b.n	8008c04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfa:	2b80      	cmp	r3, #128	@ 0x80
 8008bfc:	d0f2      	beq.n	8008be4 <SPI_EndRxTxTransaction+0x78>
 8008bfe:	e000      	b.n	8008c02 <SPI_EndRxTxTransaction+0x96>
        break;
 8008c00:	bf00      	nop
  }

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000004 	.word	0x20000004
 8008c10:	165e9f81 	.word	0x165e9f81

08008c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e041      	b.n	8008caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7f8 fc92 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f000 fa1e 	bl	8009094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d001      	beq.n	8008ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e046      	b.n	8008d5a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a23      	ldr	r2, [pc, #140]	@ (8008d68 <HAL_TIM_Base_Start+0xb4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d022      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce6:	d01d      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1f      	ldr	r2, [pc, #124]	@ (8008d6c <HAL_TIM_Base_Start+0xb8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d018      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d70 <HAL_TIM_Base_Start+0xbc>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1c      	ldr	r2, [pc, #112]	@ (8008d74 <HAL_TIM_Base_Start+0xc0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00e      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008d78 <HAL_TIM_Base_Start+0xc4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d009      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a19      	ldr	r2, [pc, #100]	@ (8008d7c <HAL_TIM_Base_Start+0xc8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <HAL_TIM_Base_Start+0x70>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a18      	ldr	r2, [pc, #96]	@ (8008d80 <HAL_TIM_Base_Start+0xcc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d111      	bne.n	8008d48 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b06      	cmp	r3, #6
 8008d34:	d010      	beq.n	8008d58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0201 	orr.w	r2, r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d46:	e007      	b.n	8008d58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40001800 	.word	0x40001800

08008d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d001      	beq.n	8008d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e04e      	b.n	8008e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a23      	ldr	r2, [pc, #140]	@ (8008e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d022      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc6:	d01d      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8008e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d018      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d013      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00e      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a1b      	ldr	r2, [pc, #108]	@ (8008e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d009      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a19      	ldr	r2, [pc, #100]	@ (8008e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d004      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x80>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a18      	ldr	r2, [pc, #96]	@ (8008e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d111      	bne.n	8008e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b06      	cmp	r3, #6
 8008e14:	d010      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e26:	e007      	b.n	8008e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0201 	orr.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40001800 	.word	0x40001800

08008e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d020      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0202 	mvn.w	r2, #2
 8008e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8d2 	bl	8009058 <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f8c4 	bl	8009044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f8d5 	bl	800906c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d020      	beq.n	8008f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01b      	beq.n	8008f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0204 	mvn.w	r2, #4
 8008ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8ac 	bl	8009058 <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f89e 	bl	8009044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f8af 	bl	800906c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d020      	beq.n	8008f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0208 	mvn.w	r2, #8
 8008f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2204      	movs	r2, #4
 8008f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f886 	bl	8009058 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f878 	bl	8009044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f889 	bl	800906c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d020      	beq.n	8008fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0210 	mvn.w	r2, #16
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2208      	movs	r2, #8
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f860 	bl	8009058 <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f852 	bl	8009044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f863 	bl	800906c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00c      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0201 	mvn.w	r2, #1
 8008fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f8 f8cf 	bl	800116e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00c      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f982 	bl	80092f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f834 	bl	8009080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0220 	mvn.w	r2, #32
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f954 	bl	80092e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a46      	ldr	r2, [pc, #280]	@ (80091c0 <TIM_Base_SetConfig+0x12c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d013      	beq.n	80090d4 <TIM_Base_SetConfig+0x40>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b2:	d00f      	beq.n	80090d4 <TIM_Base_SetConfig+0x40>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a43      	ldr	r2, [pc, #268]	@ (80091c4 <TIM_Base_SetConfig+0x130>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00b      	beq.n	80090d4 <TIM_Base_SetConfig+0x40>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a42      	ldr	r2, [pc, #264]	@ (80091c8 <TIM_Base_SetConfig+0x134>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <TIM_Base_SetConfig+0x40>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a41      	ldr	r2, [pc, #260]	@ (80091cc <TIM_Base_SetConfig+0x138>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_Base_SetConfig+0x40>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a40      	ldr	r2, [pc, #256]	@ (80091d0 <TIM_Base_SetConfig+0x13c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d108      	bne.n	80090e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a35      	ldr	r2, [pc, #212]	@ (80091c0 <TIM_Base_SetConfig+0x12c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d02b      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f4:	d027      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a32      	ldr	r2, [pc, #200]	@ (80091c4 <TIM_Base_SetConfig+0x130>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d023      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a31      	ldr	r2, [pc, #196]	@ (80091c8 <TIM_Base_SetConfig+0x134>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01f      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a30      	ldr	r2, [pc, #192]	@ (80091cc <TIM_Base_SetConfig+0x138>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d01b      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a2f      	ldr	r2, [pc, #188]	@ (80091d0 <TIM_Base_SetConfig+0x13c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d017      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a2e      	ldr	r2, [pc, #184]	@ (80091d4 <TIM_Base_SetConfig+0x140>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d013      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a2d      	ldr	r2, [pc, #180]	@ (80091d8 <TIM_Base_SetConfig+0x144>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00f      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a2c      	ldr	r2, [pc, #176]	@ (80091dc <TIM_Base_SetConfig+0x148>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00b      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a2b      	ldr	r2, [pc, #172]	@ (80091e0 <TIM_Base_SetConfig+0x14c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d007      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a2a      	ldr	r2, [pc, #168]	@ (80091e4 <TIM_Base_SetConfig+0x150>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d003      	beq.n	8009146 <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a29      	ldr	r2, [pc, #164]	@ (80091e8 <TIM_Base_SetConfig+0x154>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d108      	bne.n	8009158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800914c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a10      	ldr	r2, [pc, #64]	@ (80091c0 <TIM_Base_SetConfig+0x12c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d003      	beq.n	800918c <TIM_Base_SetConfig+0xf8>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a12      	ldr	r2, [pc, #72]	@ (80091d0 <TIM_Base_SetConfig+0x13c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d103      	bne.n	8009194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d105      	bne.n	80091b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	611a      	str	r2, [r3, #16]
  }
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40010000 	.word	0x40010000
 80091c4:	40000400 	.word	0x40000400
 80091c8:	40000800 	.word	0x40000800
 80091cc:	40000c00 	.word	0x40000c00
 80091d0:	40010400 	.word	0x40010400
 80091d4:	40014000 	.word	0x40014000
 80091d8:	40014400 	.word	0x40014400
 80091dc:	40014800 	.word	0x40014800
 80091e0:	40001800 	.word	0x40001800
 80091e4:	40001c00 	.word	0x40001c00
 80091e8:	40002000 	.word	0x40002000

080091ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009200:	2302      	movs	r3, #2
 8009202:	e05a      	b.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a21      	ldr	r2, [pc, #132]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d022      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009250:	d01d      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1d      	ldr	r2, [pc, #116]	@ (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d018      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1b      	ldr	r2, [pc, #108]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d013      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1a      	ldr	r2, [pc, #104]	@ (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00e      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a18      	ldr	r2, [pc, #96]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d009      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a17      	ldr	r2, [pc, #92]	@ (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d004      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d10c      	bne.n	80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4313      	orrs	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40010000 	.word	0x40010000
 80092cc:	40000400 	.word	0x40000400
 80092d0:	40000800 	.word	0x40000800
 80092d4:	40000c00 	.word	0x40000c00
 80092d8:	40010400 	.word	0x40010400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40001800 	.word	0x40001800

080092e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d123      	bne.n	8009366 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009326:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	6851      	ldr	r1, [r2, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	4311      	orrs	r1, r2
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68d2      	ldr	r2, [r2, #12]
 8009338:	4311      	orrs	r1, r2
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	6912      	ldr	r2, [r2, #16]
 800933e:	4311      	orrs	r1, r2
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	6952      	ldr	r2, [r2, #20]
 8009344:	4311      	orrs	r1, r2
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	6992      	ldr	r2, [r2, #24]
 800934a:	4311      	orrs	r1, r2
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	69d2      	ldr	r2, [r2, #28]
 8009350:	4311      	orrs	r1, r2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	6a12      	ldr	r2, [r2, #32]
 8009356:	4311      	orrs	r1, r2
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800935c:	430a      	orrs	r2, r1
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e028      	b.n	80093b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	69d9      	ldr	r1, [r3, #28]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	4319      	orrs	r1, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	430b      	orrs	r3, r1
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800938c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	6851      	ldr	r1, [r2, #4]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	6892      	ldr	r2, [r2, #8]
 8009398:	4311      	orrs	r1, r2
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	68d2      	ldr	r2, [r2, #12]
 800939e:	4311      	orrs	r1, r2
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	6912      	ldr	r2, [r2, #16]
 80093a4:	4311      	orrs	r1, r2
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	6952      	ldr	r2, [r2, #20]
 80093aa:	4311      	orrs	r1, r2
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	6992      	ldr	r2, [r2, #24]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d128      	bne.n	800942a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	1e59      	subs	r1, r3, #1
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	4319      	orrs	r1, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	4319      	orrs	r1, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	031b      	lsls	r3, r3, #12
 8009402:	4319      	orrs	r1, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	3b01      	subs	r3, #1
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	4319      	orrs	r1, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	3b01      	subs	r3, #1
 8009414:	051b      	lsls	r3, r3, #20
 8009416:	4319      	orrs	r1, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	3b01      	subs	r3, #1
 800941e:	061b      	lsls	r3, r3, #24
 8009420:	430b      	orrs	r3, r1
 8009422:	431a      	orrs	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	e02f      	b.n	800948a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009432:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	68d2      	ldr	r2, [r2, #12]
 800943a:	3a01      	subs	r2, #1
 800943c:	0311      	lsls	r1, r2, #12
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	6952      	ldr	r2, [r2, #20]
 8009442:	3a01      	subs	r2, #1
 8009444:	0512      	lsls	r2, r2, #20
 8009446:	430a      	orrs	r2, r1
 8009448:	431a      	orrs	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	1e59      	subs	r1, r3, #1
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	3b01      	subs	r3, #1
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	4319      	orrs	r1, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	4319      	orrs	r1, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	3b01      	subs	r3, #1
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	4319      	orrs	r1, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	3b01      	subs	r3, #1
 8009480:	061b      	lsls	r3, r3, #24
 8009482:	430b      	orrs	r3, r1
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	0d9b      	lsrs	r3, r3, #22
 80094ae:	059b      	lsls	r3, r3, #22
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	6811      	ldr	r1, [r2, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	6852      	ldr	r2, [r2, #4]
 80094b8:	4311      	orrs	r1, r2
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	6892      	ldr	r2, [r2, #8]
 80094be:	3a01      	subs	r2, #1
 80094c0:	0152      	lsls	r2, r2, #5
 80094c2:	4311      	orrs	r1, r2
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	68d2      	ldr	r2, [r2, #12]
 80094c8:	0252      	lsls	r2, r2, #9
 80094ca:	430a      	orrs	r2, r1
 80094cc:	431a      	orrs	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80094d2:	f7fa f9dd 	bl	8003890 <HAL_GetTick>
 80094d6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80094d8:	e010      	b.n	80094fc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094e0:	d00c      	beq.n	80094fc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <FMC_SDRAM_SendCommand+0x60>
 80094e8:	f7fa f9d2 	bl	8003890 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d201      	bcs.n	80094fc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e006      	b.n	800950a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b20      	cmp	r3, #32
 8009506:	d0e8      	beq.n	80094da <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009524:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	0052      	lsls	r2, r2, #1
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009540:	b084      	sub	sp, #16
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	f107 001c 	add.w	r0, r7, #28
 800954e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009552:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009556:	2b01      	cmp	r3, #1
 8009558:	d123      	bne.n	80095a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800956e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009582:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9dc 	bl	8009954 <USB_CoreReset>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e01b      	b.n	80095da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9d0 	bl	8009954 <USB_CoreReset>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80095cc:	e005      	b.n	80095da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095da:	7fbb      	ldrb	r3, [r7, #30]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d10b      	bne.n	80095f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f043 0206 	orr.w	r2, r3, #6
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f043 0220 	orr.w	r2, r3, #32
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009604:	b004      	add	sp, #16
 8009606:	4770      	bx	lr

08009608 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f043 0201 	orr.w	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f023 0201 	bic.w	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d115      	bne.n	800969a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800967a:	200a      	movs	r0, #10
 800967c:	f7fa f914 	bl	80038a8 <HAL_Delay>
      ms += 10U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	330a      	adds	r3, #10
 8009684:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f956 	bl	8009938 <USB_GetMode>
 800968c:	4603      	mov	r3, r0
 800968e:	2b01      	cmp	r3, #1
 8009690:	d01e      	beq.n	80096d0 <USB_SetCurrentMode+0x84>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2bc7      	cmp	r3, #199	@ 0xc7
 8009696:	d9f0      	bls.n	800967a <USB_SetCurrentMode+0x2e>
 8009698:	e01a      	b.n	80096d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d115      	bne.n	80096cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096ac:	200a      	movs	r0, #10
 80096ae:	f7fa f8fb 	bl	80038a8 <HAL_Delay>
      ms += 10U;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	330a      	adds	r3, #10
 80096b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f93d 	bl	8009938 <USB_GetMode>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <USB_SetCurrentMode+0x84>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80096c8:	d9f0      	bls.n	80096ac <USB_SetCurrentMode+0x60>
 80096ca:	e001      	b.n	80096d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e005      	b.n	80096dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80096d4:	d101      	bne.n	80096da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e000      	b.n	80096dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3301      	adds	r3, #1
 80096f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096fe:	d901      	bls.n	8009704 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e01b      	b.n	800973c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	daf2      	bge.n	80096f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	019b      	lsls	r3, r3, #6
 8009714:	f043 0220 	orr.w	r2, r3, #32
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009728:	d901      	bls.n	800972e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e006      	b.n	800973c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b20      	cmp	r3, #32
 8009738:	d0f0      	beq.n	800971c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009760:	d901      	bls.n	8009766 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e018      	b.n	8009798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	daf2      	bge.n	8009754 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2210      	movs	r2, #16
 8009776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009784:	d901      	bls.n	800978a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e006      	b.n	8009798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b10      	cmp	r3, #16
 8009794:	d0f0      	beq.n	8009778 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b089      	sub	sp, #36	@ 0x24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4611      	mov	r1, r2
 80097b0:	461a      	mov	r2, r3
 80097b2:	460b      	mov	r3, r1
 80097b4:	71fb      	strb	r3, [r7, #7]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80097c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d123      	bne.n	8009812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80097ca:	88bb      	ldrh	r3, [r7, #4]
 80097cc:	3303      	adds	r3, #3
 80097ce:	089b      	lsrs	r3, r3, #2
 80097d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	e018      	b.n	800980a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	031a      	lsls	r2, r3, #12
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097e4:	461a      	mov	r2, r3
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	3301      	adds	r3, #1
 80097f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	3301      	adds	r3, #1
 80097f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	3301      	adds	r3, #1
 8009802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	3301      	adds	r3, #1
 8009808:	61bb      	str	r3, [r7, #24]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	429a      	cmp	r2, r3
 8009810:	d3e2      	bcc.n	80097d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3724      	adds	r7, #36	@ 0x24
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009820:	b480      	push	{r7}
 8009822:	b08b      	sub	sp, #44	@ 0x2c
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	089b      	lsrs	r3, r3, #2
 800983a:	b29b      	uxth	r3, r3
 800983c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	623b      	str	r3, [r7, #32]
 800984a:	e014      	b.n	8009876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	601a      	str	r2, [r3, #0]
    pDest++;
 8009858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985a:	3301      	adds	r3, #1
 800985c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	3301      	adds	r3, #1
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009866:	3301      	adds	r3, #1
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	3301      	adds	r3, #1
 800986e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	3301      	adds	r3, #1
 8009874:	623b      	str	r3, [r7, #32]
 8009876:	6a3a      	ldr	r2, [r7, #32]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	429a      	cmp	r2, r3
 800987c:	d3e6      	bcc.n	800984c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800987e:	8bfb      	ldrh	r3, [r7, #30]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01e      	beq.n	80098c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800988e:	461a      	mov	r2, r3
 8009890:	f107 0310 	add.w	r3, r7, #16
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	fa22 f303 	lsr.w	r3, r2, r3
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	701a      	strb	r2, [r3, #0]
      i++;
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	3301      	adds	r3, #1
 80098ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	3301      	adds	r3, #1
 80098b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80098b6:	8bfb      	ldrh	r3, [r7, #30]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098bc:	8bfb      	ldrh	r3, [r7, #30]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1ea      	bne.n	8009898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	372c      	adds	r7, #44	@ 0x2c
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4013      	ands	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800992a:	68bb      	ldr	r3, [r7, #8]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	f003 0301 	and.w	r3, r3, #1
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3301      	adds	r3, #1
 8009964:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800996c:	d901      	bls.n	8009972 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e01b      	b.n	80099aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	daf2      	bge.n	8009960 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f043 0201 	orr.w	r2, r3, #1
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009996:	d901      	bls.n	800999c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e006      	b.n	80099aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d0f0      	beq.n	800998a <USB_CoreReset+0x36>

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099b8:	b084      	sub	sp, #16
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80099c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099d8:	461a      	mov	r2, r3
 80099da:	2300      	movs	r3, #0
 80099dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d119      	bne.n	8009a42 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d10a      	bne.n	8009a2c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a24:	f043 0304 	orr.w	r3, r3, #4
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	e014      	b.n	8009a56 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a3a:	f023 0304 	bic.w	r3, r3, #4
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e009      	b.n	8009a56 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a50:	f023 0304 	bic.w	r3, r3, #4
 8009a54:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a56:	2110      	movs	r1, #16
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff fe43 	bl	80096e4 <USB_FlushTxFifo>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fe6d 	bl	8009748 <USB_FlushRxFifo>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	e015      	b.n	8009aaa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a90:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	613b      	str	r3, [r7, #16]
 8009aaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009aae:	461a      	mov	r2, r3
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d3e3      	bcc.n	8009a7e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a18      	ldr	r2, [pc, #96]	@ (8009b28 <USB_HostInit+0x170>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d10b      	bne.n	8009ae4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a15      	ldr	r2, [pc, #84]	@ (8009b2c <USB_HostInit+0x174>)
 8009ad8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a14      	ldr	r2, [pc, #80]	@ (8009b30 <USB_HostInit+0x178>)
 8009ade:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009ae2:	e009      	b.n	8009af8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2280      	movs	r2, #128	@ 0x80
 8009ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a11      	ldr	r2, [pc, #68]	@ (8009b34 <USB_HostInit+0x17c>)
 8009aee:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a11      	ldr	r2, [pc, #68]	@ (8009b38 <USB_HostInit+0x180>)
 8009af4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009af8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	f043 0210 	orr.w	r2, r3, #16
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <USB_HostInit+0x184>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b24:	b004      	add	sp, #16
 8009b26:	4770      	bx	lr
 8009b28:	40040000 	.word	0x40040000
 8009b2c:	01000200 	.word	0x01000200
 8009b30:	00e00300 	.word	0x00e00300
 8009b34:	00600080 	.word	0x00600080
 8009b38:	004000e0 	.word	0x004000e0
 8009b3c:	a3200008 	.word	0xa3200008

08009b40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d107      	bne.n	8009b92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009b8e:	6053      	str	r3, [r2, #4]
 8009b90:	e00c      	b.n	8009bac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d107      	bne.n	8009ba8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009ba4:	6053      	str	r3, [r2, #4]
 8009ba6:	e001      	b.n	8009bac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009bda:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009be8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009bea:	2064      	movs	r0, #100	@ 0x64
 8009bec:	f7f9 fe5c 	bl	80038a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bfc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009bfe:	200a      	movs	r0, #10
 8009c00:	f7f9 fe52 	bl	80038a8 <HAL_Delay>

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009c32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <USB_DriveVbus+0x44>
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d106      	bne.n	8009c52 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c50:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5c:	d109      	bne.n	8009c72 <USB_DriveVbus+0x64>
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c70:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	0c5b      	lsrs	r3, r3, #17
 8009c9e:	f003 0303 	and.w	r3, r3, #3
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	b29b      	uxth	r3, r3
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4603      	mov	r3, r0
 8009ce0:	70fb      	strb	r3, [r7, #3]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70bb      	strb	r3, [r7, #2]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009d06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d87c      	bhi.n	8009e08 <USB_HC_Init+0x138>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <USB_HC_Init+0x44>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d25 	.word	0x08009d25
 8009d18:	08009dcb 	.word	0x08009dcb
 8009d1c:	08009d25 	.word	0x08009d25
 8009d20:	08009d8d 	.word	0x08009d8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d30:	461a      	mov	r2, r3
 8009d32:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009d36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009d38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da10      	bge.n	8009d62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	78fa      	ldrb	r2, [r7, #3]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d5e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009d60:	e055      	b.n	8009e0e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a6f      	ldr	r2, [pc, #444]	@ (8009f24 <USB_HC_Init+0x254>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d151      	bne.n	8009e0e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d88:	60d3      	str	r3, [r2, #12]
      break;
 8009d8a:	e040      	b.n	8009e0e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009d9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009da0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da34      	bge.n	8009e12 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	78fa      	ldrb	r2, [r7, #3]
 8009db8:	0151      	lsls	r1, r2, #5
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009dc8:	e023      	b.n	8009e12 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f240 2325 	movw	r3, #549	@ 0x225
 8009ddc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009dde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da17      	bge.n	8009e16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009de6:	78fb      	ldrb	r3, [r7, #3]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	0151      	lsls	r1, r2, #5
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	440a      	add	r2, r1
 8009dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e00:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009e04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009e06:	e006      	b.n	8009e16 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	77fb      	strb	r3, [r7, #31]
      break;
 8009e0c:	e004      	b.n	8009e18 <USB_HC_Init+0x148>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <USB_HC_Init+0x148>
      break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <USB_HC_Init+0x148>
      break;
 8009e16:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e24:	461a      	mov	r2, r3
 8009e26:	2300      	movs	r3, #0
 8009e28:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	78fa      	ldrb	r2, [r7, #3]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e44:	f043 0302 	orr.w	r3, r3, #2
 8009e48:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	2101      	movs	r1, #1
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	6939      	ldr	r1, [r7, #16]
 8009e60:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009e64:	4313      	orrs	r3, r2
 8009e66:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009e74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da03      	bge.n	8009e84 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	e001      	b.n	8009e88 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fef9 	bl	8009c80 <USB_GetHostSpeed>
 8009e8e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009e90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d106      	bne.n	8009ea6 <USB_HC_Init+0x1d6>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d003      	beq.n	8009ea6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009e9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e001      	b.n	8009eaa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009eaa:	787b      	ldrb	r3, [r7, #1]
 8009eac:	059b      	lsls	r3, r3, #22
 8009eae:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009eb2:	78bb      	ldrb	r3, [r7, #2]
 8009eb4:	02db      	lsls	r3, r3, #11
 8009eb6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009eba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ec0:	049b      	lsls	r3, r3, #18
 8009ec2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ec6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009ec8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ece:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	0151      	lsls	r1, r2, #5
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	440a      	add	r2, r1
 8009ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009ee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ee8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009eea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d003      	beq.n	8009efa <USB_HC_Init+0x22a>
 8009ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d10f      	bne.n	8009f1a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	78fa      	ldrb	r2, [r7, #3]
 8009f0a:	0151      	lsls	r1, r2, #5
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	440a      	add	r2, r1
 8009f10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f18:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	40040000 	.word	0x40040000

08009f28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08c      	sub	sp, #48	@ 0x30
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009f40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f44:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a5d      	ldr	r2, [pc, #372]	@ (800a0c0 <USB_HC_StartXfer+0x198>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d12f      	bne.n	8009fae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d11c      	bne.n	8009f8e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	7c9b      	ldrb	r3, [r3, #18]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <USB_HC_StartXfer+0x3c>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	7c9b      	ldrb	r3, [r3, #18]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d124      	bne.n	8009fae <USB_HC_StartXfer+0x86>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	799b      	ldrb	r3, [r3, #6]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d120      	bne.n	8009fae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	0151      	lsls	r1, r2, #5
 8009f7e:	6a3a      	ldr	r2, [r7, #32]
 8009f80:	440a      	add	r2, r1
 8009f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f8a:	60d3      	str	r3, [r2, #12]
 8009f8c:	e00f      	b.n	8009fae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	791b      	ldrb	r3, [r3, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10b      	bne.n	8009fae <USB_HC_StartXfer+0x86>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	795b      	ldrb	r3, [r3, #5]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d107      	bne.n	8009fae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fb6b 	bl	800a680 <USB_DoPing>
        return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e232      	b.n	800a414 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	799b      	ldrb	r3, [r3, #6]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d158      	bne.n	800a068 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	78db      	ldrb	r3, [r3, #3]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	8a92      	ldrh	r2, [r2, #20]
 8009fc8:	fb03 f202 	mul.w	r2, r3, r2
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	61da      	str	r2, [r3, #28]
 8009fd0:	e07c      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	7c9b      	ldrb	r3, [r3, #18]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d130      	bne.n	800a03c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	2bbc      	cmp	r3, #188	@ 0xbc
 8009fe0:	d918      	bls.n	800a014 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	8a9b      	ldrh	r3, [r3, #20]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d003      	beq.n	800a004 <USB_HC_StartXfer+0xdc>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	2b02      	cmp	r3, #2
 800a002:	d103      	bne.n	800a00c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2202      	movs	r2, #2
 800a008:	60da      	str	r2, [r3, #12]
 800a00a:	e05f      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2201      	movs	r2, #1
 800a010:	60da      	str	r2, [r3, #12]
 800a012:	e05b      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	6a1a      	ldr	r2, [r3, #32]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d007      	beq.n	800a034 <USB_HC_StartXfer+0x10c>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d003      	beq.n	800a034 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2204      	movs	r2, #4
 800a030:	60da      	str	r2, [r3, #12]
 800a032:	e04b      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2203      	movs	r2, #3
 800a038:	60da      	str	r2, [r3, #12]
 800a03a:	e047      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d10d      	bne.n	800a05e <USB_HC_StartXfer+0x136>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	8a92      	ldrh	r2, [r2, #20]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d907      	bls.n	800a05e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a04e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	8a92      	ldrh	r2, [r2, #20]
 800a054:	fb03 f202 	mul.w	r2, r3, r2
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	61da      	str	r2, [r3, #28]
 800a05c:	e036      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6a1a      	ldr	r2, [r3, #32]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	61da      	str	r2, [r3, #28]
 800a066:	e031      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d018      	beq.n	800a0a2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	8a92      	ldrh	r2, [r2, #20]
 800a078:	4413      	add	r3, r2
 800a07a:	3b01      	subs	r3, #1
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	8a92      	ldrh	r2, [r2, #20]
 800a080:	fbb3 f3f2 	udiv	r3, r3, r2
 800a084:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a086:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a088:	8b7b      	ldrh	r3, [r7, #26]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d90b      	bls.n	800a0a6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a08e:	8b7b      	ldrh	r3, [r7, #26]
 800a090:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	8a92      	ldrh	r2, [r2, #20]
 800a098:	fb03 f202 	mul.w	r2, r3, r2
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	61da      	str	r2, [r3, #28]
 800a0a0:	e001      	b.n	800a0a6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	78db      	ldrb	r3, [r3, #3]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	8a92      	ldrh	r2, [r2, #20]
 800a0b4:	fb03 f202 	mul.w	r2, r3, r2
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	61da      	str	r2, [r3, #28]
 800a0bc:	e006      	b.n	800a0cc <USB_HC_StartXfer+0x1a4>
 800a0be:	bf00      	nop
 800a0c0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6a1a      	ldr	r2, [r3, #32]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a0d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0d6:	04d9      	lsls	r1, r3, #19
 800a0d8:	4ba3      	ldr	r3, [pc, #652]	@ (800a368 <USB_HC_StartXfer+0x440>)
 800a0da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	7d9b      	ldrb	r3, [r3, #22]
 800a0e2:	075b      	lsls	r3, r3, #29
 800a0e4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0e8:	69f9      	ldr	r1, [r7, #28]
 800a0ea:	0148      	lsls	r0, r1, #5
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	4401      	add	r1, r0
 800a0f0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a0f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d009      	beq.n	800a112 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	6999      	ldr	r1, [r3, #24]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a10e:	460a      	mov	r2, r1
 800a110:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bf0c      	ite	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	2300      	movne	r3, #0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	4413      	add	r3, r2
 800a132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a144:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a148:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	4413      	add	r3, r2
 800a152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	7e7b      	ldrb	r3, [r7, #25]
 800a15a:	075b      	lsls	r3, r3, #29
 800a15c:	69f9      	ldr	r1, [r7, #28]
 800a15e:	0148      	lsls	r0, r1, #5
 800a160:	6a39      	ldr	r1, [r7, #32]
 800a162:	4401      	add	r1, r0
 800a164:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a168:	4313      	orrs	r3, r2
 800a16a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	799b      	ldrb	r3, [r3, #6]
 800a170:	2b01      	cmp	r3, #1
 800a172:	f040 80c3 	bne.w	800a2fc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	7c5b      	ldrb	r3, [r3, #17]
 800a17a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a180:	4313      	orrs	r3, r2
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	6a3a      	ldr	r2, [r7, #32]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a18e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a192:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	69fa      	ldr	r2, [r7, #28]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	6a3a      	ldr	r2, [r7, #32]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a1b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	79db      	ldrb	r3, [r3, #7]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d123      	bne.n	800a204 <USB_HC_StartXfer+0x2dc>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	78db      	ldrb	r3, [r3, #3]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d11f      	bne.n	800a204 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1e2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a202:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	7c9b      	ldrb	r3, [r3, #18]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d003      	beq.n	800a214 <USB_HC_StartXfer+0x2ec>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	7c9b      	ldrb	r3, [r3, #18]
 800a210:	2b03      	cmp	r3, #3
 800a212:	d117      	bne.n	800a244 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d113      	bne.n	800a244 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	78db      	ldrb	r3, [r3, #3]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d10f      	bne.n	800a244 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	6a3a      	ldr	r2, [r7, #32]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a23e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a242:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	7c9b      	ldrb	r3, [r3, #18]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d162      	bne.n	800a312 <USB_HC_StartXfer+0x3ea>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	78db      	ldrb	r3, [r3, #3]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d15e      	bne.n	800a312 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	3b01      	subs	r3, #1
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d858      	bhi.n	800a310 <USB_HC_StartXfer+0x3e8>
 800a25e:	a201      	add	r2, pc, #4	@ (adr r2, 800a264 <USB_HC_StartXfer+0x33c>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a297 	.word	0x0800a297
 800a26c:	0800a2b9 	.word	0x0800a2b9
 800a270:	0800a2db 	.word	0x0800a2db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	6a3a      	ldr	r2, [r7, #32]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a292:	6053      	str	r3, [r2, #4]
          break;
 800a294:	e03d      	b.n	800a312 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	69fa      	ldr	r2, [r7, #28]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	6a3a      	ldr	r2, [r7, #32]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2b0:	f043 030e 	orr.w	r3, r3, #14
 800a2b4:	6053      	str	r3, [r2, #4]
          break;
 800a2b6:	e02c      	b.n	800a312 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	6a3a      	ldr	r2, [r7, #32]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2d6:	6053      	str	r3, [r2, #4]
          break;
 800a2d8:	e01b      	b.n	800a312 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	6a3a      	ldr	r2, [r7, #32]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2f8:	6053      	str	r3, [r2, #4]
          break;
 800a2fa:	e00a      	b.n	800a312 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	4413      	add	r3, r2
 800a304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a308:	461a      	mov	r2, r3
 800a30a:	2300      	movs	r3, #0
 800a30c:	6053      	str	r3, [r2, #4]
 800a30e:	e000      	b.n	800a312 <USB_HC_StartXfer+0x3ea>
          break;
 800a310:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a328:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	78db      	ldrb	r3, [r3, #3]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a338:	613b      	str	r3, [r7, #16]
 800a33a:	e003      	b.n	800a344 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a342:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a34a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	4413      	add	r3, r2
 800a354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a358:	461a      	mov	r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	e055      	b.n	800a414 <USB_HC_StartXfer+0x4ec>
 800a368:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	78db      	ldrb	r3, [r3, #3]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d14e      	bne.n	800a412 <USB_HC_StartXfer+0x4ea>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d04a      	beq.n	800a412 <USB_HC_StartXfer+0x4ea>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	79db      	ldrb	r3, [r3, #7]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d146      	bne.n	800a412 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	7c9b      	ldrb	r3, [r3, #18]
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d831      	bhi.n	800a3f0 <USB_HC_StartXfer+0x4c8>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <USB_HC_StartXfer+0x46c>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3a5 	.word	0x0800a3a5
 800a398:	0800a3c9 	.word	0x0800a3c9
 800a39c:	0800a3a5 	.word	0x0800a3a5
 800a3a0:	0800a3c9 	.word	0x0800a3c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	3303      	adds	r3, #3
 800a3aa:	089b      	lsrs	r3, r3, #2
 800a3ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3ae:	8afa      	ldrh	r2, [r7, #22]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d91c      	bls.n	800a3f4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	f043 0220 	orr.w	r2, r3, #32
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3c6:	e015      	b.n	800a3f4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	3303      	adds	r3, #3
 800a3ce:	089b      	lsrs	r3, r3, #2
 800a3d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3d2:	8afa      	ldrh	r2, [r7, #22]
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d90a      	bls.n	800a3f8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3ee:	e003      	b.n	800a3f8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a3f0:	bf00      	nop
 800a3f2:	e002      	b.n	800a3fa <USB_HC_StartXfer+0x4d2>
        break;
 800a3f4:	bf00      	nop
 800a3f6:	e000      	b.n	800a3fa <USB_HC_StartXfer+0x4d2>
        break;
 800a3f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6999      	ldr	r1, [r3, #24]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	785a      	ldrb	r2, [r3, #1]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	b29b      	uxth	r3, r3
 800a408:	2000      	movs	r0, #0
 800a40a:	9000      	str	r0, [sp, #0]
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff f9c9 	bl	80097a4 <USB_WritePacket>
  }

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3728      	adds	r7, #40	@ 0x28
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	b29b      	uxth	r3, r3
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a43e:	b480      	push	{r7}
 800a440:	b089      	sub	sp, #36	@ 0x24
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	0c9b      	lsrs	r3, r3, #18
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	4413      	add	r3, r2
 800a474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	0fdb      	lsrs	r3, r3, #31
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	0fdb      	lsrs	r3, r3, #31
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f003 0320 	and.w	r3, r3, #32
 800a4a0:	2b20      	cmp	r3, #32
 800a4a2:	d10d      	bne.n	800a4c0 <USB_HC_Halt+0x82>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <USB_HC_Halt+0x82>
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d002      	beq.n	800a4bc <USB_HC_Halt+0x7e>
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d101      	bne.n	800a4c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e0d8      	b.n	800a672 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <USB_HC_Halt+0x8e>
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d173      	bne.n	800a5b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	0151      	lsls	r1, r2, #5
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	440a      	add	r2, r1
 800a4e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d14a      	bne.n	800a58e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d133      	bne.n	800a56c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	0151      	lsls	r1, r2, #5
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	440a      	add	r2, r1
 800a51a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a51e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a522:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	0151      	lsls	r1, r2, #5
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	440a      	add	r2, r1
 800a53a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a53e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a542:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3301      	adds	r3, #1
 800a548:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a550:	d82e      	bhi.n	800a5b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a568:	d0ec      	beq.n	800a544 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a56a:	e081      	b.n	800a670 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	0151      	lsls	r1, r2, #5
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	440a      	add	r2, r1
 800a582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a58a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a58c:	e070      	b.n	800a670 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5ae:	e05f      	b.n	800a670 <USB_HC_Halt+0x232>
            break;
 800a5b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5b2:	e05d      	b.n	800a670 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d133      	bne.n	800a64c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a602:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a61e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a622:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	3301      	adds	r3, #1
 800a628:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a630:	d81d      	bhi.n	800a66e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a648:	d0ec      	beq.n	800a624 <USB_HC_Halt+0x1e6>
 800a64a:	e011      	b.n	800a670 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	4413      	add	r3, r2
 800a654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	0151      	lsls	r1, r2, #5
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	440a      	add	r2, r1
 800a662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a666:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	e000      	b.n	800a670 <USB_HC_Halt+0x232>
          break;
 800a66e:	bf00      	nop
    }
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3724      	adds	r7, #36	@ 0x24
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a694:	2301      	movs	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	04da      	lsls	r2, r3, #19
 800a69c:	4b15      	ldr	r3, [pc, #84]	@ (800a6f4 <USB_DoPing+0x74>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	0151      	lsls	r1, r2, #5
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	440a      	add	r2, r1
 800a6a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	371c      	adds	r7, #28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	1ff80000 	.word	0x1ff80000

0800a6f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7fe ff8c 	bl	800962a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a712:	2110      	movs	r1, #16
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fe ffe5 	bl	80096e4 <USB_FlushTxFifo>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff f80f 	bl	8009748 <USB_FlushRxFifo>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a734:	2300      	movs	r3, #0
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	e01f      	b.n	800a77a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	4413      	add	r3, r2
 800a742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a750:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a758:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a760:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a76e:	461a      	mov	r2, r3
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	3301      	adds	r3, #1
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b0f      	cmp	r3, #15
 800a77e:	d9dc      	bls.n	800a73a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a780:	2300      	movs	r3, #0
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	e034      	b.n	800a7f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a79c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a7ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a7cc:	d80c      	bhi.n	800a7e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7e4:	d0ec      	beq.n	800a7c0 <USB_StopHost+0xc8>
 800a7e6:	e000      	b.n	800a7ea <USB_StopHost+0xf2>
        break;
 800a7e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2b0f      	cmp	r3, #15
 800a7f4:	d9c7      	bls.n	800a786 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a802:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a80a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7fe fefb 	bl	8009608 <USB_EnableGlobalInt>

  return ret;
 800a812:	7ffb      	ldrb	r3, [r7, #31]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	4a08      	ldr	r2, [pc, #32]	@ (800a84c <disk_status+0x30>)
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	79fa      	ldrb	r2, [r7, #7]
 800a834:	4905      	ldr	r1, [pc, #20]	@ (800a84c <disk_status+0x30>)
 800a836:	440a      	add	r2, r1
 800a838:	7b12      	ldrb	r2, [r2, #12]
 800a83a:	4610      	mov	r0, r2
 800a83c:	4798      	blx	r3
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a842:	7bfb      	ldrb	r3, [r7, #15]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20001b24 	.word	0x20001b24

0800a850 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	4a0e      	ldr	r2, [pc, #56]	@ (800a89c <disk_initialize+0x4c>)
 800a862:	5cd3      	ldrb	r3, [r2, r3]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d114      	bne.n	800a892 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	4a0c      	ldr	r2, [pc, #48]	@ (800a89c <disk_initialize+0x4c>)
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	79fa      	ldrb	r2, [r7, #7]
 800a876:	4909      	ldr	r1, [pc, #36]	@ (800a89c <disk_initialize+0x4c>)
 800a878:	440a      	add	r2, r1
 800a87a:	7b12      	ldrb	r2, [r2, #12]
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
 800a880:	4603      	mov	r3, r0
 800a882:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	4a03      	ldr	r2, [pc, #12]	@ (800a89c <disk_initialize+0x4c>)
 800a88e:	2101      	movs	r1, #1
 800a890:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a892:	7bfb      	ldrb	r3, [r7, #15]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20001b24 	.word	0x20001b24

0800a8a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a8dc <disk_read+0x3c>)
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	689c      	ldr	r4, [r3, #8]
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	4a07      	ldr	r2, [pc, #28]	@ (800a8dc <disk_read+0x3c>)
 800a8c0:	4413      	add	r3, r2
 800a8c2:	7b18      	ldrb	r0, [r3, #12]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	47a0      	blx	r4
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd90      	pop	{r4, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20001b24 	.word	0x20001b24

0800a8e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	607a      	str	r2, [r7, #4]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a91c <disk_write+0x3c>)
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	68dc      	ldr	r4, [r3, #12]
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	4a07      	ldr	r2, [pc, #28]	@ (800a91c <disk_write+0x3c>)
 800a900:	4413      	add	r3, r2
 800a902:	7b18      	ldrb	r0, [r3, #12]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	47a0      	blx	r4
 800a90c:	4603      	mov	r3, r0
 800a90e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	371c      	adds	r7, #28
 800a916:	46bd      	mov	sp, r7
 800a918:	bd90      	pop	{r4, r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20001b24 	.word	0x20001b24

0800a920 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	603a      	str	r2, [r7, #0]
 800a92a:	71fb      	strb	r3, [r7, #7]
 800a92c:	460b      	mov	r3, r1
 800a92e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	4a09      	ldr	r2, [pc, #36]	@ (800a958 <disk_ioctl+0x38>)
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	4906      	ldr	r1, [pc, #24]	@ (800a958 <disk_ioctl+0x38>)
 800a940:	440a      	add	r2, r1
 800a942:	7b10      	ldrb	r0, [r2, #12]
 800a944:	79b9      	ldrb	r1, [r7, #6]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	4798      	blx	r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20001b24 	.word	0x20001b24

0800a95c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return 0;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3301      	adds	r3, #1
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	b21a      	sxth	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	b21b      	sxth	r3, r3
 800a988:	4313      	orrs	r3, r2
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a98e:	89fb      	ldrh	r3, [r7, #14]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3303      	adds	r3, #3
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	3202      	adds	r2, #2
 800a9b4:	7812      	ldrb	r2, [r2, #0]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	021b      	lsls	r3, r3, #8
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	7812      	ldrb	r2, [r2, #0]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	887a      	ldrh	r2, [r7, #2]
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]
 800a9fa:	887b      	ldrh	r3, [r7, #2]
 800a9fc:	0a1b      	lsrs	r3, r3, #8
 800a9fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	887a      	ldrh	r2, [r7, #2]
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	701a      	strb	r2, [r3, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	0a1b      	lsrs	r3, r3, #8
 800aa32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	607a      	str	r2, [r7, #4]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	b2d2      	uxtb	r2, r2
 800aa3e:	701a      	strb	r2, [r3, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	607a      	str	r2, [r7, #4]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	701a      	strb	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00d      	beq.n	800aaa6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	1c53      	adds	r3, r2, #1
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	1c59      	adds	r1, r3, #1
 800aa94:	6179      	str	r1, [r7, #20]
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	607b      	str	r3, [r7, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1f1      	bne.n	800aa8a <mem_cpy+0x1a>
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	371c      	adds	r7, #28
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aab2:	b480      	push	{r7}
 800aab4:	b087      	sub	sp, #28
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	617a      	str	r2, [r7, #20]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	607b      	str	r3, [r7, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f3      	bne.n	800aac2 <mem_set+0x10>
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	371c      	adds	r7, #28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aae8:	b480      	push	{r7}
 800aaea:	b089      	sub	sp, #36	@ 0x24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	61fa      	str	r2, [r7, #28]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	61ba      	str	r2, [r7, #24]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	1acb      	subs	r3, r1, r3
 800ab14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	607b      	str	r3, [r7, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <mem_cmp+0x40>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0eb      	beq.n	800ab00 <mem_cmp+0x18>

	return r;
 800ab28:	697b      	ldr	r3, [r7, #20]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3724      	adds	r7, #36	@ 0x24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ab40:	e002      	b.n	800ab48 <chk_chr+0x12>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3301      	adds	r3, #1
 800ab46:	607b      	str	r3, [r7, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <chk_chr+0x26>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d1f2      	bne.n	800ab42 <chk_chr+0xc>
	return *str;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab76:	2300      	movs	r3, #0
 800ab78:	60bb      	str	r3, [r7, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e029      	b.n	800abd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab80:	4a27      	ldr	r2, [pc, #156]	@ (800ac20 <chk_lock+0xb4>)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	4413      	add	r3, r2
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01d      	beq.n	800abca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab8e:	4a24      	ldr	r2, [pc, #144]	@ (800ac20 <chk_lock+0xb4>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	4413      	add	r3, r2
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d116      	bne.n	800abce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aba0:	4a1f      	ldr	r2, [pc, #124]	@ (800ac20 <chk_lock+0xb4>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	011b      	lsls	r3, r3, #4
 800aba6:	4413      	add	r3, r2
 800aba8:	3304      	adds	r3, #4
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d10c      	bne.n	800abce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abb4:	4a1a      	ldr	r2, [pc, #104]	@ (800ac20 <chk_lock+0xb4>)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	4413      	add	r3, r2
 800abbc:	3308      	adds	r3, #8
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d102      	bne.n	800abce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abc8:	e007      	b.n	800abda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800abca:	2301      	movs	r3, #1
 800abcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3301      	adds	r3, #1
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d9d2      	bls.n	800ab80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d109      	bne.n	800abf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <chk_lock+0x80>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d101      	bne.n	800abf0 <chk_lock+0x84>
 800abec:	2300      	movs	r3, #0
 800abee:	e010      	b.n	800ac12 <chk_lock+0xa6>
 800abf0:	2312      	movs	r3, #18
 800abf2:	e00e      	b.n	800ac12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d108      	bne.n	800ac0c <chk_lock+0xa0>
 800abfa:	4a09      	ldr	r2, [pc, #36]	@ (800ac20 <chk_lock+0xb4>)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	4413      	add	r3, r2
 800ac02:	330c      	adds	r3, #12
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac0a:	d101      	bne.n	800ac10 <chk_lock+0xa4>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	e000      	b.n	800ac12 <chk_lock+0xa6>
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20001b04 	.word	0x20001b04

0800ac24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	607b      	str	r3, [r7, #4]
 800ac2e:	e002      	b.n	800ac36 <enq_lock+0x12>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3301      	adds	r3, #1
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d806      	bhi.n	800ac4a <enq_lock+0x26>
 800ac3c:	4a09      	ldr	r2, [pc, #36]	@ (800ac64 <enq_lock+0x40>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	4413      	add	r3, r2
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f2      	bne.n	800ac30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20001b04 	.word	0x20001b04

0800ac68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e01f      	b.n	800acb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac78:	4a41      	ldr	r2, [pc, #260]	@ (800ad80 <inc_lock+0x118>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	4413      	add	r3, r2
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d113      	bne.n	800acb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac8a:	4a3d      	ldr	r2, [pc, #244]	@ (800ad80 <inc_lock+0x118>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	4413      	add	r3, r2
 800ac92:	3304      	adds	r3, #4
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d109      	bne.n	800acb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac9e:	4a38      	ldr	r2, [pc, #224]	@ (800ad80 <inc_lock+0x118>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4413      	add	r3, r2
 800aca6:	3308      	adds	r3, #8
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800acae:	429a      	cmp	r2, r3
 800acb0:	d006      	beq.n	800acc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3301      	adds	r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d9dc      	bls.n	800ac78 <inc_lock+0x10>
 800acbe:	e000      	b.n	800acc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800acc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d132      	bne.n	800ad2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acc8:	2300      	movs	r3, #0
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	e002      	b.n	800acd4 <inc_lock+0x6c>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3301      	adds	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d806      	bhi.n	800ace8 <inc_lock+0x80>
 800acda:	4a29      	ldr	r2, [pc, #164]	@ (800ad80 <inc_lock+0x118>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	011b      	lsls	r3, r3, #4
 800ace0:	4413      	add	r3, r2
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f2      	bne.n	800acce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b02      	cmp	r3, #2
 800acec:	d101      	bne.n	800acf2 <inc_lock+0x8a>
 800acee:	2300      	movs	r3, #0
 800acf0:	e040      	b.n	800ad74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4922      	ldr	r1, [pc, #136]	@ (800ad80 <inc_lock+0x118>)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	440b      	add	r3, r1
 800acfe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	491e      	ldr	r1, [pc, #120]	@ (800ad80 <inc_lock+0x118>)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	440b      	add	r3, r1
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	491a      	ldr	r1, [pc, #104]	@ (800ad80 <inc_lock+0x118>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	011b      	lsls	r3, r3, #4
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad20:	4a17      	ldr	r2, [pc, #92]	@ (800ad80 <inc_lock+0x118>)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	4413      	add	r3, r2
 800ad28:	330c      	adds	r3, #12
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d009      	beq.n	800ad48 <inc_lock+0xe0>
 800ad34:	4a12      	ldr	r2, [pc, #72]	@ (800ad80 <inc_lock+0x118>)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	4413      	add	r3, r2
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <inc_lock+0xe0>
 800ad44:	2300      	movs	r3, #0
 800ad46:	e015      	b.n	800ad74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d108      	bne.n	800ad60 <inc_lock+0xf8>
 800ad4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad80 <inc_lock+0x118>)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	4413      	add	r3, r2
 800ad56:	330c      	adds	r3, #12
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	e001      	b.n	800ad64 <inc_lock+0xfc>
 800ad60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad64:	4906      	ldr	r1, [pc, #24]	@ (800ad80 <inc_lock+0x118>)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	440b      	add	r3, r1
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3301      	adds	r3, #1
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	20001b04 	.word	0x20001b04

0800ad84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	607b      	str	r3, [r7, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d825      	bhi.n	800ade4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ad98:	4a17      	ldr	r2, [pc, #92]	@ (800adf8 <dec_lock+0x74>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	4413      	add	r3, r2
 800ada0:	330c      	adds	r3, #12
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ada6:	89fb      	ldrh	r3, [r7, #14]
 800ada8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adac:	d101      	bne.n	800adb2 <dec_lock+0x2e>
 800adae:	2300      	movs	r3, #0
 800adb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800adb2:	89fb      	ldrh	r3, [r7, #14]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <dec_lock+0x3a>
 800adb8:	89fb      	ldrh	r3, [r7, #14]
 800adba:	3b01      	subs	r3, #1
 800adbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adbe:	4a0e      	ldr	r2, [pc, #56]	@ (800adf8 <dec_lock+0x74>)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	011b      	lsls	r3, r3, #4
 800adc4:	4413      	add	r3, r2
 800adc6:	330c      	adds	r3, #12
 800adc8:	89fa      	ldrh	r2, [r7, #14]
 800adca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d105      	bne.n	800adde <dec_lock+0x5a>
 800add2:	4a09      	ldr	r2, [pc, #36]	@ (800adf8 <dec_lock+0x74>)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	4413      	add	r3, r2
 800adda:	2200      	movs	r2, #0
 800addc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	737b      	strb	r3, [r7, #13]
 800ade2:	e001      	b.n	800ade8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ade4:	2302      	movs	r3, #2
 800ade6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ade8:	7b7b      	ldrb	r3, [r7, #13]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	20001b04 	.word	0x20001b04

0800adfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e010      	b.n	800ae2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	@ (800ae40 <clear_lock+0x44>)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	011b      	lsls	r3, r3, #4
 800ae10:	4413      	add	r3, r2
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d105      	bne.n	800ae26 <clear_lock+0x2a>
 800ae1a:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <clear_lock+0x44>)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	4413      	add	r3, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d9eb      	bls.n	800ae0a <clear_lock+0xe>
	}
}
 800ae32:	bf00      	nop
 800ae34:	bf00      	nop
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20001b04 	.word	0x20001b04

0800ae44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	78db      	ldrb	r3, [r3, #3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d034      	beq.n	800aec2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7858      	ldrb	r0, [r3, #1]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae68:	2301      	movs	r3, #1
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	f7ff fd38 	bl	800a8e0 <disk_write>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	73fb      	strb	r3, [r7, #15]
 800ae7a:	e022      	b.n	800aec2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d217      	bcs.n	800aec2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	789b      	ldrb	r3, [r3, #2]
 800ae96:	613b      	str	r3, [r7, #16]
 800ae98:	e010      	b.n	800aebc <sync_window+0x78>
					wsect += fs->fsize;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7858      	ldrb	r0, [r3, #1]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aeae:	2301      	movs	r3, #1
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	f7ff fd15 	bl	800a8e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	613b      	str	r3, [r7, #16]
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d8eb      	bhi.n	800ae9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d01b      	beq.n	800af1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff ffad 	bl	800ae44 <sync_window>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d113      	bne.n	800af1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7858      	ldrb	r0, [r3, #1]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aefe:	2301      	movs	r3, #1
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	f7ff fccd 	bl	800a8a0 <disk_read>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d004      	beq.n	800af16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af12:	2301      	movs	r3, #1
 800af14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ff87 	bl	800ae44 <sync_window>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d158      	bne.n	800aff2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d148      	bne.n	800afda <sync_fs+0xb2>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	791b      	ldrb	r3, [r3, #4]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d144      	bne.n	800afda <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3330      	adds	r3, #48	@ 0x30
 800af54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fda9 	bl	800aab2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3330      	adds	r3, #48	@ 0x30
 800af64:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800af68:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fd38 	bl	800a9e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3330      	adds	r3, #48	@ 0x30
 800af76:	4921      	ldr	r1, [pc, #132]	@ (800affc <sync_fs+0xd4>)
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff fd4d 	bl	800aa18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3330      	adds	r3, #48	@ 0x30
 800af82:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800af86:	491e      	ldr	r1, [pc, #120]	@ (800b000 <sync_fs+0xd8>)
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fd45 	bl	800aa18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3330      	adds	r3, #48	@ 0x30
 800af92:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7ff fd3b 	bl	800aa18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3330      	adds	r3, #48	@ 0x30
 800afa6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7ff fd31 	bl	800aa18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	7858      	ldrb	r0, [r3, #1]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afce:	2301      	movs	r3, #1
 800afd0:	f7ff fc86 	bl	800a8e0 <disk_write>
			fs->fsi_flag = 0;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	785b      	ldrb	r3, [r3, #1]
 800afde:	2200      	movs	r2, #0
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fc9c 	bl	800a920 <disk_ioctl>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <sync_fs+0xca>
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	41615252 	.word	0x41615252
 800b000:	61417272 	.word	0x61417272

0800b004 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	3b02      	subs	r3, #2
 800b012:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	3b02      	subs	r3, #2
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d301      	bcc.n	800b024 <clust2sect+0x20>
 800b020:	2300      	movs	r3, #0
 800b022:	e008      	b.n	800b036 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	895b      	ldrh	r3, [r3, #10]
 800b028:	461a      	mov	r2, r3
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	fb03 f202 	mul.w	r2, r3, r2
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b034:	4413      	add	r3, r2
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b086      	sub	sp, #24
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d904      	bls.n	800b062 <get_fat+0x20>
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d302      	bcc.n	800b068 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b062:	2301      	movs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e08e      	b.n	800b186 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b06c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b03      	cmp	r3, #3
 800b074:	d061      	beq.n	800b13a <get_fat+0xf8>
 800b076:	2b03      	cmp	r3, #3
 800b078:	dc7b      	bgt.n	800b172 <get_fat+0x130>
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d002      	beq.n	800b084 <get_fat+0x42>
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d041      	beq.n	800b106 <get_fat+0xc4>
 800b082:	e076      	b.n	800b172 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	085b      	lsrs	r3, r3, #1
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6a1a      	ldr	r2, [r3, #32]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	0a5b      	lsrs	r3, r3, #9
 800b09a:	4413      	add	r3, r2
 800b09c:	4619      	mov	r1, r3
 800b09e:	6938      	ldr	r0, [r7, #16]
 800b0a0:	f7ff ff14 	bl	800aecc <move_window>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d166      	bne.n	800b178 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	60fa      	str	r2, [r7, #12]
 800b0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6a1a      	ldr	r2, [r3, #32]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	0a5b      	lsrs	r3, r3, #9
 800b0c6:	4413      	add	r3, r2
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f7ff fefe 	bl	800aecc <move_window>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d152      	bne.n	800b17c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <get_fat+0xba>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	091b      	lsrs	r3, r3, #4
 800b0fa:	e002      	b.n	800b102 <get_fat+0xc0>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b102:	617b      	str	r3, [r7, #20]
			break;
 800b104:	e03f      	b.n	800b186 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6a1a      	ldr	r2, [r3, #32]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	0a1b      	lsrs	r3, r3, #8
 800b10e:	4413      	add	r3, r2
 800b110:	4619      	mov	r1, r3
 800b112:	6938      	ldr	r0, [r7, #16]
 800b114:	f7ff feda 	bl	800aecc <move_window>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d130      	bne.n	800b180 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b12c:	4413      	add	r3, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fc1c 	bl	800a96c <ld_word>
 800b134:	4603      	mov	r3, r0
 800b136:	617b      	str	r3, [r7, #20]
			break;
 800b138:	e025      	b.n	800b186 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6a1a      	ldr	r2, [r3, #32]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	09db      	lsrs	r3, r3, #7
 800b142:	4413      	add	r3, r2
 800b144:	4619      	mov	r1, r3
 800b146:	6938      	ldr	r0, [r7, #16]
 800b148:	f7ff fec0 	bl	800aecc <move_window>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d118      	bne.n	800b184 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b160:	4413      	add	r3, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff fc1a 	bl	800a99c <ld_dword>
 800b168:	4603      	mov	r3, r0
 800b16a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b16e:	617b      	str	r3, [r7, #20]
			break;
 800b170:	e009      	b.n	800b186 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b172:	2301      	movs	r3, #1
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	e006      	b.n	800b186 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b178:	bf00      	nop
 800b17a:	e004      	b.n	800b186 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b17c:	bf00      	nop
 800b17e:	e002      	b.n	800b186 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b180:	bf00      	nop
 800b182:	e000      	b.n	800b186 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b184:	bf00      	nop
		}
	}

	return val;
 800b186:	697b      	ldr	r3, [r7, #20]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b089      	sub	sp, #36	@ 0x24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b19c:	2302      	movs	r3, #2
 800b19e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	f240 80d9 	bls.w	800b35a <put_fat+0x1ca>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	f080 80d3 	bcs.w	800b35a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	f000 8096 	beq.w	800b2ea <put_fat+0x15a>
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	f300 80cb 	bgt.w	800b35a <put_fat+0x1ca>
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d002      	beq.n	800b1ce <put_fat+0x3e>
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d06e      	beq.n	800b2aa <put_fat+0x11a>
 800b1cc:	e0c5      	b.n	800b35a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	61bb      	str	r3, [r7, #24]
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	4413      	add	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a1a      	ldr	r2, [r3, #32]
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	0a5b      	lsrs	r3, r3, #9
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff fe6f 	bl	800aecc <move_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1f2:	7ffb      	ldrb	r3, [r7, #31]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f040 80a9 	bne.w	800b34c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	1c59      	adds	r1, r3, #1
 800b204:	61b9      	str	r1, [r7, #24]
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	4413      	add	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00d      	beq.n	800b234 <put_fat+0xa4>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	b25a      	sxtb	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	b25b      	sxtb	r3, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	b25b      	sxtb	r3, r3
 800b230:	b2db      	uxtb	r3, r3
 800b232:	e001      	b.n	800b238 <put_fat+0xa8>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2201      	movs	r2, #1
 800b240:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1a      	ldr	r2, [r3, #32]
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	0a5b      	lsrs	r3, r3, #9
 800b24a:	4413      	add	r3, r2
 800b24c:	4619      	mov	r1, r3
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff fe3c 	bl	800aecc <move_window>
 800b254:	4603      	mov	r3, r0
 800b256:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b258:	7ffb      	ldrb	r3, [r7, #31]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d178      	bne.n	800b350 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26a:	4413      	add	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d003      	beq.n	800b280 <put_fat+0xf0>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	091b      	lsrs	r3, r3, #4
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	e00e      	b.n	800b29e <put_fat+0x10e>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	b25b      	sxtb	r3, r3
 800b286:	f023 030f 	bic.w	r3, r3, #15
 800b28a:	b25a      	sxtb	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b25b      	sxtb	r3, r3
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	b25b      	sxtb	r3, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	b25b      	sxtb	r3, r3
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	70da      	strb	r2, [r3, #3]
			break;
 800b2a8:	e057      	b.n	800b35a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6a1a      	ldr	r2, [r3, #32]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	4413      	add	r3, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fe08 	bl	800aecc <move_window>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2c0:	7ffb      	ldrb	r3, [r7, #31]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d146      	bne.n	800b354 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	005b      	lsls	r3, r3, #1
 800b2d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b2d4:	4413      	add	r3, r2
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	b292      	uxth	r2, r2
 800b2da:	4611      	mov	r1, r2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff fb80 	bl	800a9e2 <st_word>
			fs->wflag = 1;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	70da      	strb	r2, [r3, #3]
			break;
 800b2e8:	e037      	b.n	800b35a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a1a      	ldr	r2, [r3, #32]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	09db      	lsrs	r3, r3, #7
 800b2f2:	4413      	add	r3, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff fde8 	bl	800aecc <move_window>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b300:	7ffb      	ldrb	r3, [r7, #31]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d128      	bne.n	800b358 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b31a:	4413      	add	r3, r2
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fb3d 	bl	800a99c <ld_dword>
 800b322:	4603      	mov	r3, r0
 800b324:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b328:	4323      	orrs	r3, r4
 800b32a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b33a:	4413      	add	r3, r2
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fb6a 	bl	800aa18 <st_dword>
			fs->wflag = 1;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2201      	movs	r2, #1
 800b348:	70da      	strb	r2, [r3, #3]
			break;
 800b34a:	e006      	b.n	800b35a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b34c:	bf00      	nop
 800b34e:	e004      	b.n	800b35a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b350:	bf00      	nop
 800b352:	e002      	b.n	800b35a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b354:	bf00      	nop
 800b356:	e000      	b.n	800b35a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b358:	bf00      	nop
		}
	}
	return res;
 800b35a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3724      	adds	r7, #36	@ 0x24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd90      	pop	{r4, r7, pc}

0800b364 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d904      	bls.n	800b38a <remove_chain+0x26>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	429a      	cmp	r2, r3
 800b388:	d301      	bcc.n	800b38e <remove_chain+0x2a>
 800b38a:	2302      	movs	r3, #2
 800b38c:	e04b      	b.n	800b426 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00c      	beq.n	800b3ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	69b8      	ldr	r0, [r7, #24]
 800b39c:	f7ff fef8 	bl	800b190 <put_fat>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b3a4:	7ffb      	ldrb	r3, [r7, #31]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <remove_chain+0x4a>
 800b3aa:	7ffb      	ldrb	r3, [r7, #31]
 800b3ac:	e03b      	b.n	800b426 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7ff fe46 	bl	800b042 <get_fat>
 800b3b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d031      	beq.n	800b422 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <remove_chain+0x64>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e02e      	b.n	800b426 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3ce:	d101      	bne.n	800b3d4 <remove_chain+0x70>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e028      	b.n	800b426 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	68b9      	ldr	r1, [r7, #8]
 800b3d8:	69b8      	ldr	r0, [r7, #24]
 800b3da:	f7ff fed9 	bl	800b190 <put_fat>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b3e2:	7ffb      	ldrb	r3, [r7, #31]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <remove_chain+0x88>
 800b3e8:	7ffb      	ldrb	r3, [r7, #31]
 800b3ea:	e01c      	b.n	800b426 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	3b02      	subs	r3, #2
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d20b      	bcs.n	800b412 <remove_chain+0xae>
			fs->free_clst++;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	791b      	ldrb	r3, [r3, #4]
 800b408:	f043 0301 	orr.w	r3, r3, #1
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d3c6      	bcc.n	800b3ae <remove_chain+0x4a>
 800b420:	e000      	b.n	800b424 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b422:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b088      	sub	sp, #32
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10d      	bne.n	800b460 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d004      	beq.n	800b45a <create_chain+0x2c>
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	429a      	cmp	r2, r3
 800b458:	d31b      	bcc.n	800b492 <create_chain+0x64>
 800b45a:	2301      	movs	r3, #1
 800b45c:	61bb      	str	r3, [r7, #24]
 800b45e:	e018      	b.n	800b492 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff fded 	bl	800b042 <get_fat>
 800b468:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d801      	bhi.n	800b474 <create_chain+0x46>
 800b470:	2301      	movs	r3, #1
 800b472:	e070      	b.n	800b556 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b47a:	d101      	bne.n	800b480 <create_chain+0x52>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	e06a      	b.n	800b556 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	429a      	cmp	r2, r3
 800b488:	d201      	bcs.n	800b48e <create_chain+0x60>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	e063      	b.n	800b556 <create_chain+0x128>
		scl = clst;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	3301      	adds	r3, #1
 800b49a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	69fa      	ldr	r2, [r7, #28]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d307      	bcc.n	800b4b6 <create_chain+0x88>
				ncl = 2;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d901      	bls.n	800b4b6 <create_chain+0x88>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	e04f      	b.n	800b556 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4b6:	69f9      	ldr	r1, [r7, #28]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff fdc2 	bl	800b042 <get_fat>
 800b4be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00e      	beq.n	800b4e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d003      	beq.n	800b4d4 <create_chain+0xa6>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4d2:	d101      	bne.n	800b4d8 <create_chain+0xaa>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	e03e      	b.n	800b556 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4d8:	69fa      	ldr	r2, [r7, #28]
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d1da      	bne.n	800b496 <create_chain+0x68>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	e038      	b.n	800b556 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b4e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4ea:	69f9      	ldr	r1, [r7, #28]
 800b4ec:	6938      	ldr	r0, [r7, #16]
 800b4ee:	f7ff fe4f 	bl	800b190 <put_fat>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d109      	bne.n	800b510 <create_chain+0xe2>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d006      	beq.n	800b510 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6938      	ldr	r0, [r7, #16]
 800b508:	f7ff fe42 	bl	800b190 <put_fat>
 800b50c:	4603      	mov	r3, r0
 800b50e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d116      	bne.n	800b544 <create_chain+0x116>
		fs->last_clst = ncl;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	69fa      	ldr	r2, [r7, #28]
 800b51a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	691a      	ldr	r2, [r3, #16]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	3b02      	subs	r3, #2
 800b526:	429a      	cmp	r2, r3
 800b528:	d804      	bhi.n	800b534 <create_chain+0x106>
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	1e5a      	subs	r2, r3, #1
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	791b      	ldrb	r3, [r3, #4]
 800b538:	f043 0301 	orr.w	r3, r3, #1
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	711a      	strb	r2, [r3, #4]
 800b542:	e007      	b.n	800b554 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d102      	bne.n	800b550 <create_chain+0x122>
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b54e:	e000      	b.n	800b552 <create_chain+0x124>
 800b550:	2301      	movs	r3, #1
 800b552:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b554:	69fb      	ldr	r3, [r7, #28]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b55e:	b480      	push	{r7}
 800b560:	b087      	sub	sp, #28
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b572:	3304      	adds	r3, #4
 800b574:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	0a5b      	lsrs	r3, r3, #9
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	8952      	ldrh	r2, [r2, #10]
 800b57e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b582:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	1d1a      	adds	r2, r3, #4
 800b588:	613a      	str	r2, [r7, #16]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <clmt_clust+0x3a>
 800b594:	2300      	movs	r3, #0
 800b596:	e010      	b.n	800b5ba <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d307      	bcc.n	800b5b0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5ae:	e7e9      	b.n	800b584 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b5b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4413      	add	r3, r2
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	371c      	adds	r7, #28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b086      	sub	sp, #24
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5dc:	d204      	bcs.n	800b5e8 <dir_sdi+0x22>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	f003 031f 	and.w	r3, r3, #31
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <dir_sdi+0x26>
		return FR_INT_ERR;
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e063      	b.n	800b6b4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <dir_sdi+0x46>
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d902      	bls.n	800b60c <dir_sdi+0x46>
		clst = fs->dirbase;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10c      	bne.n	800b62c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	8912      	ldrh	r2, [r2, #8]
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d301      	bcc.n	800b622 <dir_sdi+0x5c>
 800b61e:	2302      	movs	r3, #2
 800b620:	e048      	b.n	800b6b4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	61da      	str	r2, [r3, #28]
 800b62a:	e029      	b.n	800b680 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	895b      	ldrh	r3, [r3, #10]
 800b630:	025b      	lsls	r3, r3, #9
 800b632:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b634:	e019      	b.n	800b66a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6979      	ldr	r1, [r7, #20]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fd01 	bl	800b042 <get_fat>
 800b640:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b648:	d101      	bne.n	800b64e <dir_sdi+0x88>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e032      	b.n	800b6b4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d904      	bls.n	800b65e <dir_sdi+0x98>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d301      	bcc.n	800b662 <dir_sdi+0x9c>
 800b65e:	2302      	movs	r3, #2
 800b660:	e028      	b.n	800b6b4 <dir_sdi+0xee>
			ofs -= csz;
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d2e1      	bcs.n	800b636 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b672:	6979      	ldr	r1, [r7, #20]
 800b674:	6938      	ldr	r0, [r7, #16]
 800b676:	f7ff fcc5 	bl	800b004 <clust2sect>
 800b67a:	4602      	mov	r2, r0
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <dir_sdi+0xcc>
 800b68e:	2302      	movs	r3, #2
 800b690:	e010      	b.n	800b6b4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	69da      	ldr	r2, [r3, #28]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	0a5b      	lsrs	r3, r3, #9
 800b69a:	441a      	add	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ac:	441a      	add	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	3320      	adds	r3, #32
 800b6d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <dir_next+0x28>
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6e2:	d301      	bcc.n	800b6e8 <dir_next+0x2c>
 800b6e4:	2304      	movs	r3, #4
 800b6e6:	e0aa      	b.n	800b83e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f040 8098 	bne.w	800b824 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	095b      	lsrs	r3, r3, #5
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	8912      	ldrh	r2, [r2, #8]
 800b70e:	4293      	cmp	r3, r2
 800b710:	f0c0 8088 	bcc.w	800b824 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	61da      	str	r2, [r3, #28]
 800b71a:	2304      	movs	r3, #4
 800b71c:	e08f      	b.n	800b83e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	0a5b      	lsrs	r3, r3, #9
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	8952      	ldrh	r2, [r2, #10]
 800b726:	3a01      	subs	r2, #1
 800b728:	4013      	ands	r3, r2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d17a      	bne.n	800b824 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f7ff fc83 	bl	800b042 <get_fat>
 800b73c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d801      	bhi.n	800b748 <dir_next+0x8c>
 800b744:	2302      	movs	r3, #2
 800b746:	e07a      	b.n	800b83e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b74e:	d101      	bne.n	800b754 <dir_next+0x98>
 800b750:	2301      	movs	r3, #1
 800b752:	e074      	b.n	800b83e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d358      	bcc.n	800b810 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d104      	bne.n	800b76e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	61da      	str	r2, [r3, #28]
 800b76a:	2304      	movs	r3, #4
 800b76c:	e067      	b.n	800b83e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	4619      	mov	r1, r3
 800b776:	4610      	mov	r0, r2
 800b778:	f7ff fe59 	bl	800b42e <create_chain>
 800b77c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <dir_next+0xcc>
 800b784:	2307      	movs	r3, #7
 800b786:	e05a      	b.n	800b83e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d101      	bne.n	800b792 <dir_next+0xd6>
 800b78e:	2302      	movs	r3, #2
 800b790:	e055      	b.n	800b83e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b798:	d101      	bne.n	800b79e <dir_next+0xe2>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e04f      	b.n	800b83e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff fb50 	bl	800ae44 <sync_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <dir_next+0xf2>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e047      	b.n	800b83e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3330      	adds	r3, #48	@ 0x30
 800b7b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff f97a 	bl	800aab2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]
 800b7c2:	6979      	ldr	r1, [r7, #20]
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fc1d 	bl	800b004 <clust2sect>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b7d0:	e012      	b.n	800b7f8 <dir_next+0x13c>
						fs->wflag = 1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fb33 	bl	800ae44 <sync_window>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <dir_next+0x12c>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e02a      	b.n	800b83e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	895b      	ldrh	r3, [r3, #10]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	4293      	cmp	r3, r2
 800b802:	d3e6      	bcc.n	800b7d2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	1ad2      	subs	r2, r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff fbf3 	bl	800b004 <clust2sect>
 800b81e:	4602      	mov	r2, r0
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	441a      	add	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b086      	sub	sp, #24
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b856:	2100      	movs	r1, #0
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff feb4 	bl	800b5c6 <dir_sdi>
 800b85e:	4603      	mov	r3, r0
 800b860:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d12b      	bne.n	800b8c0 <dir_alloc+0x7a>
		n = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	4619      	mov	r1, r3
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff fb2a 	bl	800aecc <move_window>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d11d      	bne.n	800b8be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2be5      	cmp	r3, #229	@ 0xe5
 800b88a:	d004      	beq.n	800b896 <dir_alloc+0x50>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a1b      	ldr	r3, [r3, #32]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d107      	bne.n	800b8a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	3301      	adds	r3, #1
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d102      	bne.n	800b8aa <dir_alloc+0x64>
 800b8a4:	e00c      	b.n	800b8c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff ff05 	bl	800b6bc <dir_next>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0d7      	beq.n	800b86c <dir_alloc+0x26>
 800b8bc:	e000      	b.n	800b8c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b8be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d101      	bne.n	800b8ca <dir_alloc+0x84>
 800b8c6:	2307      	movs	r3, #7
 800b8c8:	75fb      	strb	r3, [r7, #23]
	return res;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	331a      	adds	r3, #26
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff f842 	bl	800a96c <ld_word>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b03      	cmp	r3, #3
 800b8f2:	d109      	bne.n	800b908 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3314      	adds	r3, #20
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff f837 	bl	800a96c <ld_word>
 800b8fe:	4603      	mov	r3, r0
 800b900:	041b      	lsls	r3, r3, #16
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b908:	68fb      	ldr	r3, [r7, #12]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	331a      	adds	r3, #26
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	b292      	uxth	r2, r2
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff f85a 	bl	800a9e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2b03      	cmp	r3, #3
 800b934:	d109      	bne.n	800b94a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f103 0214 	add.w	r2, r3, #20
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	b29b      	uxth	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7ff f84c 	bl	800a9e2 <st_word>
	}
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b95c:	2304      	movs	r3, #4
 800b95e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b966:	e03c      	b.n	800b9e2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	69db      	ldr	r3, [r3, #28]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6938      	ldr	r0, [r7, #16]
 800b970:	f7ff faac 	bl	800aecc <move_window>
 800b974:	4603      	mov	r3, r0
 800b976:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d136      	bne.n	800b9ec <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b98c:	2304      	movs	r3, #4
 800b98e:	75fb      	strb	r3, [r7, #23]
 800b990:	e031      	b.n	800b9f6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	330b      	adds	r3, #11
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b99e:	73bb      	strb	r3, [r7, #14]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	7bba      	ldrb	r2, [r7, #14]
 800b9a4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	2be5      	cmp	r3, #229	@ 0xe5
 800b9aa:	d011      	beq.n	800b9d0 <dir_read+0x7e>
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9b0:	d00e      	beq.n	800b9d0 <dir_read+0x7e>
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b0f      	cmp	r3, #15
 800b9b6:	d00b      	beq.n	800b9d0 <dir_read+0x7e>
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	f023 0320 	bic.w	r3, r3, #32
 800b9be:	2b08      	cmp	r3, #8
 800b9c0:	bf0c      	ite	eq
 800b9c2:	2301      	moveq	r3, #1
 800b9c4:	2300      	movne	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d00f      	beq.n	800b9f0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff fe72 	bl	800b6bc <dir_next>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d108      	bne.n	800b9f4 <dir_read+0xa2>
	while (dp->sect) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1be      	bne.n	800b968 <dir_read+0x16>
 800b9ea:	e004      	b.n	800b9f6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b9ec:	bf00      	nop
 800b9ee:	e002      	b.n	800b9f6 <dir_read+0xa4>
				break;
 800b9f0:	bf00      	nop
 800b9f2:	e000      	b.n	800b9f6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b9f4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <dir_read+0xb0>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	61da      	str	r2, [r3, #28]
	return res;
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fdd2 	bl	800b5c6 <dir_sdi>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <dir_find+0x24>
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	e03e      	b.n	800baae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	69db      	ldr	r3, [r3, #28]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6938      	ldr	r0, [r7, #16]
 800ba38:	f7ff fa48 	bl	800aecc <move_window>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d12f      	bne.n	800baa6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d102      	bne.n	800ba5a <dir_find+0x4e>
 800ba54:	2304      	movs	r3, #4
 800ba56:	75fb      	strb	r3, [r7, #23]
 800ba58:	e028      	b.n	800baac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	330b      	adds	r3, #11
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	330b      	adds	r3, #11
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	f003 0308 	and.w	r3, r3, #8
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <dir_find+0x86>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a18      	ldr	r0, [r3, #32]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3324      	adds	r3, #36	@ 0x24
 800ba84:	220b      	movs	r2, #11
 800ba86:	4619      	mov	r1, r3
 800ba88:	f7ff f82e 	bl	800aae8 <mem_cmp>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba92:	2100      	movs	r1, #0
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fe11 	bl	800b6bc <dir_next>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0c5      	beq.n	800ba30 <dir_find+0x24>
 800baa4:	e002      	b.n	800baac <dir_find+0xa0>
		if (res != FR_OK) break;
 800baa6:	bf00      	nop
 800baa8:	e000      	b.n	800baac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800baaa:	bf00      	nop

	return res;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bac4:	2101      	movs	r1, #1
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff febd 	bl	800b846 <dir_alloc>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d11c      	bne.n	800bb10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	4619      	mov	r1, r3
 800badc:	68b8      	ldr	r0, [r7, #8]
 800bade:	f7ff f9f5 	bl	800aecc <move_window>
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d111      	bne.n	800bb10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	2220      	movs	r2, #32
 800baf2:	2100      	movs	r1, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe ffdc 	bl	800aab2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a18      	ldr	r0, [r3, #32]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	3324      	adds	r3, #36	@ 0x24
 800bb02:	220b      	movs	r2, #11
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7fe ffb3 	bl	800aa70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b086      	sub	sp, #24
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2200      	movs	r2, #0
 800bb28:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d04f      	beq.n	800bbd2 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	613b      	str	r3, [r7, #16]
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bb3a:	e022      	b.n	800bb82 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1a      	ldr	r2, [r3, #32]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	1c59      	adds	r1, r3, #1
 800bb44:	6179      	str	r1, [r7, #20]
 800bb46:	4413      	add	r3, r2
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	2b20      	cmp	r3, #32
 800bb50:	d016      	beq.n	800bb80 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b05      	cmp	r3, #5
 800bb56:	d101      	bne.n	800bb5c <get_fileinfo+0x42>
 800bb58:	23e5      	movs	r3, #229	@ 0xe5
 800bb5a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d106      	bne.n	800bb70 <get_fileinfo+0x56>
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	613a      	str	r2, [r7, #16]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	222e      	movs	r2, #46	@ 0x2e
 800bb6e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	613a      	str	r2, [r7, #16]
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	4413      	add	r3, r2
 800bb7a:	7bfa      	ldrb	r2, [r7, #15]
 800bb7c:	725a      	strb	r2, [r3, #9]
 800bb7e:	e000      	b.n	800bb82 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bb80:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2b0a      	cmp	r3, #10
 800bb86:	d9d9      	bls.n	800bb3c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3309      	adds	r3, #9
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	7ada      	ldrb	r2, [r3, #11]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	331c      	adds	r3, #28
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fef9 	bl	800a99c <ld_dword>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	3316      	adds	r3, #22
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe fef0 	bl	800a99c <ld_dword>
 800bbbc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	80da      	strh	r2, [r3, #6]
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	0c1b      	lsrs	r3, r3, #16
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	809a      	strh	r2, [r3, #4]
 800bbd0:	e000      	b.n	800bbd4 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bbd2:	bf00      	nop
}
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3324      	adds	r3, #36	@ 0x24
 800bbf0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bbf2:	220b      	movs	r2, #11
 800bbf4:	2120      	movs	r1, #32
 800bbf6:	68b8      	ldr	r0, [r7, #8]
 800bbf8:	f7fe ff5b 	bl	800aab2 <mem_set>
	si = i = 0; ni = 8;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	613b      	str	r3, [r7, #16]
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	2308      	movs	r3, #8
 800bc06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	61fa      	str	r2, [r7, #28]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc16:	7efb      	ldrb	r3, [r7, #27]
 800bc18:	2b20      	cmp	r3, #32
 800bc1a:	d94e      	bls.n	800bcba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bc1c:	7efb      	ldrb	r3, [r7, #27]
 800bc1e:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc20:	d006      	beq.n	800bc30 <create_name+0x54>
 800bc22:	7efb      	ldrb	r3, [r7, #27]
 800bc24:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc26:	d110      	bne.n	800bc4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bc28:	e002      	b.n	800bc30 <create_name+0x54>
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	4413      	add	r3, r2
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc3a:	d0f6      	beq.n	800bc2a <create_name+0x4e>
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	4413      	add	r3, r2
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc46:	d0f0      	beq.n	800bc2a <create_name+0x4e>
			break;
 800bc48:	e038      	b.n	800bcbc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bc4a:	7efb      	ldrb	r3, [r7, #27]
 800bc4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc4e:	d003      	beq.n	800bc58 <create_name+0x7c>
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d30c      	bcc.n	800bc72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b0b      	cmp	r3, #11
 800bc5c:	d002      	beq.n	800bc64 <create_name+0x88>
 800bc5e:	7efb      	ldrb	r3, [r7, #27]
 800bc60:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc62:	d001      	beq.n	800bc68 <create_name+0x8c>
 800bc64:	2306      	movs	r3, #6
 800bc66:	e044      	b.n	800bcf2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bc68:	2308      	movs	r3, #8
 800bc6a:	613b      	str	r3, [r7, #16]
 800bc6c:	230b      	movs	r3, #11
 800bc6e:	617b      	str	r3, [r7, #20]
			continue;
 800bc70:	e022      	b.n	800bcb8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bc72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da04      	bge.n	800bc84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bc7a:	7efb      	ldrb	r3, [r7, #27]
 800bc7c:	3b80      	subs	r3, #128	@ 0x80
 800bc7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bcfc <create_name+0x120>)
 800bc80:	5cd3      	ldrb	r3, [r2, r3]
 800bc82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bc84:	7efb      	ldrb	r3, [r7, #27]
 800bc86:	4619      	mov	r1, r3
 800bc88:	481d      	ldr	r0, [pc, #116]	@ (800bd00 <create_name+0x124>)
 800bc8a:	f7fe ff54 	bl	800ab36 <chk_chr>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <create_name+0xbc>
 800bc94:	2306      	movs	r3, #6
 800bc96:	e02c      	b.n	800bcf2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bc98:	7efb      	ldrb	r3, [r7, #27]
 800bc9a:	2b60      	cmp	r3, #96	@ 0x60
 800bc9c:	d905      	bls.n	800bcaa <create_name+0xce>
 800bc9e:	7efb      	ldrb	r3, [r7, #27]
 800bca0:	2b7a      	cmp	r3, #122	@ 0x7a
 800bca2:	d802      	bhi.n	800bcaa <create_name+0xce>
 800bca4:	7efb      	ldrb	r3, [r7, #27]
 800bca6:	3b20      	subs	r3, #32
 800bca8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	613a      	str	r2, [r7, #16]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	7efa      	ldrb	r2, [r7, #27]
 800bcb6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bcb8:	e7a6      	b.n	800bc08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bcba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	441a      	add	r2, r3
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <create_name+0xf4>
 800bccc:	2306      	movs	r3, #6
 800bcce:	e010      	b.n	800bcf2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2be5      	cmp	r3, #229	@ 0xe5
 800bcd6:	d102      	bne.n	800bcde <create_name+0x102>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2205      	movs	r2, #5
 800bcdc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bcde:	7efb      	ldrb	r3, [r7, #27]
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d801      	bhi.n	800bce8 <create_name+0x10c>
 800bce4:	2204      	movs	r2, #4
 800bce6:	e000      	b.n	800bcea <create_name+0x10e>
 800bce8:	2200      	movs	r2, #0
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	330b      	adds	r3, #11
 800bcee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bcf0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	08014a40 	.word	0x08014a40
 800bd00:	08012404 	.word	0x08012404

0800bd04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bd18:	e002      	b.n	800bd20 <follow_path+0x1c>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd26:	d0f8      	beq.n	800bd1a <follow_path+0x16>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd2e:	d0f4      	beq.n	800bd1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2200      	movs	r2, #0
 800bd34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b1f      	cmp	r3, #31
 800bd3c:	d80a      	bhi.n	800bd54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2280      	movs	r2, #128	@ 0x80
 800bd42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bd46:	2100      	movs	r1, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff fc3c 	bl	800b5c6 <dir_sdi>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	e043      	b.n	800bddc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd54:	463b      	mov	r3, r7
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ff3f 	bl	800bbdc <create_name>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d134      	bne.n	800bdd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fe4f 	bl	800ba0c <dir_find>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bd78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d127      	bne.n	800bdd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d122      	bne.n	800bdd6 <follow_path+0xd2>
 800bd90:	2305      	movs	r3, #5
 800bd92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd94:	e01f      	b.n	800bdd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd96:	7afb      	ldrb	r3, [r7, #11]
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d11c      	bne.n	800bdda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	799b      	ldrb	r3, [r3, #6]
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bdac:	2305      	movs	r3, #5
 800bdae:	75fb      	strb	r3, [r7, #23]
 800bdb0:	e014      	b.n	800bddc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc0:	4413      	add	r3, r2
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7ff fd85 	bl	800b8d4 <ld_clust>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bdd0:	e7c0      	b.n	800bd54 <follow_path+0x50>
			if (res != FR_OK) break;
 800bdd2:	bf00      	nop
 800bdd4:	e002      	b.n	800bddc <follow_path+0xd8>
				break;
 800bdd6:	bf00      	nop
 800bdd8:	e000      	b.n	800bddc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bdda:	bf00      	nop
			}
		}
	}

	return res;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b087      	sub	sp, #28
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d031      	beq.n	800be60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	e002      	b.n	800be0a <get_ldnumber+0x24>
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	3301      	adds	r3, #1
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b20      	cmp	r3, #32
 800be10:	d903      	bls.n	800be1a <get_ldnumber+0x34>
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	2b3a      	cmp	r3, #58	@ 0x3a
 800be18:	d1f4      	bne.n	800be04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b3a      	cmp	r3, #58	@ 0x3a
 800be20:	d11c      	bne.n	800be5c <get_ldnumber+0x76>
			tp = *path;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	60fa      	str	r2, [r7, #12]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	3b30      	subs	r3, #48	@ 0x30
 800be32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b09      	cmp	r3, #9
 800be38:	d80e      	bhi.n	800be58 <get_ldnumber+0x72>
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d10a      	bne.n	800be58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d807      	bhi.n	800be58 <get_ldnumber+0x72>
					vol = (int)i;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	3301      	adds	r3, #1
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	e002      	b.n	800be62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be5c:	2300      	movs	r3, #0
 800be5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be60:	693b      	ldr	r3, [r7, #16]
}
 800be62:	4618      	mov	r0, r3
 800be64:	371c      	adds	r7, #28
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
	...

0800be70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	70da      	strb	r2, [r3, #3]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be86:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff f81e 	bl	800aecc <move_window>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <check_fs+0x2a>
 800be96:	2304      	movs	r3, #4
 800be98:	e038      	b.n	800bf0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3330      	adds	r3, #48	@ 0x30
 800be9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fd62 	bl	800a96c <ld_word>
 800bea8:	4603      	mov	r3, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d001      	beq.n	800beb8 <check_fs+0x48>
 800beb4:	2303      	movs	r3, #3
 800beb6:	e029      	b.n	800bf0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bebe:	2be9      	cmp	r3, #233	@ 0xe9
 800bec0:	d009      	beq.n	800bed6 <check_fs+0x66>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bec8:	2beb      	cmp	r3, #235	@ 0xeb
 800beca:	d11e      	bne.n	800bf0a <check_fs+0x9a>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bed2:	2b90      	cmp	r3, #144	@ 0x90
 800bed4:	d119      	bne.n	800bf0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	3330      	adds	r3, #48	@ 0x30
 800beda:	3336      	adds	r3, #54	@ 0x36
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fd5d 	bl	800a99c <ld_dword>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bee8:	4a0a      	ldr	r2, [pc, #40]	@ (800bf14 <check_fs+0xa4>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d101      	bne.n	800bef2 <check_fs+0x82>
 800beee:	2300      	movs	r3, #0
 800bef0:	e00c      	b.n	800bf0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3330      	adds	r3, #48	@ 0x30
 800bef6:	3352      	adds	r3, #82	@ 0x52
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fd4f 	bl	800a99c <ld_dword>
 800befe:	4603      	mov	r3, r0
 800bf00:	4a05      	ldr	r2, [pc, #20]	@ (800bf18 <check_fs+0xa8>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d101      	bne.n	800bf0a <check_fs+0x9a>
 800bf06:	2300      	movs	r3, #0
 800bf08:	e000      	b.n	800bf0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bf0a:	2302      	movs	r3, #2
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	00544146 	.word	0x00544146
 800bf18:	33544146 	.word	0x33544146

0800bf1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b096      	sub	sp, #88	@ 0x58
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff ff58 	bl	800bde6 <get_ldnumber>
 800bf36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	da01      	bge.n	800bf42 <find_volume+0x26>
 800bf3e:	230b      	movs	r3, #11
 800bf40:	e22d      	b.n	800c39e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf42:	4aa1      	ldr	r2, [pc, #644]	@ (800c1c8 <find_volume+0x2ac>)
 800bf44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <find_volume+0x3a>
 800bf52:	230c      	movs	r3, #12
 800bf54:	e223      	b.n	800c39e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	f023 0301 	bic.w	r3, r3, #1
 800bf62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01a      	beq.n	800bfa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	785b      	ldrb	r3, [r3, #1]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fe fc53 	bl	800a81c <disk_status>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10c      	bne.n	800bfa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <find_volume+0x82>
 800bf8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf9a:	230a      	movs	r3, #10
 800bf9c:	e1ff      	b.n	800c39e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e1fd      	b.n	800c39e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bfa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe fc4b 	bl	800a850 <disk_initialize>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bfc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e1e6      	b.n	800c39e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d007      	beq.n	800bfe6 <find_volume+0xca>
 800bfd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfda:	f003 0304 	and.w	r3, r3, #4
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	e1db      	b.n	800c39e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bfea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bfec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfee:	f7ff ff3f 	bl	800be70 <check_fs>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d149      	bne.n	800c094 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c000:	2300      	movs	r3, #0
 800c002:	643b      	str	r3, [r7, #64]	@ 0x40
 800c004:	e01e      	b.n	800c044 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c008:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c014:	4413      	add	r3, r2
 800c016:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01a:	3304      	adds	r3, #4
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <find_volume+0x114>
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	3308      	adds	r3, #8
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fcb8 	bl	800a99c <ld_dword>
 800c02c:	4602      	mov	r2, r0
 800c02e:	e000      	b.n	800c032 <find_volume+0x116>
 800c030:	2200      	movs	r2, #0
 800c032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	3358      	adds	r3, #88	@ 0x58
 800c038:	443b      	add	r3, r7
 800c03a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c03e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c040:	3301      	adds	r3, #1
 800c042:	643b      	str	r3, [r7, #64]	@ 0x40
 800c044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c046:	2b03      	cmp	r3, #3
 800c048:	d9dd      	bls.n	800c006 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c04a:	2300      	movs	r3, #0
 800c04c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <find_volume+0x13e>
 800c054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c056:	3b01      	subs	r3, #1
 800c058:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	3358      	adds	r3, #88	@ 0x58
 800c060:	443b      	add	r3, r7
 800c062:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c066:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d005      	beq.n	800c07a <find_volume+0x15e>
 800c06e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c070:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c072:	f7ff fefd 	bl	800be70 <check_fs>
 800c076:	4603      	mov	r3, r0
 800c078:	e000      	b.n	800c07c <find_volume+0x160>
 800c07a:	2303      	movs	r3, #3
 800c07c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c080:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c084:	2b01      	cmp	r3, #1
 800c086:	d905      	bls.n	800c094 <find_volume+0x178>
 800c088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c08a:	3301      	adds	r3, #1
 800c08c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c090:	2b03      	cmp	r3, #3
 800c092:	d9e2      	bls.n	800c05a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c098:	2b04      	cmp	r3, #4
 800c09a:	d101      	bne.n	800c0a0 <find_volume+0x184>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e17e      	b.n	800c39e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c0a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d901      	bls.n	800c0ac <find_volume+0x190>
 800c0a8:	230d      	movs	r3, #13
 800c0aa:	e178      	b.n	800c39e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ae:	3330      	adds	r3, #48	@ 0x30
 800c0b0:	330b      	adds	r3, #11
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fc5a 	bl	800a96c <ld_word>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0be:	d001      	beq.n	800c0c4 <find_volume+0x1a8>
 800c0c0:	230d      	movs	r3, #13
 800c0c2:	e16c      	b.n	800c39e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	3330      	adds	r3, #48	@ 0x30
 800c0c8:	3316      	adds	r3, #22
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fc4e 	bl	800a96c <ld_word>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <find_volume+0x1cc>
 800c0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0dc:	3330      	adds	r3, #48	@ 0x30
 800c0de:	3324      	adds	r3, #36	@ 0x24
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fe fc5b 	bl	800a99c <ld_dword>
 800c0e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	789b      	ldrb	r3, [r3, #2]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d005      	beq.n	800c10c <find_volume+0x1f0>
 800c100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c102:	789b      	ldrb	r3, [r3, #2]
 800c104:	2b02      	cmp	r3, #2
 800c106:	d001      	beq.n	800c10c <find_volume+0x1f0>
 800c108:	230d      	movs	r3, #13
 800c10a:	e148      	b.n	800c39e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	789b      	ldrb	r3, [r3, #2]
 800c110:	461a      	mov	r2, r3
 800c112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c114:	fb02 f303 	mul.w	r3, r2, r3
 800c118:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c120:	461a      	mov	r2, r3
 800c122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c124:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <find_volume+0x224>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c130:	895b      	ldrh	r3, [r3, #10]
 800c132:	461a      	mov	r2, r3
 800c134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c136:	895b      	ldrh	r3, [r3, #10]
 800c138:	3b01      	subs	r3, #1
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <find_volume+0x228>
 800c140:	230d      	movs	r3, #13
 800c142:	e12c      	b.n	800c39e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	3330      	adds	r3, #48	@ 0x30
 800c148:	3311      	adds	r3, #17
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fc0e 	bl	800a96c <ld_word>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c156:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	b29b      	uxth	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <find_volume+0x24e>
 800c166:	230d      	movs	r3, #13
 800c168:	e119      	b.n	800c39e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16c:	3330      	adds	r3, #48	@ 0x30
 800c16e:	3313      	adds	r3, #19
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fbfb 	bl	800a96c <ld_word>
 800c176:	4603      	mov	r3, r0
 800c178:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c17a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <find_volume+0x272>
 800c180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c182:	3330      	adds	r3, #48	@ 0x30
 800c184:	3320      	adds	r3, #32
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fc08 	bl	800a99c <ld_dword>
 800c18c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c190:	3330      	adds	r3, #48	@ 0x30
 800c192:	330e      	adds	r3, #14
 800c194:	4618      	mov	r0, r3
 800c196:	f7fe fbe9 	bl	800a96c <ld_word>
 800c19a:	4603      	mov	r3, r0
 800c19c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c19e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <find_volume+0x28c>
 800c1a4:	230d      	movs	r3, #13
 800c1a6:	e0fa      	b.n	800c39e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c1a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ac:	4413      	add	r3, r2
 800c1ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1b0:	8912      	ldrh	r2, [r2, #8]
 800c1b2:	0912      	lsrs	r2, r2, #4
 800c1b4:	b292      	uxth	r2, r2
 800c1b6:	4413      	add	r3, r2
 800c1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d204      	bcs.n	800c1cc <find_volume+0x2b0>
 800c1c2:	230d      	movs	r3, #13
 800c1c4:	e0eb      	b.n	800c39e <find_volume+0x482>
 800c1c6:	bf00      	nop
 800c1c8:	20001af8 	.word	0x20001af8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c1cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1d4:	8952      	ldrh	r2, [r2, #10]
 800c1d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <find_volume+0x2ca>
 800c1e2:	230d      	movs	r3, #13
 800c1e4:	e0db      	b.n	800c39e <find_volume+0x482>
		fmt = FS_FAT32;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d802      	bhi.n	800c1fc <find_volume+0x2e0>
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c202:	4293      	cmp	r3, r2
 800c204:	d802      	bhi.n	800c20c <find_volume+0x2f0>
 800c206:	2301      	movs	r3, #1
 800c208:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	1c9a      	adds	r2, r3, #2
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c216:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c218:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c21a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c21c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c21e:	441a      	add	r2, r3
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c228:	441a      	add	r2, r3
 800c22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c22e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c232:	2b03      	cmp	r3, #3
 800c234:	d11e      	bne.n	800c274 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	3330      	adds	r3, #48	@ 0x30
 800c23a:	332a      	adds	r3, #42	@ 0x2a
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe fb95 	bl	800a96c <ld_word>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <find_volume+0x330>
 800c248:	230d      	movs	r3, #13
 800c24a:	e0a8      	b.n	800c39e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24e:	891b      	ldrh	r3, [r3, #8]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <find_volume+0x33c>
 800c254:	230d      	movs	r3, #13
 800c256:	e0a2      	b.n	800c39e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25a:	3330      	adds	r3, #48	@ 0x30
 800c25c:	332c      	adds	r3, #44	@ 0x2c
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fb9c 	bl	800a99c <ld_dword>
 800c264:	4602      	mov	r2, r0
 800c266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c268:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	647b      	str	r3, [r7, #68]	@ 0x44
 800c272:	e01f      	b.n	800c2b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c276:	891b      	ldrh	r3, [r3, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <find_volume+0x364>
 800c27c:	230d      	movs	r3, #13
 800c27e:	e08e      	b.n	800c39e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c282:	6a1a      	ldr	r2, [r3, #32]
 800c284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c286:	441a      	add	r2, r3
 800c288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c28c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c290:	2b02      	cmp	r3, #2
 800c292:	d103      	bne.n	800c29c <find_volume+0x380>
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	e00a      	b.n	800c2b2 <find_volume+0x396>
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	695a      	ldr	r2, [r3, #20]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	4413      	add	r3, r2
 800c2a6:	085a      	lsrs	r2, r3, #1
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c2b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b6:	699a      	ldr	r2, [r3, #24]
 800c2b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c2be:	0a5b      	lsrs	r3, r3, #9
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d201      	bcs.n	800c2c8 <find_volume+0x3ac>
 800c2c4:	230d      	movs	r3, #13
 800c2c6:	e06a      	b.n	800c39e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2ce:	611a      	str	r2, [r3, #16]
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d2:	691a      	ldr	r2, [r3, #16]
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2da:	2280      	movs	r2, #128	@ 0x80
 800c2dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c2de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d149      	bne.n	800c37a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e8:	3330      	adds	r3, #48	@ 0x30
 800c2ea:	3330      	adds	r3, #48	@ 0x30
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fb3d 	bl	800a96c <ld_word>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d140      	bne.n	800c37a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c300:	f7fe fde4 	bl	800aecc <move_window>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d137      	bne.n	800c37a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	2200      	movs	r2, #0
 800c30e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c312:	3330      	adds	r3, #48	@ 0x30
 800c314:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fb27 	bl	800a96c <ld_word>
 800c31e:	4603      	mov	r3, r0
 800c320:	461a      	mov	r2, r3
 800c322:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c326:	429a      	cmp	r2, r3
 800c328:	d127      	bne.n	800c37a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32c:	3330      	adds	r3, #48	@ 0x30
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe fb34 	bl	800a99c <ld_dword>
 800c334:	4603      	mov	r3, r0
 800c336:	4a1c      	ldr	r2, [pc, #112]	@ (800c3a8 <find_volume+0x48c>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d11e      	bne.n	800c37a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	3330      	adds	r3, #48	@ 0x30
 800c340:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe fb29 	bl	800a99c <ld_dword>
 800c34a:	4603      	mov	r3, r0
 800c34c:	4a17      	ldr	r2, [pc, #92]	@ (800c3ac <find_volume+0x490>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d113      	bne.n	800c37a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c354:	3330      	adds	r3, #48	@ 0x30
 800c356:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe fb1e 	bl	800a99c <ld_dword>
 800c360:	4602      	mov	r2, r0
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c368:	3330      	adds	r3, #48	@ 0x30
 800c36a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fb14 	bl	800a99c <ld_dword>
 800c374:	4602      	mov	r2, r0
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c380:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c382:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b0 <find_volume+0x494>)
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	b29a      	uxth	r2, r3
 800c38a:	4b09      	ldr	r3, [pc, #36]	@ (800c3b0 <find_volume+0x494>)
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	4b08      	ldr	r3, [pc, #32]	@ (800c3b0 <find_volume+0x494>)
 800c390:	881a      	ldrh	r2, [r3, #0]
 800c392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c394:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c396:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c398:	f7fe fd30 	bl	800adfc <clear_lock>
#endif
	return FR_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3758      	adds	r7, #88	@ 0x58
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	41615252 	.word	0x41615252
 800c3ac:	61417272 	.word	0x61417272
 800c3b0:	20001b00 	.word	0x20001b00

0800c3b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c3be:	2309      	movs	r3, #9
 800c3c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d01c      	beq.n	800c402 <validate+0x4e>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d018      	beq.n	800c402 <validate+0x4e>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d013      	beq.n	800c402 <validate+0x4e>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	889a      	ldrh	r2, [r3, #4]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	88db      	ldrh	r3, [r3, #6]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d10c      	bne.n	800c402 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fa14 	bl	800a81c <disk_status>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <validate+0x4e>
			res = FR_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <validate+0x5a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	e000      	b.n	800c410 <validate+0x5c>
 800c40e:	2300      	movs	r3, #0
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	6013      	str	r3, [r2, #0]
	return res;
 800c414:	7bfb      	ldrb	r3, [r7, #15]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c432:	f107 0310 	add.w	r3, r7, #16
 800c436:	4618      	mov	r0, r3
 800c438:	f7ff fcd5 	bl	800bde6 <get_ldnumber>
 800c43c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	2b00      	cmp	r3, #0
 800c442:	da01      	bge.n	800c448 <f_mount+0x28>
 800c444:	230b      	movs	r3, #11
 800c446:	e02b      	b.n	800c4a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c448:	4a17      	ldr	r2, [pc, #92]	@ (800c4a8 <f_mount+0x88>)
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c450:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d005      	beq.n	800c464 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c458:	69b8      	ldr	r0, [r7, #24]
 800c45a:	f7fe fccf 	bl	800adfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	2200      	movs	r2, #0
 800c462:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	490d      	ldr	r1, [pc, #52]	@ (800c4a8 <f_mount+0x88>)
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <f_mount+0x66>
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d001      	beq.n	800c48a <f_mount+0x6a>
 800c486:	2300      	movs	r3, #0
 800c488:	e00a      	b.n	800c4a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c48a:	f107 010c 	add.w	r1, r7, #12
 800c48e:	f107 0308 	add.w	r3, r7, #8
 800c492:	2200      	movs	r2, #0
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fd41 	bl	800bf1c <find_volume>
 800c49a:	4603      	mov	r3, r0
 800c49c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3720      	adds	r7, #32
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	20001af8 	.word	0x20001af8

0800c4ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b098      	sub	sp, #96	@ 0x60
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <f_open+0x18>
 800c4c0:	2309      	movs	r3, #9
 800c4c2:	e1a9      	b.n	800c818 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c4cc:	79fa      	ldrb	r2, [r7, #7]
 800c4ce:	f107 0110 	add.w	r1, r7, #16
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fd20 	bl	800bf1c <find_volume>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c4e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f040 818d 	bne.w	800c806 <f_open+0x35a>
		dj.obj.fs = fs;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	f107 0314 	add.w	r3, r7, #20
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff fc03 	bl	800bd04 <follow_path>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c504:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d118      	bne.n	800c53e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c50c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c510:	b25b      	sxtb	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	da03      	bge.n	800c51e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c516:	2306      	movs	r3, #6
 800c518:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c51c:	e00f      	b.n	800c53e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	2b01      	cmp	r3, #1
 800c522:	bf8c      	ite	hi
 800c524:	2301      	movhi	r3, #1
 800c526:	2300      	movls	r3, #0
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	461a      	mov	r2, r3
 800c52c:	f107 0314 	add.w	r3, r7, #20
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fb1a 	bl	800ab6c <chk_lock>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	f003 031c 	and.w	r3, r3, #28
 800c544:	2b00      	cmp	r3, #0
 800c546:	d07f      	beq.n	800c648 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c548:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c550:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c554:	2b04      	cmp	r3, #4
 800c556:	d10e      	bne.n	800c576 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c558:	f7fe fb64 	bl	800ac24 <enq_lock>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d006      	beq.n	800c570 <f_open+0xc4>
 800c562:	f107 0314 	add.w	r3, r7, #20
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff faa5 	bl	800bab6 <dir_register>
 800c56c:	4603      	mov	r3, r0
 800c56e:	e000      	b.n	800c572 <f_open+0xc6>
 800c570:	2312      	movs	r3, #18
 800c572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	f043 0308 	orr.w	r3, r3, #8
 800c57c:	71fb      	strb	r3, [r7, #7]
 800c57e:	e010      	b.n	800c5a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c580:	7ebb      	ldrb	r3, [r7, #26]
 800c582:	f003 0311 	and.w	r3, r3, #17
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <f_open+0xe6>
					res = FR_DENIED;
 800c58a:	2307      	movs	r3, #7
 800c58c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c590:	e007      	b.n	800c5a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <f_open+0xf6>
 800c59c:	2308      	movs	r3, #8
 800c59e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c5a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d168      	bne.n	800c67c <f_open+0x1d0>
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	f003 0308 	and.w	r3, r3, #8
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d063      	beq.n	800c67c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c5b4:	f7fe f9d2 	bl	800a95c <get_fattime>
 800c5b8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5bc:	330e      	adds	r3, #14
 800c5be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fa29 	bl	800aa18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c8:	3316      	adds	r3, #22
 800c5ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe fa23 	bl	800aa18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	330b      	adds	r3, #11
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7ff f977 	bl	800b8d4 <ld_clust>
 800c5e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff f98f 	bl	800b912 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f6:	331c      	adds	r3, #28
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fa0c 	bl	800aa18 <st_dword>
					fs->wflag = 1;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2201      	movs	r2, #1
 800c604:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d037      	beq.n	800c67c <f_open+0x1d0>
						dw = fs->winsect;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c610:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c612:	f107 0314 	add.w	r3, r7, #20
 800c616:	2200      	movs	r2, #0
 800c618:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe fea2 	bl	800b364 <remove_chain>
 800c620:	4603      	mov	r3, r0
 800c622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d126      	bne.n	800c67c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fc4a 	bl	800aecc <move_window>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c642:	3a01      	subs	r2, #1
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	e019      	b.n	800c67c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c648:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d115      	bne.n	800c67c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c650:	7ebb      	ldrb	r3, [r7, #26]
 800c652:	f003 0310 	and.w	r3, r3, #16
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c65a:	2304      	movs	r3, #4
 800c65c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c660:	e00c      	b.n	800c67c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	f003 0302 	and.w	r3, r3, #2
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <f_open+0x1d0>
 800c66c:	7ebb      	ldrb	r3, [r7, #26]
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <f_open+0x1d0>
						res = FR_DENIED;
 800c676:	2307      	movs	r3, #7
 800c678:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c67c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d126      	bne.n	800c6d2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c684:	79fb      	ldrb	r3, [r7, #7]
 800c686:	f003 0308 	and.w	r3, r3, #8
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c68e:	79fb      	ldrb	r3, [r7, #7]
 800c690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c694:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c69e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6a4:	79fb      	ldrb	r3, [r7, #7]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	bf8c      	ite	hi
 800c6aa:	2301      	movhi	r3, #1
 800c6ac:	2300      	movls	r3, #0
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f107 0314 	add.w	r3, r7, #20
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fad5 	bl	800ac68 <inc_lock>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <f_open+0x226>
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 8095 	bne.w	800c806 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff f8f6 	bl	800b8d4 <ld_clust>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f0:	331c      	adds	r3, #28
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe f952 	bl	800a99c <ld_dword>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	88da      	ldrh	r2, [r3, #6]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	79fa      	ldrb	r2, [r7, #7]
 800c716:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3330      	adds	r3, #48	@ 0x30
 800c72e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c732:	2100      	movs	r1, #0
 800c734:	4618      	mov	r0, r3
 800c736:	f7fe f9bc 	bl	800aab2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	f003 0320 	and.w	r3, r3, #32
 800c740:	2b00      	cmp	r3, #0
 800c742:	d060      	beq.n	800c806 <f_open+0x35a>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d05c      	beq.n	800c806 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	895b      	ldrh	r3, [r3, #10]
 800c758:	025b      	lsls	r3, r3, #9
 800c75a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	657b      	str	r3, [r7, #84]	@ 0x54
 800c768:	e016      	b.n	800c798 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe fc67 	bl	800b042 <get_fat>
 800c774:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d802      	bhi.n	800c782 <f_open+0x2d6>
 800c77c:	2302      	movs	r3, #2
 800c77e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c788:	d102      	bne.n	800c790 <f_open+0x2e4>
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	657b      	str	r3, [r7, #84]	@ 0x54
 800c798:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d103      	bne.n	800c7a8 <f_open+0x2fc>
 800c7a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d8e0      	bhi.n	800c76a <f_open+0x2be>
				}
				fp->clust = clst;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c7ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d127      	bne.n	800c806 <f_open+0x35a>
 800c7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d022      	beq.n	800c806 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fe fc1d 	bl	800b004 <clust2sect>
 800c7ca:	6478      	str	r0, [r7, #68]	@ 0x44
 800c7cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d103      	bne.n	800c7da <f_open+0x32e>
						res = FR_INT_ERR;
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c7d8:	e015      	b.n	800c806 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7dc:	0a5a      	lsrs	r2, r3, #9
 800c7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	7858      	ldrb	r0, [r3, #1]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6a1a      	ldr	r2, [r3, #32]
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f7fe f853 	bl	800a8a0 <disk_read>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <f_open+0x35a>
 800c800:	2301      	movs	r3, #1
 800c802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c806:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <f_open+0x368>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c814:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3760      	adds	r7, #96	@ 0x60
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08e      	sub	sp, #56	@ 0x38
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f107 0214 	add.w	r2, r7, #20
 800c83e:	4611      	mov	r1, r2
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff fdb7 	bl	800c3b4 <validate>
 800c846:	4603      	mov	r3, r0
 800c848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c84c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c850:	2b00      	cmp	r3, #0
 800c852:	d107      	bne.n	800c864 <f_read+0x44>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	7d5b      	ldrb	r3, [r3, #21]
 800c858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c85c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <f_read+0x4a>
 800c864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c868:	e115      	b.n	800ca96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	7d1b      	ldrb	r3, [r3, #20]
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <f_read+0x5a>
 800c876:	2307      	movs	r3, #7
 800c878:	e10d      	b.n	800ca96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	6a3b      	ldr	r3, [r7, #32]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	f240 80fe 	bls.w	800ca8c <f_read+0x26c>
 800c890:	6a3b      	ldr	r3, [r7, #32]
 800c892:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c894:	e0fa      	b.n	800ca8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f040 80c6 	bne.w	800ca30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	0a5b      	lsrs	r3, r3, #9
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	8952      	ldrh	r2, [r2, #10]
 800c8ae:	3a01      	subs	r2, #1
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d12f      	bne.n	800c91a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d103      	bne.n	800c8ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8c8:	e013      	b.n	800c8f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f7fe fe40 	bl	800b55e <clmt_clust>
 800c8de:	6338      	str	r0, [r7, #48]	@ 0x30
 800c8e0:	e007      	b.n	800c8f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7fe fba9 	bl	800b042 <get_fat>
 800c8f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d804      	bhi.n	800c902 <f_read+0xe2>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	755a      	strb	r2, [r3, #21]
 800c8fe:	2302      	movs	r3, #2
 800c900:	e0c9      	b.n	800ca96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c908:	d104      	bne.n	800c914 <f_read+0xf4>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2201      	movs	r2, #1
 800c90e:	755a      	strb	r2, [r3, #21]
 800c910:	2301      	movs	r3, #1
 800c912:	e0c0      	b.n	800ca96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c918:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	69db      	ldr	r3, [r3, #28]
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fe fb6e 	bl	800b004 <clust2sect>
 800c928:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d104      	bne.n	800c93a <f_read+0x11a>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2202      	movs	r2, #2
 800c934:	755a      	strb	r2, [r3, #21]
 800c936:	2302      	movs	r3, #2
 800c938:	e0ad      	b.n	800ca96 <f_read+0x276>
			sect += csect;
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	4413      	add	r3, r2
 800c940:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	0a5b      	lsrs	r3, r3, #9
 800c946:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d039      	beq.n	800c9c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c94e:	69fa      	ldr	r2, [r7, #28]
 800c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c952:	4413      	add	r3, r2
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	8952      	ldrh	r2, [r2, #10]
 800c958:	4293      	cmp	r3, r2
 800c95a:	d905      	bls.n	800c968 <f_read+0x148>
					cc = fs->csize - csect;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	895b      	ldrh	r3, [r3, #10]
 800c960:	461a      	mov	r2, r3
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	7858      	ldrb	r0, [r3, #1]
 800c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c972:	f7fd ff95 	bl	800a8a0 <disk_read>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d004      	beq.n	800c986 <f_read+0x166>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2201      	movs	r2, #1
 800c980:	755a      	strb	r2, [r3, #21]
 800c982:	2301      	movs	r3, #1
 800c984:	e087      	b.n	800ca96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	7d1b      	ldrb	r3, [r3, #20]
 800c98a:	b25b      	sxtb	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	da14      	bge.n	800c9ba <f_read+0x19a>
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6a1a      	ldr	r2, [r3, #32]
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d90d      	bls.n	800c9ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6a1a      	ldr	r2, [r3, #32]
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	025b      	lsls	r3, r3, #9
 800c9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9aa:	18d0      	adds	r0, r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3330      	adds	r3, #48	@ 0x30
 800c9b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f7fe f85b 	bl	800aa70 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	025b      	lsls	r3, r3, #9
 800c9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c9c0:	e050      	b.n	800ca64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d02e      	beq.n	800ca2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	7d1b      	ldrb	r3, [r3, #20]
 800c9d0:	b25b      	sxtb	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	da18      	bge.n	800ca08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	7858      	ldrb	r0, [r3, #1]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6a1a      	ldr	r2, [r3, #32]
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	f7fd ff7b 	bl	800a8e0 <disk_write>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d004      	beq.n	800c9fa <f_read+0x1da>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	755a      	strb	r2, [r3, #21]
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e04d      	b.n	800ca96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	7d1b      	ldrb	r3, [r3, #20]
 800c9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	7858      	ldrb	r0, [r3, #1]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca12:	2301      	movs	r3, #1
 800ca14:	69ba      	ldr	r2, [r7, #24]
 800ca16:	f7fd ff43 	bl	800a8a0 <disk_read>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d004      	beq.n	800ca2a <f_read+0x20a>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2201      	movs	r2, #1
 800ca24:	755a      	strb	r2, [r3, #21]
 800ca26:	2301      	movs	r3, #1
 800ca28:	e035      	b.n	800ca96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ca3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d901      	bls.n	800ca4a <f_read+0x22a>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca58:	4413      	add	r3, r2
 800ca5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca60:	f7fe f806 	bl	800aa70 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ca64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca68:	4413      	add	r3, r2
 800ca6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	699a      	ldr	r2, [r3, #24]
 800ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca72:	441a      	add	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	619a      	str	r2, [r3, #24]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	441a      	add	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f47f af01 	bne.w	800c896 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3738      	adds	r7, #56	@ 0x38
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f107 0208 	add.w	r2, r7, #8
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff fc80 	bl	800c3b4 <validate>
 800cab4:	4603      	mov	r3, r0
 800cab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d168      	bne.n	800cb90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7d1b      	ldrb	r3, [r3, #20]
 800cac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d062      	beq.n	800cb90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7d1b      	ldrb	r3, [r3, #20]
 800cace:	b25b      	sxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	da15      	bge.n	800cb00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	7858      	ldrb	r0, [r3, #1]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	2301      	movs	r3, #1
 800cae4:	f7fd fefc 	bl	800a8e0 <disk_write>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <f_sync+0x54>
 800caee:	2301      	movs	r3, #1
 800caf0:	e04f      	b.n	800cb92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7d1b      	ldrb	r3, [r3, #20]
 800caf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cb00:	f7fd ff2c 	bl	800a95c <get_fattime>
 800cb04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	f7fe f9dc 	bl	800aecc <move_window>
 800cb14:	4603      	mov	r3, r0
 800cb16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d138      	bne.n	800cb90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	330b      	adds	r3, #11
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	330b      	adds	r3, #11
 800cb2e:	f042 0220 	orr.w	r2, r2, #32
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	f7fe fee6 	bl	800b912 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 021c 	add.w	r2, r3, #28
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fd ff60 	bl	800aa18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3316      	adds	r3, #22
 800cb5c:	6939      	ldr	r1, [r7, #16]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fd ff5a 	bl	800aa18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3312      	adds	r3, #18
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fd ff39 	bl	800a9e2 <st_word>
					fs->wflag = 1;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2201      	movs	r2, #1
 800cb74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe f9d5 	bl	800af28 <sync_fs>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7d1b      	ldrb	r3, [r3, #20]
 800cb86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff ff7b 	bl	800ca9e <f_sync>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d118      	bne.n	800cbe4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f107 0208 	add.w	r2, r7, #8
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff fbfa 	bl	800c3b4 <validate>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe f8d8 	bl	800ad84 <dec_lock>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d102      	bne.n	800cbe4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b090      	sub	sp, #64	@ 0x40
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f107 0208 	add.w	r2, r7, #8
 800cbfe:	4611      	mov	r1, r2
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fbd7 	bl	800c3b4 <validate>
 800cc06:	4603      	mov	r3, r0
 800cc08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cc0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d103      	bne.n	800cc1c <f_lseek+0x2e>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7d5b      	ldrb	r3, [r3, #21]
 800cc18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cc1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <f_lseek+0x3c>
 800cc24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc28:	e1e6      	b.n	800cff8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80d1 	beq.w	800cdd6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc3a:	d15a      	bne.n	800ccf2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc40:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	1d1a      	adds	r2, r3, #4
 800cc46:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d03a      	beq.n	800ccd2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	613b      	str	r3, [r7, #16]
 800cc60:	2300      	movs	r3, #0
 800cc62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc66:	3302      	adds	r3, #2
 800cc68:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc70:	3301      	adds	r3, #1
 800cc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe f9e2 	bl	800b042 <get_fat>
 800cc7e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d804      	bhi.n	800cc90 <f_lseek+0xa2>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2202      	movs	r2, #2
 800cc8a:	755a      	strb	r2, [r3, #21]
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e1b3      	b.n	800cff8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc96:	d104      	bne.n	800cca2 <f_lseek+0xb4>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	755a      	strb	r2, [r3, #21]
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e1aa      	b.n	800cff8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d0de      	beq.n	800cc6a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ccac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d809      	bhi.n	800ccc8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	1d1a      	adds	r2, r3, #4
 800ccb8:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc0:	1d1a      	adds	r2, r3, #4
 800ccc2:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d3c4      	bcc.n	800cc5c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccd8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ccda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d803      	bhi.n	800ccea <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	e184      	b.n	800cff4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ccea:	2311      	movs	r3, #17
 800ccec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ccf0:	e180      	b.n	800cff4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d902      	bls.n	800cd02 <f_lseek+0x114>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 8172 	beq.w	800cff4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7fe fc21 	bl	800b55e <clmt_clust>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	f7fe f96a 	bl	800b004 <clust2sect>
 800cd30:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <f_lseek+0x154>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	755a      	strb	r2, [r3, #21]
 800cd3e:	2302      	movs	r3, #2
 800cd40:	e15a      	b.n	800cff8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	0a5b      	lsrs	r3, r3, #9
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	8952      	ldrh	r2, [r2, #10]
 800cd4c:	3a01      	subs	r2, #1
 800cd4e:	4013      	ands	r3, r2
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	4413      	add	r3, r2
 800cd54:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f000 8148 	beq.w	800cff4 <f_lseek+0x406>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	69ba      	ldr	r2, [r7, #24]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	f000 8142 	beq.w	800cff4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d1b      	ldrb	r3, [r3, #20]
 800cd74:	b25b      	sxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da18      	bge.n	800cdac <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	7858      	ldrb	r0, [r3, #1]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a1a      	ldr	r2, [r3, #32]
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f7fd fda9 	bl	800a8e0 <disk_write>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <f_lseek+0x1b0>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	755a      	strb	r2, [r3, #21]
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e12c      	b.n	800cff8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7d1b      	ldrb	r3, [r3, #20]
 800cda2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	7858      	ldrb	r0, [r3, #1]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	69ba      	ldr	r2, [r7, #24]
 800cdba:	f7fd fd71 	bl	800a8a0 <disk_read>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d004      	beq.n	800cdce <f_lseek+0x1e0>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	755a      	strb	r2, [r3, #21]
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e114      	b.n	800cff8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	621a      	str	r2, [r3, #32]
 800cdd4:	e10e      	b.n	800cff4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d908      	bls.n	800cdf2 <f_lseek+0x204>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7d1b      	ldrb	r3, [r3, #20]
 800cde4:	f003 0302 	and.w	r3, r3, #2
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce00:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 80a7 	beq.w	800cf58 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	895b      	ldrh	r3, [r3, #10]
 800ce0e:	025b      	lsls	r3, r3, #9
 800ce10:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01b      	beq.n	800ce50 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	1e5a      	subs	r2, r3, #1
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	1e59      	subs	r1, r3, #1
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d30f      	bcc.n	800ce50 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	1e5a      	subs	r2, r3, #1
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	425b      	negs	r3, r3
 800ce38:	401a      	ands	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce4e:	e022      	b.n	800ce96 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ce56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d119      	bne.n	800ce90 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2100      	movs	r1, #0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fae4 	bl	800b42e <create_chain>
 800ce66:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d104      	bne.n	800ce78 <f_lseek+0x28a>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2202      	movs	r2, #2
 800ce72:	755a      	strb	r2, [r3, #21]
 800ce74:	2302      	movs	r3, #2
 800ce76:	e0bf      	b.n	800cff8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce7e:	d104      	bne.n	800ce8a <f_lseek+0x29c>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	755a      	strb	r2, [r3, #21]
 800ce86:	2301      	movs	r3, #1
 800ce88:	e0b6      	b.n	800cff8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce8e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce94:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ce96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d05d      	beq.n	800cf58 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ce9c:	e03a      	b.n	800cf14 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	603b      	str	r3, [r7, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699a      	ldr	r2, [r3, #24]
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	441a      	add	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	7d1b      	ldrb	r3, [r3, #20]
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00b      	beq.n	800ced6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fab3 	bl	800b42e <create_chain>
 800cec8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ceca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d108      	bne.n	800cee2 <f_lseek+0x2f4>
							ofs = 0; break;
 800ced0:	2300      	movs	r3, #0
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	e022      	b.n	800cf1c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe f8b1 	bl	800b042 <get_fat>
 800cee0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cee8:	d104      	bne.n	800cef4 <f_lseek+0x306>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	755a      	strb	r2, [r3, #21]
 800cef0:	2301      	movs	r3, #1
 800cef2:	e081      	b.n	800cff8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d904      	bls.n	800cf04 <f_lseek+0x316>
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d304      	bcc.n	800cf0e <f_lseek+0x320>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2202      	movs	r2, #2
 800cf08:	755a      	strb	r2, [r3, #21]
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e074      	b.n	800cff8 <f_lseek+0x40a>
					fp->clust = clst;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf12:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d8c0      	bhi.n	800ce9e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	699a      	ldr	r2, [r3, #24]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	441a      	add	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d012      	beq.n	800cf58 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe f864 	bl	800b004 <clust2sect>
 800cf3c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cf3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <f_lseek+0x360>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2202      	movs	r2, #2
 800cf48:	755a      	strb	r2, [r3, #21]
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e054      	b.n	800cff8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	0a5b      	lsrs	r3, r3, #9
 800cf52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf54:	4413      	add	r3, r2
 800cf56:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d90a      	bls.n	800cf7a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d036      	beq.n	800cff4 <f_lseek+0x406>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d031      	beq.n	800cff4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7d1b      	ldrb	r3, [r3, #20]
 800cf94:	b25b      	sxtb	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	da18      	bge.n	800cfcc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	7858      	ldrb	r0, [r3, #1]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a1a      	ldr	r2, [r3, #32]
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f7fd fc99 	bl	800a8e0 <disk_write>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d004      	beq.n	800cfbe <f_lseek+0x3d0>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	755a      	strb	r2, [r3, #21]
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e01c      	b.n	800cff8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7d1b      	ldrb	r3, [r3, #20]
 800cfc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	7858      	ldrb	r0, [r3, #1]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfda:	f7fd fc61 	bl	800a8a0 <disk_read>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <f_lseek+0x400>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	755a      	strb	r2, [r3, #21]
 800cfea:	2301      	movs	r3, #1
 800cfec:	e004      	b.n	800cff8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cff2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cff4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3740      	adds	r7, #64	@ 0x40
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <f_opendir+0x14>
 800d010:	2309      	movs	r3, #9
 800d012:	e064      	b.n	800d0de <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d018:	f107 010c 	add.w	r1, r7, #12
 800d01c:	463b      	mov	r3, r7
 800d01e:	2200      	movs	r2, #0
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe ff7b 	bl	800bf1c <find_volume>
 800d026:	4603      	mov	r3, r0
 800d028:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d14f      	bne.n	800d0d0 <f_opendir+0xd0>
		obj->fs = fs;
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	4619      	mov	r1, r3
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7fe fe62 	bl	800bd04 <follow_path>
 800d040:	4603      	mov	r3, r0
 800d042:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d13d      	bne.n	800d0c6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d050:	b25b      	sxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	db12      	blt.n	800d07c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	799b      	ldrb	r3, [r3, #6]
 800d05a:	f003 0310 	and.w	r3, r3, #16
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00a      	beq.n	800d078 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	4619      	mov	r1, r3
 800d06a:	4610      	mov	r0, r2
 800d06c:	f7fe fc32 	bl	800b8d4 <ld_clust>
 800d070:	4602      	mov	r2, r0
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	609a      	str	r2, [r3, #8]
 800d076:	e001      	b.n	800d07c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d078:	2305      	movs	r3, #5
 800d07a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d121      	bne.n	800d0c6 <f_opendir+0xc6>
				obj->id = fs->id;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	88da      	ldrh	r2, [r3, #6]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d08a:	2100      	movs	r1, #0
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7fe fa9a 	bl	800b5c6 <dir_sdi>
 800d092:	4603      	mov	r3, r0
 800d094:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d114      	bne.n	800d0c6 <f_opendir+0xc6>
					if (obj->sclust) {
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00d      	beq.n	800d0c0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7fd fdde 	bl	800ac68 <inc_lock>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <f_opendir+0xc6>
 800d0ba:	2312      	movs	r3, #18
 800d0bc:	75fb      	strb	r3, [r7, #23]
 800d0be:	e002      	b.n	800d0c6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d101      	bne.n	800d0d0 <f_opendir+0xd0>
 800d0cc:	2305      	movs	r3, #5
 800d0ce:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <f_opendir+0xdc>
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f107 0208 	add.w	r2, r7, #8
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff f95c 	bl	800c3b4 <validate>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d110      	bne.n	800d128 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	4618      	mov	r0, r3
 800d114:	f7fd fe36 	bl	800ad84 <dec_lock>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d128:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f107 0208 	add.w	r2, r7, #8
 800d142:	4611      	mov	r1, r2
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff f935 	bl	800c3b4 <validate>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d14e:	7bfb      	ldrb	r3, [r7, #15]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d126      	bne.n	800d1a2 <f_readdir+0x70>
		if (!fno) {
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d15a:	2100      	movs	r1, #0
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7fe fa32 	bl	800b5c6 <dir_sdi>
 800d162:	4603      	mov	r3, r0
 800d164:	73fb      	strb	r3, [r7, #15]
 800d166:	e01c      	b.n	800d1a2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7fe fbf1 	bl	800b952 <dir_read>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	2b04      	cmp	r3, #4
 800d178:	d101      	bne.n	800d17e <f_readdir+0x4c>
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10e      	bne.n	800d1a2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7fe fcc7 	bl	800bb1a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d18c:	2100      	movs	r1, #0
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7fe fa94 	bl	800b6bc <dir_next>
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	d101      	bne.n	800d1a2 <f_readdir+0x70>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b087      	sub	sp, #28
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1c2:	4b1f      	ldr	r3, [pc, #124]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1c4:	7b9b      	ldrb	r3, [r3, #14]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d831      	bhi.n	800d230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1cc:	4b1c      	ldr	r3, [pc, #112]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1ce:	7b9b      	ldrb	r3, [r3, #14]
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1da:	4b19      	ldr	r3, [pc, #100]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1dc:	7b9b      	ldrb	r3, [r3, #14]
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	4a17      	ldr	r2, [pc, #92]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1ea:	4b15      	ldr	r3, [pc, #84]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1ec:	7b9b      	ldrb	r3, [r3, #14]
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b13      	ldr	r3, [pc, #76]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1f4:	4413      	add	r3, r2
 800d1f6:	79fa      	ldrb	r2, [r7, #7]
 800d1f8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d1fa:	4b11      	ldr	r3, [pc, #68]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1fc:	7b9b      	ldrb	r3, [r3, #14]
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	b2d1      	uxtb	r1, r2
 800d204:	4a0e      	ldr	r2, [pc, #56]	@ (800d240 <FATFS_LinkDriverEx+0x94>)
 800d206:	7391      	strb	r1, [r2, #14]
 800d208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d20a:	7dbb      	ldrb	r3, [r7, #22]
 800d20c:	3330      	adds	r3, #48	@ 0x30
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	3301      	adds	r3, #1
 800d218:	223a      	movs	r2, #58	@ 0x3a
 800d21a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3302      	adds	r3, #2
 800d220:	222f      	movs	r2, #47	@ 0x2f
 800d222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3303      	adds	r3, #3
 800d228:	2200      	movs	r2, #0
 800d22a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d230:	7dfb      	ldrb	r3, [r7, #23]
}
 800d232:	4618      	mov	r0, r3
 800d234:	371c      	adds	r7, #28
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20001b24 	.word	0x20001b24

0800d244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d24e:	2200      	movs	r2, #0
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff ffaa 	bl	800d1ac <FATFS_LinkDriverEx>
 800d258:	4603      	mov	r3, r0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4613      	mov	r3, r2
 800d270:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800d278:	481c      	ldr	r0, [pc, #112]	@ (800d2ec <USBH_Init+0x88>)
 800d27a:	f003 ff9b 	bl	80111b4 <iprintf>
 800d27e:	481c      	ldr	r0, [pc, #112]	@ (800d2f0 <USBH_Init+0x8c>)
 800d280:	f003 ff98 	bl	80111b4 <iprintf>
 800d284:	200a      	movs	r0, #10
 800d286:	f003 ffa7 	bl	80111d8 <putchar>
    return USBH_FAIL;
 800d28a:	2302      	movs	r3, #2
 800d28c:	e029      	b.n	800d2e2 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	79fa      	ldrb	r2, [r7, #7]
 800d292:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
  phost->ClassNumber = 0U;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 f824 	bl	800d2f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_connected = 0U;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d003      	beq.n	800d2da <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7f4 fc08 	bl	8001af0 <USBH_LL_Init>

  return USBH_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	08012448 	.word	0x08012448
 800d2f0:	08012450 	.word	0x08012450

0800d2f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d300:	2300      	movs	r3, #0
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	e00a      	b.n	800d31c <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	2200      	movs	r2, #0
 800d314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3301      	adds	r3, #1
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b0f      	cmp	r3, #15
 800d320:	d9f1      	bls.n	800d306 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e009      	b.n	800d33c <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800d332:	2200      	movs	r2, #0
 800d334:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d342:	d3f1      	bcc.n	800d328 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  phost->Control.state = CTRL_SETUP;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2240      	movs	r2, #64	@ 0x40
 800d368:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  phost->device.RstCnt = 0U;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
  phost->device.EnumCnt = 0U;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	331c      	adds	r3, #28
 800d394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d398:	2100      	movs	r1, #0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f003 ffbd 	bl	801131a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800d3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f003 ffb4 	bl	801131a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f203 4326 	addw	r3, r3, #1062	@ 0x426
 800d3b8:	2212      	movs	r2, #18
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f003 ffac 	bl	801131a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 800d3c8:	223e      	movs	r2, #62	@ 0x3e
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f003 ffa4 	bl	801131a <memset>

  return USBH_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d020      	beq.n	800d432 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10f      	bne.n	800d41a <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800d400:	1c59      	adds	r1, r3, #1
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	f8c2 1480 	str.w	r1, [r2, #1152]	@ 0x480
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
 800d418:	e016      	b.n	800d448 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800d41a:	480e      	ldr	r0, [pc, #56]	@ (800d454 <USBH_RegisterClass+0x78>)
 800d41c:	f003 feca 	bl	80111b4 <iprintf>
 800d420:	480d      	ldr	r0, [pc, #52]	@ (800d458 <USBH_RegisterClass+0x7c>)
 800d422:	f003 fec7 	bl	80111b4 <iprintf>
 800d426:	200a      	movs	r0, #10
 800d428:	f003 fed6 	bl	80111d8 <putchar>
      status = USBH_FAIL;
 800d42c:	2302      	movs	r3, #2
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e00a      	b.n	800d448 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800d432:	4808      	ldr	r0, [pc, #32]	@ (800d454 <USBH_RegisterClass+0x78>)
 800d434:	f003 febe 	bl	80111b4 <iprintf>
 800d438:	4808      	ldr	r0, [pc, #32]	@ (800d45c <USBH_RegisterClass+0x80>)
 800d43a:	f003 febb 	bl	80111b4 <iprintf>
 800d43e:	200a      	movs	r0, #10
 800d440:	f003 feca 	bl	80111d8 <putchar>
    status = USBH_FAIL;
 800d444:	2302      	movs	r3, #2
 800d446:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d448:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	08012448 	.word	0x08012448
 800d458:	08012464 	.word	0x08012464
 800d45c:	08012480 	.word	0x08012480

0800d460 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800d476:	78fa      	ldrb	r2, [r7, #3]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d23c      	bcs.n	800d4f6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	78fa      	ldrb	r2, [r7, #3]
 800d480:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	4619      	mov	r1, r3
 800d488:	4823      	ldr	r0, [pc, #140]	@ (800d518 <USBH_SelectInterface+0xb8>)
 800d48a:	f003 fe93 	bl	80111b4 <iprintf>
 800d48e:	200a      	movs	r0, #10
 800d490:	f003 fea2 	bl	80111d8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	211a      	movs	r1, #26
 800d49a:	fb01 f303 	mul.w	r3, r1, r3
 800d49e:	4413      	add	r3, r2
 800d4a0:	f203 4347 	addw	r3, r3, #1095	@ 0x447
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	481c      	ldr	r0, [pc, #112]	@ (800d51c <USBH_SelectInterface+0xbc>)
 800d4aa:	f003 fe83 	bl	80111b4 <iprintf>
 800d4ae:	200a      	movs	r0, #10
 800d4b0:	f003 fe92 	bl	80111d8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800d4b4:	78fb      	ldrb	r3, [r7, #3]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	211a      	movs	r1, #26
 800d4ba:	fb01 f303 	mul.w	r3, r1, r3
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 6389 	add.w	r3, r3, #1096	@ 0x448
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4815      	ldr	r0, [pc, #84]	@ (800d520 <USBH_SelectInterface+0xc0>)
 800d4ca:	f003 fe73 	bl	80111b4 <iprintf>
 800d4ce:	200a      	movs	r0, #10
 800d4d0:	f003 fe82 	bl	80111d8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	211a      	movs	r1, #26
 800d4da:	fb01 f303 	mul.w	r3, r1, r3
 800d4de:	4413      	add	r3, r2
 800d4e0:	f203 4349 	addw	r3, r3, #1097	@ 0x449
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	480e      	ldr	r0, [pc, #56]	@ (800d524 <USBH_SelectInterface+0xc4>)
 800d4ea:	f003 fe63 	bl	80111b4 <iprintf>
 800d4ee:	200a      	movs	r0, #10
 800d4f0:	f003 fe72 	bl	80111d8 <putchar>
 800d4f4:	e00a      	b.n	800d50c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800d4f6:	480c      	ldr	r0, [pc, #48]	@ (800d528 <USBH_SelectInterface+0xc8>)
 800d4f8:	f003 fe5c 	bl	80111b4 <iprintf>
 800d4fc:	480b      	ldr	r0, [pc, #44]	@ (800d52c <USBH_SelectInterface+0xcc>)
 800d4fe:	f003 fe59 	bl	80111b4 <iprintf>
 800d502:	200a      	movs	r0, #10
 800d504:	f003 fe68 	bl	80111d8 <putchar>
    status = USBH_FAIL;
 800d508:	2302      	movs	r3, #2
 800d50a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	08012498 	.word	0x08012498
 800d51c:	080124b8 	.word	0x080124b8
 800d520:	080124c8 	.word	0x080124c8
 800d524:	080124d8 	.word	0x080124d8
 800d528:	08012448 	.word	0x08012448
 800d52c:	080124e8 	.word	0x080124e8

0800d530 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d530:	b480      	push	{r7}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	4608      	mov	r0, r1
 800d53a:	4611      	mov	r1, r2
 800d53c:	461a      	mov	r2, r3
 800d53e:	4603      	mov	r3, r0
 800d540:	70fb      	strb	r3, [r7, #3]
 800d542:	460b      	mov	r3, r1
 800d544:	70bb      	strb	r3, [r7, #2]
 800d546:	4613      	mov	r3, r2
 800d548:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d54a:	2300      	movs	r3, #0
 800d54c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 800d558:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d55a:	e025      	b.n	800d5a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	221a      	movs	r2, #26
 800d560:	fb02 f303 	mul.w	r3, r2, r3
 800d564:	3308      	adds	r3, #8
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	4413      	add	r3, r2
 800d56a:	3302      	adds	r3, #2
 800d56c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	795b      	ldrb	r3, [r3, #5]
 800d572:	78fa      	ldrb	r2, [r7, #3]
 800d574:	429a      	cmp	r2, r3
 800d576:	d002      	beq.n	800d57e <USBH_FindInterface+0x4e>
 800d578:	78fb      	ldrb	r3, [r7, #3]
 800d57a:	2bff      	cmp	r3, #255	@ 0xff
 800d57c:	d111      	bne.n	800d5a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d582:	78ba      	ldrb	r2, [r7, #2]
 800d584:	429a      	cmp	r2, r3
 800d586:	d002      	beq.n	800d58e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d588:	78bb      	ldrb	r3, [r7, #2]
 800d58a:	2bff      	cmp	r3, #255	@ 0xff
 800d58c:	d109      	bne.n	800d5a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d592:	787a      	ldrb	r2, [r7, #1]
 800d594:	429a      	cmp	r2, r3
 800d596:	d002      	beq.n	800d59e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d598:	787b      	ldrb	r3, [r7, #1]
 800d59a:	2bff      	cmp	r3, #255	@ 0xff
 800d59c:	d101      	bne.n	800d5a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	e006      	b.n	800d5b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d9d6      	bls.n	800d55c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d5ae:	23ff      	movs	r3, #255	@ 0xff
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	371c      	adds	r7, #28
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7f4 fad1 	bl	8001b6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7f4 fb9f 	bl	8001d10 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af04      	add	r7, sp, #16
 800d5e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3421 	ldrb.w	r3, [r3, #1057]	@ 0x421
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d102      	bne.n	800d5fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2203      	movs	r2, #3
 800d5fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b0b      	cmp	r3, #11
 800d606:	f200 8239 	bhi.w	800da7c <USBH_Process+0x4a0>
 800d60a:	a201      	add	r2, pc, #4	@ (adr r2, 800d610 <USBH_Process+0x34>)
 800d60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d610:	0800d641 	.word	0x0800d641
 800d614:	0800d67f 	.word	0x0800d67f
 800d618:	0800d6ff 	.word	0x0800d6ff
 800d61c:	0800da0b 	.word	0x0800da0b
 800d620:	0800da7d 	.word	0x0800da7d
 800d624:	0800d79f 	.word	0x0800d79f
 800d628:	0800d98d 	.word	0x0800d98d
 800d62c:	0800d7ed 	.word	0x0800d7ed
 800d630:	0800d80d 	.word	0x0800d80d
 800d634:	0800d837 	.word	0x0800d837
 800d638:	0800d893 	.word	0x0800d893
 800d63c:	0800d9f3 	.word	0x0800d9f3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 8219 	beq.w	800da80 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800d64e:	48a5      	ldr	r0, [pc, #660]	@ (800d8e4 <USBH_Process+0x308>)
 800d650:	f003 fdb0 	bl	80111b4 <iprintf>
 800d654:	200a      	movs	r0, #10
 800d656:	f003 fdbf 	bl	80111d8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d660:	20c8      	movs	r0, #200	@ 0xc8
 800d662:	f7f4 fbd7 	bl	8001e14 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7f4 fac5 	bl	8001bf6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        phost->Timeout = 0U;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d67c:	e200      	b.n	800da80 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
 800d684:	2b01      	cmp	r3, #1
 800d686:	d10d      	bne.n	800d6a4 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800d688:	4897      	ldr	r0, [pc, #604]	@ (800d8e8 <USBH_Process+0x30c>)
 800d68a:	f003 fd93 	bl	80111b4 <iprintf>
 800d68e:	200a      	movs	r0, #10
 800d690:	f003 fda2 	bl	80111d8 <putchar>
        phost->device.RstCnt = 0U;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6a2:	e1fa      	b.n	800da9a <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d6aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6ae:	d91a      	bls.n	800d6e6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
          if (phost->device.RstCnt > 3U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d909      	bls.n	800d6de <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800d6ca:	4888      	ldr	r0, [pc, #544]	@ (800d8ec <USBH_Process+0x310>)
 800d6cc:	f003 fd72 	bl	80111b4 <iprintf>
 800d6d0:	200a      	movs	r0, #10
 800d6d2:	f003 fd81 	bl	80111d8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	220d      	movs	r2, #13
 800d6da:	701a      	strb	r2, [r3, #0]
      break;
 800d6dc:	e1dd      	b.n	800da9a <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	701a      	strb	r2, [r3, #0]
      break;
 800d6e4:	e1d9      	b.n	800da9a <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d6ec:	f103 020a 	add.w	r2, r3, #10
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
          USBH_Delay(10U);
 800d6f6:	200a      	movs	r0, #10
 800d6f8:	f7f4 fb8c 	bl	8001e14 <USBH_Delay>
      break;
 800d6fc:	e1cd      	b.n	800da9a <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d70e:	2104      	movs	r1, #4
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d714:	2064      	movs	r0, #100	@ 0x64
 800d716:	f7f4 fb7d 	bl	8001e14 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7f4 fa44 	bl	8001ba8 <USBH_LL_GetSpeed>
 800d720:	4603      	mov	r3, r0
 800d722:	461a      	mov	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

      phost->gState = HOST_ENUMERATION;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2205      	movs	r2, #5
 800d72e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d730:	2100      	movs	r1, #0
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f003 f8f0 	bl	8010918 <USBH_AllocPipe>
 800d738:	4603      	mov	r3, r0
 800d73a:	461a      	mov	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d740:	2180      	movs	r1, #128	@ 0x80
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f003 f8e8 	bl	8010918 <USBH_AllocPipe>
 800d748:	4603      	mov	r3, r0
 800d74a:	461a      	mov	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	7919      	ldrb	r1, [r3, #4]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d764:	9202      	str	r2, [sp, #8]
 800d766:	2200      	movs	r2, #0
 800d768:	9201      	str	r2, [sp, #4]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	4603      	mov	r3, r0
 800d76e:	2280      	movs	r2, #128	@ 0x80
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f003 f8a2 	bl	80108ba <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	7959      	ldrb	r1, [r3, #5]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d78a:	9202      	str	r2, [sp, #8]
 800d78c:	2200      	movs	r2, #0
 800d78e:	9201      	str	r2, [sp, #4]
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	4603      	mov	r3, r0
 800d794:	2200      	movs	r2, #0
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f003 f88f 	bl	80108ba <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d79c:	e17d      	b.n	800da9a <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f98e 	bl	800dac0 <USBH_HandleEnum>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f040 8169 	bne.w	800da84 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800d7b2:	484f      	ldr	r0, [pc, #316]	@ (800d8f0 <USBH_Process+0x314>)
 800d7b4:	f003 fcfe 	bl	80111b4 <iprintf>
 800d7b8:	200a      	movs	r0, #10
 800d7ba:	f003 fd0d 	bl	80111d8 <putchar>

        phost->device.current_interface = 0U;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 3437 	ldrb.w	r3, [r3, #1079]	@ 0x437
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d109      	bne.n	800d7e4 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800d7d0:	4848      	ldr	r0, [pc, #288]	@ (800d8f4 <USBH_Process+0x318>)
 800d7d2:	f003 fcef 	bl	80111b4 <iprintf>
 800d7d6:	200a      	movs	r0, #10
 800d7d8:	f003 fcfe 	bl	80111d8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2208      	movs	r2, #8
 800d7e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d7e2:	e14f      	b.n	800da84 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2207      	movs	r2, #7
 800d7e8:	701a      	strb	r2, [r3, #0]
      break;
 800d7ea:	e14b      	b.n	800da84 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 8148 	beq.w	800da88 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d7fe:	2101      	movs	r1, #1
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2208      	movs	r2, #8
 800d808:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d80a:	e13d      	b.n	800da88 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fd9a 	bl	800e34e <USBH_SetCfg>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 8135 	bne.w	800da8c <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2209      	movs	r2, #9
 800d826:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800d828:	4833      	ldr	r0, [pc, #204]	@ (800d8f8 <USBH_Process+0x31c>)
 800d82a:	f003 fcc3 	bl	80111b4 <iprintf>
 800d82e:	200a      	movs	r0, #10
 800d830:	f003 fcd2 	bl	80111d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d834:	e12a      	b.n	800da8c <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d022      	beq.n	800d88a <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d844:	2101      	movs	r1, #1
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fda4 	bl	800e394 <USBH_SetFeature>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	d109      	bne.n	800d86c <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800d858:	4828      	ldr	r0, [pc, #160]	@ (800d8fc <USBH_Process+0x320>)
 800d85a:	f003 fcab 	bl	80111b4 <iprintf>
 800d85e:	200a      	movs	r0, #10
 800d860:	f003 fcba 	bl	80111d8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	220a      	movs	r2, #10
 800d868:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d86a:	e111      	b.n	800da90 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b03      	cmp	r3, #3
 800d872:	f040 810d 	bne.w	800da90 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800d876:	4822      	ldr	r0, [pc, #136]	@ (800d900 <USBH_Process+0x324>)
 800d878:	f003 fc9c 	bl	80111b4 <iprintf>
 800d87c:	200a      	movs	r0, #10
 800d87e:	f003 fcab 	bl	80111d8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	220a      	movs	r2, #10
 800d886:	701a      	strb	r2, [r3, #0]
      break;
 800d888:	e102      	b.n	800da90 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	220a      	movs	r2, #10
 800d88e:	701a      	strb	r2, [r3, #0]
      break;
 800d890:	e0fe      	b.n	800da90 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d106      	bne.n	800d8aa <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800d89c:	4819      	ldr	r0, [pc, #100]	@ (800d904 <USBH_Process+0x328>)
 800d89e:	f003 fc89 	bl	80111b4 <iprintf>
 800d8a2:	200a      	movs	r0, #10
 800d8a4:	f003 fc98 	bl	80111d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d8a8:	e0f7      	b.n	800da9a <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	e02a      	b.n	800d90e <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d8b8:	7bfa      	ldrb	r2, [r7, #15]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
 800d8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c4:	791a      	ldrb	r2, [r3, #4]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3447 	ldrb.w	r3, [r3, #1095]	@ 0x447
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d11b      	bne.n	800d908 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800d8d0:	7bfa      	ldrb	r2, [r7, #15]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
 800d8d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
            break;
 800d8e2:	e017      	b.n	800d914 <USBH_Process+0x338>
 800d8e4:	08012508 	.word	0x08012508
 800d8e8:	08012520 	.word	0x08012520
 800d8ec:	0801253c 	.word	0x0801253c
 800d8f0:	08012568 	.word	0x08012568
 800d8f4:	0801257c 	.word	0x0801257c
 800d8f8:	080125a4 	.word	0x080125a4
 800d8fc:	080125c0 	.word	0x080125c0
 800d900:	080125e0 	.word	0x080125e0
 800d904:	0801260c 	.word	0x0801260c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	3301      	adds	r3, #1
 800d90c:	73fb      	strb	r3, [r7, #15]
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0d1      	beq.n	800d8b8 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d02c      	beq.n	800d978 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	4798      	blx	r3
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d114      	bne.n	800d95a <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2206      	movs	r2, #6
 800d934:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4619      	mov	r1, r3
 800d940:	4858      	ldr	r0, [pc, #352]	@ (800daa4 <USBH_Process+0x4c8>)
 800d942:	f003 fc37 	bl	80111b4 <iprintf>
 800d946:	200a      	movs	r0, #10
 800d948:	f003 fc46 	bl	80111d8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d952:	2103      	movs	r1, #3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	4798      	blx	r3
      break;
 800d958:	e09f      	b.n	800da9a <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	220d      	movs	r2, #13
 800d95e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4619      	mov	r1, r3
 800d96a:	484f      	ldr	r0, [pc, #316]	@ (800daa8 <USBH_Process+0x4cc>)
 800d96c:	f003 fc22 	bl	80111b4 <iprintf>
 800d970:	200a      	movs	r0, #10
 800d972:	f003 fc31 	bl	80111d8 <putchar>
      break;
 800d976:	e090      	b.n	800da9a <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	220d      	movs	r2, #13
 800d97c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d97e:	484b      	ldr	r0, [pc, #300]	@ (800daac <USBH_Process+0x4d0>)
 800d980:	f003 fc18 	bl	80111b4 <iprintf>
 800d984:	200a      	movs	r0, #10
 800d986:	f003 fc27 	bl	80111d8 <putchar>
      break;
 800d98a:	e086      	b.n	800da9a <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d020      	beq.n	800d9d8 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	4798      	blx	r3
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d103      	bne.n	800d9b6 <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	220b      	movs	r2, #11
 800d9b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d9b4:	e06e      	b.n	800da94 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800d9b6:	7bbb      	ldrb	r3, [r7, #14]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d16a      	bne.n	800da94 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	220d      	movs	r2, #13
 800d9c2:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d9c4:	483a      	ldr	r0, [pc, #232]	@ (800dab0 <USBH_Process+0x4d4>)
 800d9c6:	f003 fbf5 	bl	80111b4 <iprintf>
 800d9ca:	483a      	ldr	r0, [pc, #232]	@ (800dab4 <USBH_Process+0x4d8>)
 800d9cc:	f003 fbf2 	bl	80111b4 <iprintf>
 800d9d0:	200a      	movs	r0, #10
 800d9d2:	f003 fc01 	bl	80111d8 <putchar>
      break;
 800d9d6:	e05d      	b.n	800da94 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	220d      	movs	r2, #13
 800d9dc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d9de:	4834      	ldr	r0, [pc, #208]	@ (800dab0 <USBH_Process+0x4d4>)
 800d9e0:	f003 fbe8 	bl	80111b4 <iprintf>
 800d9e4:	4834      	ldr	r0, [pc, #208]	@ (800dab8 <USBH_Process+0x4dc>)
 800d9e6:	f003 fbe5 	bl	80111b4 <iprintf>
 800d9ea:	200a      	movs	r0, #10
 800d9ec:	f003 fbf4 	bl	80111d8 <putchar>
      break;
 800d9f0:	e050      	b.n	800da94 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d04d      	beq.n	800da98 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	4798      	blx	r3
      }
      break;
 800da08:	e046      	b.n	800da98 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

      (void)DeInitStateMachine(phost);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7ff fc6e 	bl	800d2f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d009      	beq.n	800da36 <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
      }

      if (phost->pUser != NULL)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d005      	beq.n	800da4c <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800da46:	2105      	movs	r1, #5
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800da4c:	481b      	ldr	r0, [pc, #108]	@ (800dabc <USBH_Process+0x4e0>)
 800da4e:	f003 fbb1 	bl	80111b4 <iprintf>
 800da52:	200a      	movs	r0, #10
 800da54:	f003 fbc0 	bl	80111d8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 3422 	ldrb.w	r3, [r3, #1058]	@ 0x422
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b01      	cmp	r3, #1
 800da62:	d107      	bne.n	800da74 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fda5 	bl	800d5bc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800da72:	e012      	b.n	800da9a <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7f4 f879 	bl	8001b6c <USBH_LL_Start>
      break;
 800da7a:	e00e      	b.n	800da9a <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800da7c:	bf00      	nop
 800da7e:	e00c      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da80:	bf00      	nop
 800da82:	e00a      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da84:	bf00      	nop
 800da86:	e008      	b.n	800da9a <USBH_Process+0x4be>
    break;
 800da88:	bf00      	nop
 800da8a:	e006      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da8c:	bf00      	nop
 800da8e:	e004      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da90:	bf00      	nop
 800da92:	e002      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da94:	bf00      	nop
 800da96:	e000      	b.n	800da9a <USBH_Process+0x4be>
      break;
 800da98:	bf00      	nop
  }
  return USBH_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	0801262c 	.word	0x0801262c
 800daa8:	08012640 	.word	0x08012640
 800daac:	08012660 	.word	0x08012660
 800dab0:	08012448 	.word	0x08012448
 800dab4:	08012688 	.word	0x08012688
 800dab8:	080126b0 	.word	0x080126b0
 800dabc:	080126c8 	.word	0x080126c8

0800dac0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af04      	add	r7, sp, #16
 800dac6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800dac8:	2301      	movs	r3, #1
 800daca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800dacc:	2301      	movs	r3, #1
 800dace:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	785b      	ldrb	r3, [r3, #1]
 800dad4:	2b07      	cmp	r3, #7
 800dad6:	f200 827b 	bhi.w	800dfd0 <USBH_HandleEnum+0x510>
 800dada:	a201      	add	r2, pc, #4	@ (adr r2, 800dae0 <USBH_HandleEnum+0x20>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800db01 	.word	0x0800db01
 800dae4:	0800dbd9 	.word	0x0800dbd9
 800dae8:	0800dc89 	.word	0x0800dc89
 800daec:	0800dd45 	.word	0x0800dd45
 800daf0:	0800ddcd 	.word	0x0800ddcd
 800daf4:	0800de7f 	.word	0x0800de7f
 800daf8:	0800def3 	.word	0x0800def3
 800dafc:	0800df65 	.word	0x0800df65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800db00:	2108      	movs	r1, #8
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fb16 	bl	800e134 <USBH_Get_DevDesc>
 800db08:	4603      	mov	r3, r0
 800db0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d12e      	bne.n	800db70 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 242d 	ldrb.w	r2, [r3, #1069]	@ 0x42d
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7919      	ldrb	r1, [r3, #4]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800db36:	9202      	str	r2, [sp, #8]
 800db38:	2200      	movs	r2, #0
 800db3a:	9201      	str	r2, [sp, #4]
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	4603      	mov	r3, r0
 800db40:	2280      	movs	r2, #128	@ 0x80
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f002 feb9 	bl	80108ba <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7959      	ldrb	r1, [r3, #5]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800db5c:	9202      	str	r2, [sp, #8]
 800db5e:	2200      	movs	r2, #0
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	4603      	mov	r3, r0
 800db66:	2200      	movs	r2, #0
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f002 fea6 	bl	80108ba <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800db6e:	e231      	b.n	800dfd4 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db70:	7bbb      	ldrb	r3, [r7, #14]
 800db72:	2b03      	cmp	r3, #3
 800db74:	f040 822e 	bne.w	800dfd4 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800db78:	48ae      	ldr	r0, [pc, #696]	@ (800de34 <USBH_HandleEnum+0x374>)
 800db7a:	f003 fb1b 	bl	80111b4 <iprintf>
 800db7e:	48ae      	ldr	r0, [pc, #696]	@ (800de38 <USBH_HandleEnum+0x378>)
 800db80:	f003 fb18 	bl	80111b4 <iprintf>
 800db84:	200a      	movs	r0, #10
 800db86:	f003 fb27 	bl	80111d8 <putchar>
        phost->device.EnumCnt++;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800db90:	3301      	adds	r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d909      	bls.n	800dbb8 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800dba4:	48a5      	ldr	r0, [pc, #660]	@ (800de3c <USBH_HandleEnum+0x37c>)
 800dba6:	f003 fb05 	bl	80111b4 <iprintf>
 800dbaa:	200a      	movs	r0, #10
 800dbac:	f003 fb14 	bl	80111d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	220d      	movs	r2, #13
 800dbb4:	701a      	strb	r2, [r3, #0]
      break;
 800dbb6:	e20d      	b.n	800dfd4 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	795b      	ldrb	r3, [r3, #5]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f002 fecc 	bl	801095c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	791b      	ldrb	r3, [r3, #4]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f002 fec6 	bl	801095c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	701a      	strb	r2, [r3, #0]
      break;
 800dbd6:	e1fd      	b.n	800dfd4 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800dbd8:	2112      	movs	r1, #18
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 faaa 	bl	800e134 <USBH_Get_DevDesc>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dbe4:	7bbb      	ldrb	r3, [r7, #14]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d117      	bne.n	800dc1a <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	@ 0x430
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4893      	ldr	r0, [pc, #588]	@ (800de40 <USBH_HandleEnum+0x380>)
 800dbf4:	f003 fade 	bl	80111b4 <iprintf>
 800dbf8:	200a      	movs	r0, #10
 800dbfa:	f003 faed 	bl	80111d8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	@ 0x42e
 800dc04:	4619      	mov	r1, r3
 800dc06:	488f      	ldr	r0, [pc, #572]	@ (800de44 <USBH_HandleEnum+0x384>)
 800dc08:	f003 fad4 	bl	80111b4 <iprintf>
 800dc0c:	200a      	movs	r0, #10
 800dc0e:	f003 fae3 	bl	80111d8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2202      	movs	r2, #2
 800dc16:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dc18:	e1de      	b.n	800dfd8 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	f040 81db 	bne.w	800dfd8 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800dc22:	4884      	ldr	r0, [pc, #528]	@ (800de34 <USBH_HandleEnum+0x374>)
 800dc24:	f003 fac6 	bl	80111b4 <iprintf>
 800dc28:	4887      	ldr	r0, [pc, #540]	@ (800de48 <USBH_HandleEnum+0x388>)
 800dc2a:	f003 fac3 	bl	80111b4 <iprintf>
 800dc2e:	200a      	movs	r0, #10
 800dc30:	f003 fad2 	bl	80111d8 <putchar>
        phost->device.EnumCnt++;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d909      	bls.n	800dc62 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800dc4e:	487b      	ldr	r0, [pc, #492]	@ (800de3c <USBH_HandleEnum+0x37c>)
 800dc50:	f003 fab0 	bl	80111b4 <iprintf>
 800dc54:	200a      	movs	r0, #10
 800dc56:	f003 fabf 	bl	80111d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	220d      	movs	r2, #13
 800dc5e:	701a      	strb	r2, [r3, #0]
      break;
 800dc60:	e1ba      	b.n	800dfd8 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	795b      	ldrb	r3, [r3, #5]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f002 fe77 	bl	801095c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	791b      	ldrb	r3, [r3, #4]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f002 fe71 	bl	801095c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	701a      	strb	r2, [r3, #0]
      break;
 800dc86:	e1a7      	b.n	800dfd8 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800dc88:	2101      	movs	r1, #1
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fb3b 	bl	800e306 <USBH_SetAddress>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d13a      	bne.n	800dd10 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800dc9a:	2002      	movs	r0, #2
 800dc9c:	f7f4 f8ba 	bl	8001e14 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4866      	ldr	r0, [pc, #408]	@ (800de4c <USBH_HandleEnum+0x38c>)
 800dcb2:	f003 fa7f 	bl	80111b4 <iprintf>
 800dcb6:	200a      	movs	r0, #10
 800dcb8:	f003 fa8e 	bl	80111d8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2203      	movs	r2, #3
 800dcc0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	7919      	ldrb	r1, [r3, #4]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dcd6:	9202      	str	r2, [sp, #8]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	9201      	str	r2, [sp, #4]
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	4603      	mov	r3, r0
 800dce0:	2280      	movs	r2, #128	@ 0x80
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f002 fde9 	bl	80108ba <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7959      	ldrb	r1, [r3, #5]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dcfc:	9202      	str	r2, [sp, #8]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	4603      	mov	r3, r0
 800dd06:	2200      	movs	r2, #0
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f002 fdd6 	bl	80108ba <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dd0e:	e165      	b.n	800dfdc <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	f040 8162 	bne.w	800dfdc <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800dd18:	4846      	ldr	r0, [pc, #280]	@ (800de34 <USBH_HandleEnum+0x374>)
 800dd1a:	f003 fa4b 	bl	80111b4 <iprintf>
 800dd1e:	484c      	ldr	r0, [pc, #304]	@ (800de50 <USBH_HandleEnum+0x390>)
 800dd20:	f003 fa48 	bl	80111b4 <iprintf>
 800dd24:	200a      	movs	r0, #10
 800dd26:	f003 fa57 	bl	80111d8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800dd2a:	4844      	ldr	r0, [pc, #272]	@ (800de3c <USBH_HandleEnum+0x37c>)
 800dd2c:	f003 fa42 	bl	80111b4 <iprintf>
 800dd30:	200a      	movs	r0, #10
 800dd32:	f003 fa51 	bl	80111d8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	220d      	movs	r2, #13
 800dd3a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	705a      	strb	r2, [r3, #1]
      break;
 800dd42:	e14b      	b.n	800dfdc <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800dd44:	2109      	movs	r1, #9
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fa2e 	bl	800e1a8 <USBH_Get_CfgDesc>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dd50:	7bbb      	ldrb	r3, [r7, #14]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d103      	bne.n	800dd5e <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2204      	movs	r2, #4
 800dd5a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dd5c:	e140      	b.n	800dfe0 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	f040 813d 	bne.w	800dfe0 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800dd66:	4833      	ldr	r0, [pc, #204]	@ (800de34 <USBH_HandleEnum+0x374>)
 800dd68:	f003 fa24 	bl	80111b4 <iprintf>
 800dd6c:	4839      	ldr	r0, [pc, #228]	@ (800de54 <USBH_HandleEnum+0x394>)
 800dd6e:	f003 fa21 	bl	80111b4 <iprintf>
 800dd72:	200a      	movs	r0, #10
 800dd74:	f003 fa30 	bl	80111d8 <putchar>
        phost->device.EnumCnt++;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dd7e:	3301      	adds	r3, #1
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d909      	bls.n	800dda6 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800dd92:	482a      	ldr	r0, [pc, #168]	@ (800de3c <USBH_HandleEnum+0x37c>)
 800dd94:	f003 fa0e 	bl	80111b4 <iprintf>
 800dd98:	200a      	movs	r0, #10
 800dd9a:	f003 fa1d 	bl	80111d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	220d      	movs	r2, #13
 800dda2:	701a      	strb	r2, [r3, #0]
      break;
 800dda4:	e11c      	b.n	800dfe0 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	795b      	ldrb	r3, [r3, #5]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f002 fdd5 	bl	801095c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	791b      	ldrb	r3, [r3, #4]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f002 fdcf 	bl	801095c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
      break;
 800ddca:	e109      	b.n	800dfe0 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	@ 0x43a
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f9e7 	bl	800e1a8 <USBH_Get_CfgDesc>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2205      	movs	r2, #5
 800dde8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ddea:	e0fb      	b.n	800dfe4 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	f040 80f8 	bne.w	800dfe4 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ddf4:	480f      	ldr	r0, [pc, #60]	@ (800de34 <USBH_HandleEnum+0x374>)
 800ddf6:	f003 f9dd 	bl	80111b4 <iprintf>
 800ddfa:	4816      	ldr	r0, [pc, #88]	@ (800de54 <USBH_HandleEnum+0x394>)
 800ddfc:	f003 f9da 	bl	80111b4 <iprintf>
 800de00:	200a      	movs	r0, #10
 800de02:	f003 f9e9 	bl	80111d8 <putchar>
        phost->device.EnumCnt++;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800de0c:	3301      	adds	r3, #1
 800de0e:	b2da      	uxtb	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d91b      	bls.n	800de58 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800de20:	4806      	ldr	r0, [pc, #24]	@ (800de3c <USBH_HandleEnum+0x37c>)
 800de22:	f003 f9c7 	bl	80111b4 <iprintf>
 800de26:	200a      	movs	r0, #10
 800de28:	f003 f9d6 	bl	80111d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	220d      	movs	r2, #13
 800de30:	701a      	strb	r2, [r3, #0]
      break;
 800de32:	e0d7      	b.n	800dfe4 <USBH_HandleEnum+0x524>
 800de34:	08012448 	.word	0x08012448
 800de38:	080126e0 	.word	0x080126e0
 800de3c:	08012714 	.word	0x08012714
 800de40:	08012754 	.word	0x08012754
 800de44:	08012760 	.word	0x08012760
 800de48:	0801276c 	.word	0x0801276c
 800de4c:	080127a8 	.word	0x080127a8
 800de50:	080127c0 	.word	0x080127c0
 800de54:	080127f4 	.word	0x080127f4
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	795b      	ldrb	r3, [r3, #5]
 800de5c:	4619      	mov	r1, r3
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f002 fd7c 	bl	801095c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	791b      	ldrb	r3, [r3, #4]
 800de68:	4619      	mov	r1, r3
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f002 fd76 	bl	801095c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	701a      	strb	r2, [r3, #0]
      break;
 800de7c:	e0b2      	b.n	800dfe4 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800de84:	2b00      	cmp	r3, #0
 800de86:	d02a      	beq.n	800dede <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 1434 	ldrb.w	r1, [r3, #1076]	@ 0x434
                                        phost->device.Data, 0xFFU);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800de94:	23ff      	movs	r3, #255	@ 0xff
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f9be 	bl	800e218 <USBH_Get_StringDesc>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dea0:	7bbb      	ldrb	r3, [r7, #14]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10d      	bne.n	800dec2 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800deac:	4619      	mov	r1, r3
 800deae:	4853      	ldr	r0, [pc, #332]	@ (800dffc <USBH_HandleEnum+0x53c>)
 800deb0:	f003 f980 	bl	80111b4 <iprintf>
 800deb4:	200a      	movs	r0, #10
 800deb6:	f003 f98f 	bl	80111d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2206      	movs	r2, #6
 800debe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dec0:	e092      	b.n	800dfe8 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	f040 808f 	bne.w	800dfe8 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800deca:	484d      	ldr	r0, [pc, #308]	@ (800e000 <USBH_HandleEnum+0x540>)
 800decc:	f003 f972 	bl	80111b4 <iprintf>
 800ded0:	200a      	movs	r0, #10
 800ded2:	f003 f981 	bl	80111d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2206      	movs	r2, #6
 800deda:	705a      	strb	r2, [r3, #1]
      break;
 800dedc:	e084      	b.n	800dfe8 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800dede:	4848      	ldr	r0, [pc, #288]	@ (800e000 <USBH_HandleEnum+0x540>)
 800dee0:	f003 f968 	bl	80111b4 <iprintf>
 800dee4:	200a      	movs	r0, #10
 800dee6:	f003 f977 	bl	80111d8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2206      	movs	r2, #6
 800deee:	705a      	strb	r2, [r3, #1]
      break;
 800def0:	e07a      	b.n	800dfe8 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3435 	ldrb.w	r3, [r3, #1077]	@ 0x435
 800def8:	2b00      	cmp	r3, #0
 800defa:	d029      	beq.n	800df50 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 1435 	ldrb.w	r1, [r3, #1077]	@ 0x435
                                        phost->device.Data, 0xFFU);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800df08:	23ff      	movs	r3, #255	@ 0xff
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f984 	bl	800e218 <USBH_Get_StringDesc>
 800df10:	4603      	mov	r3, r0
 800df12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10d      	bne.n	800df36 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800df20:	4619      	mov	r1, r3
 800df22:	4838      	ldr	r0, [pc, #224]	@ (800e004 <USBH_HandleEnum+0x544>)
 800df24:	f003 f946 	bl	80111b4 <iprintf>
 800df28:	200a      	movs	r0, #10
 800df2a:	f003 f955 	bl	80111d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2207      	movs	r2, #7
 800df32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800df34:	e05a      	b.n	800dfec <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df36:	7bbb      	ldrb	r3, [r7, #14]
 800df38:	2b03      	cmp	r3, #3
 800df3a:	d157      	bne.n	800dfec <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800df3c:	4832      	ldr	r0, [pc, #200]	@ (800e008 <USBH_HandleEnum+0x548>)
 800df3e:	f003 f939 	bl	80111b4 <iprintf>
 800df42:	200a      	movs	r0, #10
 800df44:	f003 f948 	bl	80111d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2207      	movs	r2, #7
 800df4c:	705a      	strb	r2, [r3, #1]
      break;
 800df4e:	e04d      	b.n	800dfec <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800df50:	482d      	ldr	r0, [pc, #180]	@ (800e008 <USBH_HandleEnum+0x548>)
 800df52:	f003 f92f 	bl	80111b4 <iprintf>
 800df56:	200a      	movs	r0, #10
 800df58:	f003 f93e 	bl	80111d8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2207      	movs	r2, #7
 800df60:	705a      	strb	r2, [r3, #1]
      break;
 800df62:	e043      	b.n	800dfec <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 3436 	ldrb.w	r3, [r3, #1078]	@ 0x436
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d027      	beq.n	800dfbe <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 1436 	ldrb.w	r1, [r3, #1078]	@ 0x436
                                        phost->device.Data, 0xFFU);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800df7a:	23ff      	movs	r3, #255	@ 0xff
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f94b 	bl	800e218 <USBH_Get_StringDesc>
 800df82:	4603      	mov	r3, r0
 800df84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800df86:	7bbb      	ldrb	r3, [r7, #14]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10c      	bne.n	800dfa6 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800df92:	4619      	mov	r1, r3
 800df94:	481d      	ldr	r0, [pc, #116]	@ (800e00c <USBH_HandleEnum+0x54c>)
 800df96:	f003 f90d 	bl	80111b4 <iprintf>
 800df9a:	200a      	movs	r0, #10
 800df9c:	f003 f91c 	bl	80111d8 <putchar>
          Status = USBH_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dfa4:	e024      	b.n	800dff0 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d121      	bne.n	800dff0 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800dfac:	4818      	ldr	r0, [pc, #96]	@ (800e010 <USBH_HandleEnum+0x550>)
 800dfae:	f003 f901 	bl	80111b4 <iprintf>
 800dfb2:	200a      	movs	r0, #10
 800dfb4:	f003 f910 	bl	80111d8 <putchar>
          Status = USBH_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	73fb      	strb	r3, [r7, #15]
      break;
 800dfbc:	e018      	b.n	800dff0 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800dfbe:	4814      	ldr	r0, [pc, #80]	@ (800e010 <USBH_HandleEnum+0x550>)
 800dfc0:	f003 f8f8 	bl	80111b4 <iprintf>
 800dfc4:	200a      	movs	r0, #10
 800dfc6:	f003 f907 	bl	80111d8 <putchar>
        Status = USBH_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
      break;
 800dfce:	e00f      	b.n	800dff0 <USBH_HandleEnum+0x530>

    default:
      break;
 800dfd0:	bf00      	nop
 800dfd2:	e00e      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfd4:	bf00      	nop
 800dfd6:	e00c      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfd8:	bf00      	nop
 800dfda:	e00a      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfdc:	bf00      	nop
 800dfde:	e008      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfe0:	bf00      	nop
 800dfe2:	e006      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfe4:	bf00      	nop
 800dfe6:	e004      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfe8:	bf00      	nop
 800dfea:	e002      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dfec:	bf00      	nop
 800dfee:	e000      	b.n	800dff2 <USBH_HandleEnum+0x532>
      break;
 800dff0:	bf00      	nop
  }
  return Status;
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	08012838 	.word	0x08012838
 800e000:	0801284c 	.word	0x0801284c
 800e004:	08012860 	.word	0x08012860
 800e008:	08012870 	.word	0x08012870
 800e00c:	08012880 	.word	0x08012880
 800e010:	08012894 	.word	0x08012894

0800e014 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800e040:	1c5a      	adds	r2, r3, #1
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f804 	bl	800e056 <USBH_HandleSof>
}
 800e04e:	bf00      	nop
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b082      	sub	sp, #8
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2b0b      	cmp	r3, #11
 800e066:	d10a      	bne.n	800e07e <USBH_HandleSof+0x28>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	4798      	blx	r3
  }
}
 800e07e:	bf00      	nop
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e086:	b480      	push	{r7}
 800e088:	b083      	sub	sp, #12
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e096:	bf00      	nop
}
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b083      	sub	sp, #12
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  return;
 800e0b2:	bf00      	nop
}
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7f3 fd3c 	bl	8001b8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	791b      	ldrb	r3, [r3, #4]
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f002 fc1f 	bl	801095c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	795b      	ldrb	r3, [r3, #5]
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f002 fc19 	bl	801095c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af02      	add	r7, sp, #8
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e140:	887b      	ldrh	r3, [r7, #2]
 800e142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e146:	d90a      	bls.n	800e15e <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800e148:	4815      	ldr	r0, [pc, #84]	@ (800e1a0 <USBH_Get_DevDesc+0x6c>)
 800e14a:	f003 f833 	bl	80111b4 <iprintf>
 800e14e:	4815      	ldr	r0, [pc, #84]	@ (800e1a4 <USBH_Get_DevDesc+0x70>)
 800e150:	f003 f830 	bl	80111b4 <iprintf>
 800e154:	200a      	movs	r0, #10
 800e156:	f003 f83f 	bl	80111d8 <putchar>
    return USBH_NOT_SUPPORTED;
 800e15a:	2303      	movs	r3, #3
 800e15c:	e01b      	b.n	800e196 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
 800e164:	887b      	ldrh	r3, [r7, #2]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	4613      	mov	r3, r2
 800e16a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e16e:	2100      	movs	r1, #0
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f893 	bl	800e29c <USBH_GetDescriptor>
 800e176:	4603      	mov	r3, r0
 800e178:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d109      	bne.n	800e194 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800e186:	887a      	ldrh	r2, [r7, #2]
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f94a 	bl	800e424 <USBH_ParseDevDesc>
 800e190:	4603      	mov	r3, r0
 800e192:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e194:	7bfb      	ldrb	r3, [r7, #15]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	080128a8 	.word	0x080128a8
 800e1a4:	080128b0 	.word	0x080128b0

0800e1a8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	331c      	adds	r3, #28
 800e1b8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e1ba:	887b      	ldrh	r3, [r7, #2]
 800e1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1c0:	d90a      	bls.n	800e1d8 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800e1c2:	4813      	ldr	r0, [pc, #76]	@ (800e210 <USBH_Get_CfgDesc+0x68>)
 800e1c4:	f002 fff6 	bl	80111b4 <iprintf>
 800e1c8:	4812      	ldr	r0, [pc, #72]	@ (800e214 <USBH_Get_CfgDesc+0x6c>)
 800e1ca:	f002 fff3 	bl	80111b4 <iprintf>
 800e1ce:	200a      	movs	r0, #10
 800e1d0:	f003 f802 	bl	80111d8 <putchar>
    return USBH_NOT_SUPPORTED;
 800e1d4:	2303      	movs	r3, #3
 800e1d6:	e016      	b.n	800e206 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e1d8:	887b      	ldrh	r3, [r7, #2]
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f859 	bl	800e29c <USBH_GetDescriptor>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d107      	bne.n	800e204 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e1f4:	887b      	ldrh	r3, [r7, #2]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	68b9      	ldr	r1, [r7, #8]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f9c2 	bl	800e584 <USBH_ParseCfgDesc>
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e204:	7bfb      	ldrb	r3, [r7, #15]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	080128a8 	.word	0x080128a8
 800e214:	080128f4 	.word	0x080128f4

0800e218 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	607a      	str	r2, [r7, #4]
 800e222:	461a      	mov	r2, r3
 800e224:	460b      	mov	r3, r1
 800e226:	72fb      	strb	r3, [r7, #11]
 800e228:	4613      	mov	r3, r2
 800e22a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e22c:	893b      	ldrh	r3, [r7, #8]
 800e22e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e232:	d802      	bhi.n	800e23a <USBH_Get_StringDesc+0x22>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10a      	bne.n	800e250 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800e23a:	4816      	ldr	r0, [pc, #88]	@ (800e294 <USBH_Get_StringDesc+0x7c>)
 800e23c:	f002 ffba 	bl	80111b4 <iprintf>
 800e240:	4815      	ldr	r0, [pc, #84]	@ (800e298 <USBH_Get_StringDesc+0x80>)
 800e242:	f002 ffb7 	bl	80111b4 <iprintf>
 800e246:	200a      	movs	r0, #10
 800e248:	f002 ffc6 	bl	80111d8 <putchar>
    return USBH_NOT_SUPPORTED;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e01c      	b.n	800e28a <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800e250:	7afb      	ldrb	r3, [r7, #11]
 800e252:	b29b      	uxth	r3, r3
 800e254:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e258:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 7107 	add.w	r1, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
 800e260:	893b      	ldrh	r3, [r7, #8]
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	460b      	mov	r3, r1
 800e266:	2100      	movs	r1, #0
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f000 f817 	bl	800e29c <USBH_GetDescriptor>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d107      	bne.n	800e288 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800e27e:	893a      	ldrh	r2, [r7, #8]
 800e280:	6879      	ldr	r1, [r7, #4]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 fb92 	bl	800e9ac <USBH_ParseStringDesc>
  }

  return status;
 800e288:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	080128a8 	.word	0x080128a8
 800e298:	08012940 	.word	0x08012940

0800e29c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	607b      	str	r3, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	72fb      	strb	r3, [r7, #11]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	789b      	ldrb	r3, [r3, #2]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d11c      	bne.n	800e2f0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e2b6:	7afb      	ldrb	r3, [r7, #11]
 800e2b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2206      	movs	r2, #6
 800e2c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	893a      	ldrh	r2, [r7, #8]
 800e2cc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e2ce:	893b      	ldrh	r3, [r7, #8]
 800e2d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2d8:	d104      	bne.n	800e2e4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f240 4209 	movw	r2, #1033	@ 0x409
 800e2e0:	829a      	strh	r2, [r3, #20]
 800e2e2:	e002      	b.n	800e2ea <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8b3a      	ldrh	r2, [r7, #24]
 800e2ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e2f0:	8b3b      	ldrh	r3, [r7, #24]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 fba5 	bl	800ea46 <USBH_CtlReq>
 800e2fc:	4603      	mov	r3, r0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	460b      	mov	r3, r1
 800e310:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	789b      	ldrb	r3, [r3, #2]
 800e316:	2b01      	cmp	r3, #1
 800e318:	d10f      	bne.n	800e33a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2205      	movs	r2, #5
 800e324:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e326:	78fb      	ldrb	r3, [r7, #3]
 800e328:	b29a      	uxth	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e33a:	2200      	movs	r2, #0
 800e33c:	2100      	movs	r1, #0
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fb81 	bl	800ea46 <USBH_CtlReq>
 800e344:	4603      	mov	r3, r0
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	789b      	ldrb	r3, [r3, #2]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d10e      	bne.n	800e380 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2209      	movs	r2, #9
 800e36c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	887a      	ldrh	r2, [r7, #2]
 800e372:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e380:	2200      	movs	r2, #0
 800e382:	2100      	movs	r1, #0
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fb5e 	bl	800ea46 <USBH_CtlReq>
 800e38a:	4603      	mov	r3, r0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	789b      	ldrb	r3, [r3, #2]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d10f      	bne.n	800e3c8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2203      	movs	r2, #3
 800e3b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fb3a 	bl	800ea46 <USBH_CtlReq>
 800e3d2:	4603      	mov	r3, r0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	789b      	ldrb	r3, [r3, #2]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d10f      	bne.n	800e410 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e402:	78fb      	ldrb	r3, [r7, #3]
 800e404:	b29a      	uxth	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e410:	2200      	movs	r2, #0
 800e412:	2100      	movs	r1, #0
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fb16 	bl	800ea46 <USBH_CtlReq>
 800e41a:	4603      	mov	r3, r0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e424:	b480      	push	{r7}
 800e426:	b087      	sub	sp, #28
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	4613      	mov	r3, r2
 800e430:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f203 4326 	addw	r3, r3, #1062	@ 0x426
 800e438:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e444:	2302      	movs	r3, #2
 800e446:	e094      	b.n	800e572 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	785a      	ldrb	r2, [r3, #1]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	3302      	adds	r3, #2
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	3303      	adds	r3, #3
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	021b      	lsls	r3, r3, #8
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4313      	orrs	r3, r2
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	791a      	ldrb	r2, [r3, #4]
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	795a      	ldrb	r2, [r3, #5]
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	799a      	ldrb	r2, [r3, #6]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	79da      	ldrb	r2, [r3, #7]
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d004      	beq.n	800e4a6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d11b      	bne.n	800e4de <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	79db      	ldrb	r3, [r3, #7]
 800e4aa:	2b20      	cmp	r3, #32
 800e4ac:	dc0f      	bgt.n	800e4ce <USBH_ParseDevDesc+0xaa>
 800e4ae:	2b08      	cmp	r3, #8
 800e4b0:	db0f      	blt.n	800e4d2 <USBH_ParseDevDesc+0xae>
 800e4b2:	3b08      	subs	r3, #8
 800e4b4:	4a32      	ldr	r2, [pc, #200]	@ (800e580 <USBH_ParseDevDesc+0x15c>)
 800e4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	bf14      	ite	ne
 800e4c2:	2301      	movne	r3, #1
 800e4c4:	2300      	moveq	r3, #0
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d106      	bne.n	800e4da <USBH_ParseDevDesc+0xb6>
 800e4cc:	e001      	b.n	800e4d2 <USBH_ParseDevDesc+0xae>
 800e4ce:	2b40      	cmp	r3, #64	@ 0x40
 800e4d0:	d003      	beq.n	800e4da <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	71da      	strb	r2, [r3, #7]
        break;
 800e4d8:	e000      	b.n	800e4dc <USBH_ParseDevDesc+0xb8>
        break;
 800e4da:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800e4dc:	e00e      	b.n	800e4fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d107      	bne.n	800e4f8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	79db      	ldrb	r3, [r3, #7]
 800e4ec:	2b08      	cmp	r3, #8
 800e4ee:	d005      	beq.n	800e4fc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	2208      	movs	r2, #8
 800e4f4:	71da      	strb	r2, [r3, #7]
 800e4f6:	e001      	b.n	800e4fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800e4fc:	88fb      	ldrh	r3, [r7, #6]
 800e4fe:	2b08      	cmp	r3, #8
 800e500:	d936      	bls.n	800e570 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	3308      	adds	r3, #8
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	461a      	mov	r2, r3
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	3309      	adds	r3, #9
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	021b      	lsls	r3, r3, #8
 800e512:	b29b      	uxth	r3, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	b29a      	uxth	r2, r3
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	330a      	adds	r3, #10
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	330b      	adds	r3, #11
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	021b      	lsls	r3, r3, #8
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4313      	orrs	r3, r2
 800e530:	b29a      	uxth	r2, r3
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	330c      	adds	r3, #12
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	461a      	mov	r2, r3
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	330d      	adds	r3, #13
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	b29b      	uxth	r3, r3
 800e548:	4313      	orrs	r3, r2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	7b9a      	ldrb	r2, [r3, #14]
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	7bda      	ldrb	r2, [r3, #15]
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	7c1a      	ldrb	r2, [r3, #16]
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	7c5a      	ldrb	r2, [r3, #17]
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800e570:	7dfb      	ldrb	r3, [r7, #23]
}
 800e572:	4618      	mov	r0, r3
 800e574:	371c      	adds	r7, #28
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop
 800e580:	01000101 	.word	0x01000101

0800e584 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08c      	sub	sp, #48	@ 0x30
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	4613      	mov	r3, r2
 800e590:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 800e598:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e5b2:	2302      	movs	r3, #2
 800e5b4:	e0da      	b.n	800e76c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	781a      	ldrb	r2, [r3, #0]
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	785a      	ldrb	r2, [r3, #1]
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3302      	adds	r3, #2
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	3303      	adds	r3, #3
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5e4:	bf28      	it	cs
 800e5e6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	791a      	ldrb	r2, [r3, #4]
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	795a      	ldrb	r2, [r3, #5]
 800e5fc:	6a3b      	ldr	r3, [r7, #32]
 800e5fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	799a      	ldrb	r2, [r3, #6]
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	79da      	ldrb	r2, [r3, #7]
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	7a1a      	ldrb	r2, [r3, #8]
 800e614:	6a3b      	ldr	r3, [r7, #32]
 800e616:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b09      	cmp	r3, #9
 800e61e:	d002      	beq.n	800e626 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	2209      	movs	r2, #9
 800e624:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e626:	88fb      	ldrh	r3, [r7, #6]
 800e628:	2b09      	cmp	r3, #9
 800e62a:	f240 809d 	bls.w	800e768 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800e62e:	2309      	movs	r3, #9
 800e630:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e632:	2300      	movs	r3, #0
 800e634:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e636:	e081      	b.n	800e73c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e638:	f107 0316 	add.w	r3, r7, #22
 800e63c:	4619      	mov	r1, r3
 800e63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e640:	f000 f9e7 	bl	800ea12 <USBH_GetNextDesc>
 800e644:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e648:	785b      	ldrb	r3, [r3, #1]
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	d176      	bne.n	800e73c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b09      	cmp	r3, #9
 800e654:	d002      	beq.n	800e65c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e658:	2209      	movs	r2, #9
 800e65a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e65c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e660:	221a      	movs	r2, #26
 800e662:	fb02 f303 	mul.w	r3, r2, r3
 800e666:	3308      	adds	r3, #8
 800e668:	6a3a      	ldr	r2, [r7, #32]
 800e66a:	4413      	add	r3, r2
 800e66c:	3302      	adds	r3, #2
 800e66e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e672:	69f8      	ldr	r0, [r7, #28]
 800e674:	f000 f87e 	bl	800e774 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e678:	2300      	movs	r3, #0
 800e67a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e682:	e043      	b.n	800e70c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e684:	f107 0316 	add.w	r3, r7, #22
 800e688:	4619      	mov	r1, r3
 800e68a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e68c:	f000 f9c1 	bl	800ea12 <USBH_GetNextDesc>
 800e690:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e694:	785b      	ldrb	r3, [r3, #1]
 800e696:	2b05      	cmp	r3, #5
 800e698:	d138      	bne.n	800e70c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	795b      	ldrb	r3, [r3, #5]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d113      	bne.n	800e6ca <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e6a6:	2b02      	cmp	r3, #2
 800e6a8:	d003      	beq.n	800e6b2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	799b      	ldrb	r3, [r3, #6]
 800e6ae:	2b03      	cmp	r3, #3
 800e6b0:	d10b      	bne.n	800e6ca <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	79db      	ldrb	r3, [r3, #7]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10b      	bne.n	800e6d2 <USBH_ParseCfgDesc+0x14e>
 800e6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b09      	cmp	r3, #9
 800e6c0:	d007      	beq.n	800e6d2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800e6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c4:	2209      	movs	r2, #9
 800e6c6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6c8:	e003      	b.n	800e6d2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6cc:	2207      	movs	r2, #7
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e000      	b.n	800e6d4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6d2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e6dc:	3201      	adds	r2, #1
 800e6de:	00d2      	lsls	r2, r2, #3
 800e6e0:	211a      	movs	r1, #26
 800e6e2:	fb01 f303 	mul.w	r3, r1, r3
 800e6e6:	4413      	add	r3, r2
 800e6e8:	3308      	adds	r3, #8
 800e6ea:	6a3a      	ldr	r2, [r7, #32]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e6f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6f4:	69b9      	ldr	r1, [r7, #24]
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f000 f870 	bl	800e7dc <USBH_ParseEPDesc>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800e702:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e706:	3301      	adds	r3, #1
 800e708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	791b      	ldrb	r3, [r3, #4]
 800e710:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e714:	429a      	cmp	r2, r3
 800e716:	d204      	bcs.n	800e722 <USBH_ParseCfgDesc+0x19e>
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	885a      	ldrh	r2, [r3, #2]
 800e71c:	8afb      	ldrh	r3, [r7, #22]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d8b0      	bhi.n	800e684 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	791b      	ldrb	r3, [r3, #4]
 800e726:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d201      	bcs.n	800e732 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800e72e:	2303      	movs	r3, #3
 800e730:	e01c      	b.n	800e76c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800e732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e736:	3301      	adds	r3, #1
 800e738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e740:	2b01      	cmp	r3, #1
 800e742:	d805      	bhi.n	800e750 <USBH_ParseCfgDesc+0x1cc>
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	885a      	ldrh	r2, [r3, #2]
 800e748:	8afb      	ldrh	r3, [r7, #22]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	f63f af74 	bhi.w	800e638 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	791b      	ldrb	r3, [r3, #4]
 800e754:	2b02      	cmp	r3, #2
 800e756:	bf28      	it	cs
 800e758:	2302      	movcs	r3, #2
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e760:	429a      	cmp	r2, r3
 800e762:	d201      	bcs.n	800e768 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800e764:	2303      	movs	r3, #3
 800e766:	e001      	b.n	800e76c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800e768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3730      	adds	r7, #48	@ 0x30
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781a      	ldrb	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	785a      	ldrb	r2, [r3, #1]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	789a      	ldrb	r2, [r3, #2]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	78da      	ldrb	r2, [r3, #3]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b02      	cmp	r3, #2
 800e7a6:	bf28      	it	cs
 800e7a8:	2302      	movcs	r3, #2
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	795a      	ldrb	r2, [r3, #5]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	799a      	ldrb	r2, [r3, #6]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	79da      	ldrb	r2, [r3, #7]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	7a1a      	ldrb	r2, [r3, #8]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	721a      	strb	r2, [r3, #8]
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	781a      	ldrb	r2, [r3, #0]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	785a      	ldrb	r2, [r3, #1]
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	789a      	ldrb	r2, [r3, #2]
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	78da      	ldrb	r2, [r3, #3]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3304      	adds	r3, #4
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3305      	adds	r3, #5
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	021b      	lsls	r3, r3, #8
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	4313      	orrs	r3, r2
 800e820:	b29a      	uxth	r2, r3
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	799a      	ldrb	r2, [r3, #6]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	889b      	ldrh	r3, [r3, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d009      	beq.n	800e84a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e83a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e83e:	d804      	bhi.n	800e84a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e848:	d901      	bls.n	800e84e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800e84a:	2303      	movs	r3, #3
 800e84c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e854:	2b00      	cmp	r3, #0
 800e856:	d136      	bne.n	800e8c6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	78db      	ldrb	r3, [r3, #3]
 800e85c:	f003 0303 	and.w	r3, r3, #3
 800e860:	2b02      	cmp	r3, #2
 800e862:	d108      	bne.n	800e876 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	889b      	ldrh	r3, [r3, #4]
 800e868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e86c:	f240 8097 	bls.w	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e870:	2303      	movs	r3, #3
 800e872:	75fb      	strb	r3, [r7, #23]
 800e874:	e093      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	78db      	ldrb	r3, [r3, #3]
 800e87a:	f003 0303 	and.w	r3, r3, #3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d107      	bne.n	800e892 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	889b      	ldrh	r3, [r3, #4]
 800e886:	2b40      	cmp	r3, #64	@ 0x40
 800e888:	f240 8089 	bls.w	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e88c:	2303      	movs	r3, #3
 800e88e:	75fb      	strb	r3, [r7, #23]
 800e890:	e085      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	78db      	ldrb	r3, [r3, #3]
 800e896:	f003 0303 	and.w	r3, r3, #3
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d005      	beq.n	800e8aa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	78db      	ldrb	r3, [r3, #3]
 800e8a2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d10a      	bne.n	800e8c0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	799b      	ldrb	r3, [r3, #6]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <USBH_ParseEPDesc+0xde>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	799b      	ldrb	r3, [r3, #6]
 800e8b6:	2b10      	cmp	r3, #16
 800e8b8:	d970      	bls.n	800e99c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8be:	e06d      	b.n	800e99c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	75fb      	strb	r3, [r7, #23]
 800e8c4:	e06b      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d13c      	bne.n	800e94a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	78db      	ldrb	r3, [r3, #3]
 800e8d4:	f003 0303 	and.w	r3, r3, #3
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d005      	beq.n	800e8e8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	78db      	ldrb	r3, [r3, #3]
 800e8e0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d106      	bne.n	800e8f6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	889b      	ldrh	r3, [r3, #4]
 800e8ec:	2b40      	cmp	r3, #64	@ 0x40
 800e8ee:	d956      	bls.n	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e8f4:	e053      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	78db      	ldrb	r3, [r3, #3]
 800e8fa:	f003 0303 	and.w	r3, r3, #3
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d10e      	bne.n	800e920 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	799b      	ldrb	r3, [r3, #6]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d007      	beq.n	800e91a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e90e:	2b10      	cmp	r3, #16
 800e910:	d803      	bhi.n	800e91a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e916:	2b40      	cmp	r3, #64	@ 0x40
 800e918:	d941      	bls.n	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e91a:	2303      	movs	r3, #3
 800e91c:	75fb      	strb	r3, [r7, #23]
 800e91e:	e03e      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	78db      	ldrb	r3, [r3, #3]
 800e924:	f003 0303 	and.w	r3, r3, #3
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d10b      	bne.n	800e944 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	799b      	ldrb	r3, [r3, #6]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <USBH_ParseEPDesc+0x162>
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	889b      	ldrh	r3, [r3, #4]
 800e938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e93c:	d32f      	bcc.n	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e93e:	2303      	movs	r3, #3
 800e940:	75fb      	strb	r3, [r7, #23]
 800e942:	e02c      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e944:	2303      	movs	r3, #3
 800e946:	75fb      	strb	r3, [r7, #23]
 800e948:	e029      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e950:	2b02      	cmp	r3, #2
 800e952:	d120      	bne.n	800e996 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	78db      	ldrb	r3, [r3, #3]
 800e958:	f003 0303 	and.w	r3, r3, #3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d106      	bne.n	800e96e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	889b      	ldrh	r3, [r3, #4]
 800e964:	2b08      	cmp	r3, #8
 800e966:	d01a      	beq.n	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e968:	2303      	movs	r3, #3
 800e96a:	75fb      	strb	r3, [r7, #23]
 800e96c:	e017      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	78db      	ldrb	r3, [r3, #3]
 800e972:	f003 0303 	and.w	r3, r3, #3
 800e976:	2b03      	cmp	r3, #3
 800e978:	d10a      	bne.n	800e990 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	799b      	ldrb	r3, [r3, #6]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d003      	beq.n	800e98a <USBH_ParseEPDesc+0x1ae>
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	889b      	ldrh	r3, [r3, #4]
 800e986:	2b08      	cmp	r3, #8
 800e988:	d909      	bls.n	800e99e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e98a:	2303      	movs	r3, #3
 800e98c:	75fb      	strb	r3, [r7, #23]
 800e98e:	e006      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e990:	2303      	movs	r3, #3
 800e992:	75fb      	strb	r3, [r7, #23]
 800e994:	e003      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e996:	2303      	movs	r3, #3
 800e998:	75fb      	strb	r3, [r7, #23]
 800e99a:	e000      	b.n	800e99e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e99c:	bf00      	nop
  }

  return status;
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	371c      	adds	r7, #28
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	d120      	bne.n	800ea06 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	1e9a      	subs	r2, r3, #2
 800e9ca:	88fb      	ldrh	r3, [r7, #6]
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	bf28      	it	cs
 800e9d0:	4613      	movcs	r3, r2
 800e9d2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3302      	adds	r3, #2
 800e9d8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e9da:	2300      	movs	r3, #0
 800e9dc:	82fb      	strh	r3, [r7, #22]
 800e9de:	e00b      	b.n	800e9f8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e9e0:	8afb      	ldrh	r3, [r7, #22]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	781a      	ldrb	r2, [r3, #0]
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e9f2:	8afb      	ldrh	r3, [r7, #22]
 800e9f4:	3302      	adds	r3, #2
 800e9f6:	82fb      	strh	r3, [r7, #22]
 800e9f8:	8afa      	ldrh	r2, [r7, #22]
 800e9fa:	8abb      	ldrh	r3, [r7, #20]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d3ef      	bcc.n	800e9e0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	2200      	movs	r2, #0
 800ea04:	701a      	strb	r2, [r3, #0]
  }
}
 800ea06:	bf00      	nop
 800ea08:	371c      	adds	r7, #28
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b085      	sub	sp, #20
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	881b      	ldrh	r3, [r3, #0]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	4413      	add	r3, r2
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4413      	add	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea38:	68fb      	ldr	r3, [r7, #12]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3714      	adds	r7, #20
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b086      	sub	sp, #24
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	60f8      	str	r0, [r7, #12]
 800ea4e:	60b9      	str	r1, [r7, #8]
 800ea50:	4613      	mov	r3, r2
 800ea52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ea54:	2301      	movs	r3, #1
 800ea56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	789b      	ldrb	r3, [r3, #2]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d002      	beq.n	800ea66 <USBH_CtlReq+0x20>
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d00f      	beq.n	800ea84 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ea64:	e027      	b.n	800eab6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	88fa      	ldrh	r2, [r7, #6]
 800ea70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2201      	movs	r2, #1
 800ea76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	75fb      	strb	r3, [r7, #23]
      break;
 800ea82:	e018      	b.n	800eab6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f000 f81b 	bl	800eac0 <USBH_HandleControl>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <USBH_CtlReq+0x54>
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	2b03      	cmp	r3, #3
 800ea98:	d106      	bne.n	800eaa8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	761a      	strb	r2, [r3, #24]
      break;
 800eaa6:	e005      	b.n	800eab4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d102      	bne.n	800eab4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2201      	movs	r2, #1
 800eab2:	709a      	strb	r2, [r3, #2]
      break;
 800eab4:	bf00      	nop
  }
  return status;
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af02      	add	r7, sp, #8
 800eac6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800eac8:	2301      	movs	r3, #1
 800eaca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eacc:	2300      	movs	r3, #0
 800eace:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7e1b      	ldrb	r3, [r3, #24]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	2b0a      	cmp	r3, #10
 800ead8:	f200 815f 	bhi.w	800ed9a <USBH_HandleControl+0x2da>
 800eadc:	a201      	add	r2, pc, #4	@ (adr r2, 800eae4 <USBH_HandleControl+0x24>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eb11 	.word	0x0800eb11
 800eae8:	0800eb2b 	.word	0x0800eb2b
 800eaec:	0800eb95 	.word	0x0800eb95
 800eaf0:	0800ebbb 	.word	0x0800ebbb
 800eaf4:	0800ebf3 	.word	0x0800ebf3
 800eaf8:	0800ec1d 	.word	0x0800ec1d
 800eafc:	0800ec6f 	.word	0x0800ec6f
 800eb00:	0800ec91 	.word	0x0800ec91
 800eb04:	0800eccd 	.word	0x0800eccd
 800eb08:	0800ecf3 	.word	0x0800ecf3
 800eb0c:	0800ed31 	.word	0x0800ed31
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f103 0110 	add.w	r1, r3, #16
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	795b      	ldrb	r3, [r3, #5]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f951 	bl	800edc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2202      	movs	r2, #2
 800eb26:	761a      	strb	r2, [r3, #24]
      break;
 800eb28:	e142      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	795b      	ldrb	r3, [r3, #5]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7f3 f8da 	bl	8001cea <USBH_LL_GetURBState>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eb3a:	7bbb      	ldrb	r3, [r7, #14]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d11e      	bne.n	800eb7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7c1b      	ldrb	r3, [r3, #16]
 800eb44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eb48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	8adb      	ldrh	r3, [r3, #22]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00a      	beq.n	800eb68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eb52:	7b7b      	ldrb	r3, [r7, #13]
 800eb54:	2b80      	cmp	r3, #128	@ 0x80
 800eb56:	d103      	bne.n	800eb60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2203      	movs	r2, #3
 800eb5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800eb5e:	e11e      	b.n	800ed9e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2205      	movs	r2, #5
 800eb64:	761a      	strb	r2, [r3, #24]
      break;
 800eb66:	e11a      	b.n	800ed9e <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800eb68:	7b7b      	ldrb	r3, [r7, #13]
 800eb6a:	2b80      	cmp	r3, #128	@ 0x80
 800eb6c:	d103      	bne.n	800eb76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2209      	movs	r2, #9
 800eb72:	761a      	strb	r2, [r3, #24]
      break;
 800eb74:	e113      	b.n	800ed9e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2207      	movs	r2, #7
 800eb7a:	761a      	strb	r2, [r3, #24]
      break;
 800eb7c:	e10f      	b.n	800ed9e <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800eb7e:	7bbb      	ldrb	r3, [r7, #14]
 800eb80:	2b04      	cmp	r3, #4
 800eb82:	d003      	beq.n	800eb8c <USBH_HandleControl+0xcc>
 800eb84:	7bbb      	ldrb	r3, [r7, #14]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	f040 8109 	bne.w	800ed9e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	220b      	movs	r2, #11
 800eb90:	761a      	strb	r2, [r3, #24]
      break;
 800eb92:	e104      	b.n	800ed9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6899      	ldr	r1, [r3, #8]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	899a      	ldrh	r2, [r3, #12]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	791b      	ldrb	r3, [r3, #4]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f948 	bl	800ee42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2204      	movs	r2, #4
 800ebb6:	761a      	strb	r2, [r3, #24]
      break;
 800ebb8:	e0fa      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	791b      	ldrb	r3, [r3, #4]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7f3 f892 	bl	8001cea <USBH_LL_GetURBState>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d102      	bne.n	800ebd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2209      	movs	r2, #9
 800ebd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ebd6:	7bbb      	ldrb	r3, [r7, #14]
 800ebd8:	2b05      	cmp	r3, #5
 800ebda:	d102      	bne.n	800ebe2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ebe0:	e0df      	b.n	800eda2 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800ebe2:	7bbb      	ldrb	r3, [r7, #14]
 800ebe4:	2b04      	cmp	r3, #4
 800ebe6:	f040 80dc 	bne.w	800eda2 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	220b      	movs	r2, #11
 800ebee:	761a      	strb	r2, [r3, #24]
      break;
 800ebf0:	e0d7      	b.n	800eda2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6899      	ldr	r1, [r3, #8]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	899a      	ldrh	r2, [r3, #12]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	795b      	ldrb	r3, [r3, #5]
 800ebfe:	2001      	movs	r0, #1
 800ec00:	9000      	str	r0, [sp, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f8f8 	bl	800edf8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2206      	movs	r2, #6
 800ec18:	761a      	strb	r2, [r3, #24]
      break;
 800ec1a:	e0c9      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	795b      	ldrb	r3, [r3, #5]
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7f3 f861 	bl	8001cea <USBH_LL_GetURBState>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d103      	bne.n	800ec3a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2207      	movs	r2, #7
 800ec36:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ec38:	e0b5      	b.n	800eda6 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800ec3a:	7bbb      	ldrb	r3, [r7, #14]
 800ec3c:	2b05      	cmp	r3, #5
 800ec3e:	d105      	bne.n	800ec4c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	220c      	movs	r2, #12
 800ec44:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ec46:	2303      	movs	r3, #3
 800ec48:	73fb      	strb	r3, [r7, #15]
      break;
 800ec4a:	e0ac      	b.n	800eda6 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ec4c:	7bbb      	ldrb	r3, [r7, #14]
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d103      	bne.n	800ec5a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2205      	movs	r2, #5
 800ec56:	761a      	strb	r2, [r3, #24]
      break;
 800ec58:	e0a5      	b.n	800eda6 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800ec5a:	7bbb      	ldrb	r3, [r7, #14]
 800ec5c:	2b04      	cmp	r3, #4
 800ec5e:	f040 80a2 	bne.w	800eda6 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	220b      	movs	r2, #11
 800ec66:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ec68:	2302      	movs	r3, #2
 800ec6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec6c:	e09b      	b.n	800eda6 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	791b      	ldrb	r3, [r3, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	2100      	movs	r1, #0
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 f8e3 	bl	800ee42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2208      	movs	r2, #8
 800ec8c:	761a      	strb	r2, [r3, #24]

      break;
 800ec8e:	e08f      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	791b      	ldrb	r3, [r3, #4]
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7f3 f827 	bl	8001cea <USBH_LL_GetURBState>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d105      	bne.n	800ecb2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	220d      	movs	r2, #13
 800ecaa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ecac:	2300      	movs	r3, #0
 800ecae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ecb0:	e07b      	b.n	800edaa <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800ecb2:	7bbb      	ldrb	r3, [r7, #14]
 800ecb4:	2b04      	cmp	r3, #4
 800ecb6:	d103      	bne.n	800ecc0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	220b      	movs	r2, #11
 800ecbc:	761a      	strb	r2, [r3, #24]
      break;
 800ecbe:	e074      	b.n	800edaa <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	2b05      	cmp	r3, #5
 800ecc4:	d171      	bne.n	800edaa <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800ecc6:	2303      	movs	r3, #3
 800ecc8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecca:	e06e      	b.n	800edaa <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	795b      	ldrb	r3, [r3, #5]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	9200      	str	r2, [sp, #0]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 f88d 	bl	800edf8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	220a      	movs	r2, #10
 800ecee:	761a      	strb	r2, [r3, #24]
      break;
 800ecf0:	e05e      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	795b      	ldrb	r3, [r3, #5]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7f2 fff6 	bl	8001cea <USBH_LL_GetURBState>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ed02:	7bbb      	ldrb	r3, [r7, #14]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d105      	bne.n	800ed14 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	220d      	movs	r2, #13
 800ed10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ed12:	e04c      	b.n	800edae <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ed14:	7bbb      	ldrb	r3, [r7, #14]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d103      	bne.n	800ed22 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2209      	movs	r2, #9
 800ed1e:	761a      	strb	r2, [r3, #24]
      break;
 800ed20:	e045      	b.n	800edae <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800ed22:	7bbb      	ldrb	r3, [r7, #14]
 800ed24:	2b04      	cmp	r3, #4
 800ed26:	d142      	bne.n	800edae <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	220b      	movs	r2, #11
 800ed2c:	761a      	strb	r2, [r3, #24]
      break;
 800ed2e:	e03e      	b.n	800edae <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	7e5b      	ldrb	r3, [r3, #25]
 800ed34:	3301      	adds	r3, #1
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	765a      	strb	r2, [r3, #25]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	7e5b      	ldrb	r3, [r3, #25]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d806      	bhi.n	800ed52 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ed50:	e02e      	b.n	800edb0 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ed58:	2106      	movs	r1, #6
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800ed64:	4815      	ldr	r0, [pc, #84]	@ (800edbc <USBH_HandleControl+0x2fc>)
 800ed66:	f002 fa25 	bl	80111b4 <iprintf>
 800ed6a:	4815      	ldr	r0, [pc, #84]	@ (800edc0 <USBH_HandleControl+0x300>)
 800ed6c:	f002 fa22 	bl	80111b4 <iprintf>
 800ed70:	200a      	movs	r0, #10
 800ed72:	f002 fa31 	bl	80111d8 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	795b      	ldrb	r3, [r3, #5]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f001 fded 	bl	801095c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	791b      	ldrb	r3, [r3, #4]
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 fde7 	bl	801095c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ed94:	2302      	movs	r3, #2
 800ed96:	73fb      	strb	r3, [r7, #15]
      break;
 800ed98:	e00a      	b.n	800edb0 <USBH_HandleControl+0x2f0>

    default:
      break;
 800ed9a:	bf00      	nop
 800ed9c:	e008      	b.n	800edb0 <USBH_HandleControl+0x2f0>
      break;
 800ed9e:	bf00      	nop
 800eda0:	e006      	b.n	800edb0 <USBH_HandleControl+0x2f0>
      break;
 800eda2:	bf00      	nop
 800eda4:	e004      	b.n	800edb0 <USBH_HandleControl+0x2f0>
      break;
 800eda6:	bf00      	nop
 800eda8:	e002      	b.n	800edb0 <USBH_HandleControl+0x2f0>
      break;
 800edaa:	bf00      	nop
 800edac:	e000      	b.n	800edb0 <USBH_HandleControl+0x2f0>
      break;
 800edae:	bf00      	nop
  }

  return status;
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	080128a8 	.word	0x080128a8
 800edc0:	08012984 	.word	0x08012984

0800edc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b088      	sub	sp, #32
 800edc8:	af04      	add	r7, sp, #16
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	4613      	mov	r3, r2
 800edd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800edd2:	79f9      	ldrb	r1, [r7, #7]
 800edd4:	2300      	movs	r3, #0
 800edd6:	9303      	str	r3, [sp, #12]
 800edd8:	2308      	movs	r3, #8
 800edda:	9302      	str	r3, [sp, #8]
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	2300      	movs	r3, #0
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	2300      	movs	r3, #0
 800ede6:	2200      	movs	r2, #0
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7f2 ff5a 	bl	8001ca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af04      	add	r7, sp, #16
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4611      	mov	r1, r2
 800ee04:	461a      	mov	r2, r3
 800ee06:	460b      	mov	r3, r1
 800ee08:	80fb      	strh	r3, [r7, #6]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ee1c:	7979      	ldrb	r1, [r7, #5]
 800ee1e:	7e3b      	ldrb	r3, [r7, #24]
 800ee20:	9303      	str	r3, [sp, #12]
 800ee22:	88fb      	ldrh	r3, [r7, #6]
 800ee24:	9302      	str	r3, [sp, #8]
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	2200      	movs	r2, #0
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7f2 ff35 	bl	8001ca2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b088      	sub	sp, #32
 800ee46:	af04      	add	r7, sp, #16
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	461a      	mov	r2, r3
 800ee50:	460b      	mov	r3, r1
 800ee52:	80fb      	strh	r3, [r7, #6]
 800ee54:	4613      	mov	r3, r2
 800ee56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ee58:	7979      	ldrb	r1, [r7, #5]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	9302      	str	r3, [sp, #8]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	2301      	movs	r3, #1
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7f2 ff17 	bl	8001ca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ee74:	2300      	movs	r3, #0

}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b088      	sub	sp, #32
 800ee82:	af04      	add	r7, sp, #16
 800ee84:	60f8      	str	r0, [r7, #12]
 800ee86:	60b9      	str	r1, [r7, #8]
 800ee88:	4611      	mov	r1, r2
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	80fb      	strh	r3, [r7, #6]
 800ee90:	4613      	mov	r3, r2
 800ee92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eea2:	7979      	ldrb	r1, [r7, #5]
 800eea4:	7e3b      	ldrb	r3, [r7, #24]
 800eea6:	9303      	str	r3, [sp, #12]
 800eea8:	88fb      	ldrh	r3, [r7, #6]
 800eeaa:	9302      	str	r3, [sp, #8]
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	9301      	str	r3, [sp, #4]
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	2302      	movs	r3, #2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7f2 fef2 	bl	8001ca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af04      	add	r7, sp, #16
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	4611      	mov	r1, r2
 800eed4:	461a      	mov	r2, r3
 800eed6:	460b      	mov	r3, r1
 800eed8:	80fb      	strh	r3, [r7, #6]
 800eeda:	4613      	mov	r3, r2
 800eedc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eede:	7979      	ldrb	r1, [r7, #5]
 800eee0:	2300      	movs	r3, #0
 800eee2:	9303      	str	r3, [sp, #12]
 800eee4:	88fb      	ldrh	r3, [r7, #6]
 800eee6:	9302      	str	r3, [sp, #8]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	2301      	movs	r3, #1
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	2302      	movs	r3, #2
 800eef2:	2201      	movs	r2, #1
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7f2 fed4 	bl	8001ca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	b089      	sub	sp, #36	@ 0x24
 800ef08:	af04      	add	r7, sp, #16
 800ef0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800ef12:	7919      	ldrb	r1, [r3, #4]
 800ef14:	2350      	movs	r3, #80	@ 0x50
 800ef16:	2206      	movs	r2, #6
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7fe fb09 	bl	800d530 <USBH_FindInterface>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	2bff      	cmp	r3, #255	@ 0xff
 800ef26:	d002      	beq.n	800ef2e <USBH_MSC_InterfaceInit+0x2a>
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d901      	bls.n	800ef32 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ef2e:	2302      	movs	r3, #2
 800ef30:	e106      	b.n	800f140 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800ef32:	7bfb      	ldrb	r3, [r7, #15]
 800ef34:	4619      	mov	r1, r3
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7fe fa92 	bl	800d460 <USBH_SelectInterface>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800ef46:	2302      	movs	r3, #2
 800ef48:	e0fa      	b.n	800f140 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 447c 	ldr.w	r4, [r3, #1148]	@ 0x47c
 800ef50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ef54:	f001 ff7a 	bl	8010e4c <malloc>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800ef62:	69db      	ldr	r3, [r3, #28]
 800ef64:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	e0e7      	b.n	800f140 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800ef70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef74:	2100      	movs	r1, #0
 800ef76:	68b8      	ldr	r0, [r7, #8]
 800ef78:	f002 f9cf 	bl	801131a <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	211a      	movs	r1, #26
 800ef82:	fb01 f303 	mul.w	r3, r1, r3
 800ef86:	4413      	add	r3, r2
 800ef88:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	b25b      	sxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da16      	bge.n	800efc2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	211a      	movs	r1, #26
 800ef9a:	fb01 f303 	mul.w	r3, r1, r3
 800ef9e:	4413      	add	r3, r2
 800efa0:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 800efa4:	781a      	ldrb	r2, [r3, #0]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800efaa:	7bfb      	ldrb	r3, [r7, #15]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	211a      	movs	r1, #26
 800efb0:	fb01 f303 	mul.w	r3, r1, r3
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 800efba:	881a      	ldrh	r2, [r3, #0]
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	815a      	strh	r2, [r3, #10]
 800efc0:	e015      	b.n	800efee <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	211a      	movs	r1, #26
 800efc8:	fb01 f303 	mul.w	r3, r1, r3
 800efcc:	4413      	add	r3, r2
 800efce:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 800efd2:	781a      	ldrb	r2, [r3, #0]
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	211a      	movs	r1, #26
 800efde:	fb01 f303 	mul.w	r3, r1, r3
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 800efe8:	881a      	ldrh	r2, [r3, #0]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800efee:	7bfb      	ldrb	r3, [r7, #15]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	211a      	movs	r1, #26
 800eff4:	fb01 f303 	mul.w	r3, r1, r3
 800eff8:	4413      	add	r3, r2
 800effa:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	b25b      	sxtb	r3, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	da16      	bge.n	800f034 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	211a      	movs	r1, #26
 800f00c:	fb01 f303 	mul.w	r3, r1, r3
 800f010:	4413      	add	r3, r2
 800f012:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	211a      	movs	r1, #26
 800f022:	fb01 f303 	mul.w	r3, r1, r3
 800f026:	4413      	add	r3, r2
 800f028:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 800f02c:	881a      	ldrh	r2, [r3, #0]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	815a      	strh	r2, [r3, #10]
 800f032:	e015      	b.n	800f060 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	211a      	movs	r1, #26
 800f03a:	fb01 f303 	mul.w	r3, r1, r3
 800f03e:	4413      	add	r3, r2
 800f040:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 800f044:	781a      	ldrb	r2, [r3, #0]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	211a      	movs	r1, #26
 800f050:	fb01 f303 	mul.w	r3, r1, r3
 800f054:	4413      	add	r3, r2
 800f056:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 800f05a:	881a      	ldrh	r2, [r3, #0]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2200      	movs	r2, #0
 800f064:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	2200      	movs	r2, #0
 800f06a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2200      	movs	r2, #0
 800f070:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	799b      	ldrb	r3, [r3, #6]
 800f076:	4619      	mov	r1, r3
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f001 fc4d 	bl	8010918 <USBH_AllocPipe>
 800f07e:	4603      	mov	r3, r0
 800f080:	461a      	mov	r2, r3
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	79db      	ldrb	r3, [r3, #7]
 800f08a:	4619      	mov	r1, r3
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f001 fc43 	bl	8010918 <USBH_AllocPipe>
 800f092:	4603      	mov	r3, r0
 800f094:	461a      	mov	r2, r3
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fefc 	bl	800fe98 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	799b      	ldrb	r3, [r3, #6]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d01e      	beq.n	800f0e6 <USBH_MSC_InterfaceInit+0x1e2>
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	891b      	ldrh	r3, [r3, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01a      	beq.n	800f0e6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	7959      	ldrb	r1, [r3, #5]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	7998      	ldrb	r0, [r3, #6]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	8912      	ldrh	r2, [r2, #8]
 800f0c8:	9202      	str	r2, [sp, #8]
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	9201      	str	r2, [sp, #4]
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	4623      	mov	r3, r4
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 fbf0 	bl	80108ba <USBH_OpenPipe>
 800f0da:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	79db      	ldrb	r3, [r3, #7]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d02c      	beq.n	800f13e <USBH_MSC_InterfaceInit+0x23a>
 800f0e4:	e001      	b.n	800f0ea <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e02a      	b.n	800f140 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	895b      	ldrh	r3, [r3, #10]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d025      	beq.n	800f13e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	7919      	ldrb	r1, [r3, #4]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	79d8      	ldrb	r0, [r3, #7]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	8952      	ldrh	r2, [r2, #10]
 800f10a:	9202      	str	r2, [sp, #8]
 800f10c:	2202      	movs	r2, #2
 800f10e:	9201      	str	r2, [sp, #4]
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	4623      	mov	r3, r4
 800f114:	4602      	mov	r2, r0
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f001 fbcf 	bl	80108ba <USBH_OpenPipe>
 800f11c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	791b      	ldrb	r3, [r3, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7f2 fe10 	bl	8001d4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	795b      	ldrb	r3, [r3, #5]
 800f130:	2200      	movs	r2, #0
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7f2 fe09 	bl	8001d4c <USBH_LL_SetToggle>

  return USBH_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	e000      	b.n	800f140 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800f13e:	2303      	movs	r3, #3
}
 800f140:	4618      	mov	r0, r3
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	bd90      	pop	{r4, r7, pc}

0800f148 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f156:	69db      	ldr	r3, [r3, #28]
 800f158:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	795b      	ldrb	r3, [r3, #5]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00e      	beq.n	800f180 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	795b      	ldrb	r3, [r3, #5]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f001 fbc5 	bl	80108f8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	795b      	ldrb	r3, [r3, #5]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f001 fbf1 	bl	801095c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	791b      	ldrb	r3, [r3, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00e      	beq.n	800f1a6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	791b      	ldrb	r3, [r3, #4]
 800f18c:	4619      	mov	r1, r3
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f001 fbb2 	bl	80108f8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	791b      	ldrb	r3, [r3, #4]
 800f198:	4619      	mov	r1, r3
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f001 fbde 	bl	801095c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00b      	beq.n	800f1ca <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f001 fe4e 	bl	8010e5c <free>
    phost->pActiveClass->pData = 0U;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f1e2:	69db      	ldr	r3, [r3, #28]
 800f1e4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	7b9b      	ldrb	r3, [r3, #14]
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d04a      	beq.n	800f288 <USBH_MSC_ClassRequest+0xb4>
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	dc54      	bgt.n	800f2a0 <USBH_MSC_ClassRequest+0xcc>
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d001      	beq.n	800f1fe <USBH_MSC_ClassRequest+0x2a>
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d150      	bne.n	800f2a0 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	4619      	mov	r1, r3
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fe29 	bl	800fe5a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800f208:	4603      	mov	r3, r0
 800f20a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
 800f20e:	2b03      	cmp	r3, #3
 800f210:	d104      	bne.n	800f21c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d140      	bne.n	800f2a4 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b02      	cmp	r3, #2
 800f228:	d804      	bhi.n	800f234 <USBH_MSC_ClassRequest+0x60>
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	e000      	b.n	800f236 <USBH_MSC_ClassRequest+0x62>
 800f234:	2202      	movs	r2, #2
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	4619      	mov	r1, r3
 800f240:	481c      	ldr	r0, [pc, #112]	@ (800f2b4 <USBH_MSC_ClassRequest+0xe0>)
 800f242:	f001 ffb7 	bl	80111b4 <iprintf>
 800f246:	200a      	movs	r0, #10
 800f248:	f001 ffc6 	bl	80111d8 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800f24c:	2300      	movs	r3, #0
 800f24e:	73bb      	strb	r3, [r7, #14]
 800f250:	e014      	b.n	800f27c <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800f252:	7bbb      	ldrb	r3, [r7, #14]
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	2134      	movs	r1, #52	@ 0x34
 800f258:	fb01 f303 	mul.w	r3, r1, r3
 800f25c:	4413      	add	r3, r2
 800f25e:	3392      	adds	r3, #146	@ 0x92
 800f260:	2202      	movs	r2, #2
 800f262:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	2134      	movs	r1, #52	@ 0x34
 800f26a:	fb01 f303 	mul.w	r3, r1, r3
 800f26e:	4413      	add	r3, r2
 800f270:	33c1      	adds	r3, #193	@ 0xc1
 800f272:	2200      	movs	r2, #0
 800f274:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	3301      	adds	r3, #1
 800f27a:	73bb      	strb	r3, [r7, #14]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	7bba      	ldrb	r2, [r7, #14]
 800f282:	429a      	cmp	r2, r3
 800f284:	d3e5      	bcc.n	800f252 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800f286:	e00d      	b.n	800f2a4 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800f288:	2100      	movs	r1, #0
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff f8a6 	bl	800e3dc <USBH_ClrFeature>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d108      	bne.n	800f2a8 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	7bda      	ldrb	r2, [r3, #15]
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800f29e:	e003      	b.n	800f2a8 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 800f2a0:	bf00      	nop
 800f2a2:	e002      	b.n	800f2aa <USBH_MSC_ClassRequest+0xd6>
      break;
 800f2a4:	bf00      	nop
 800f2a6:	e000      	b.n	800f2aa <USBH_MSC_ClassRequest+0xd6>
      break;
 800f2a8:	bf00      	nop
  }

  return status;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	080129b0 	.word	0x080129b0

0800f2b8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	7b1b      	ldrb	r3, [r3, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <USBH_MSC_Process+0x2e>
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	f000 8353 	beq.w	800f98a <USBH_MSC_Process+0x6d2>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800f2e4:	e354      	b.n	800f990 <USBH_MSC_Process+0x6d8>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	7812      	ldrb	r2, [r2, #0]
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	f080 8332 	bcs.w	800f95a <USBH_MSC_Process+0x6a2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	2334      	movs	r3, #52	@ 0x34
 800f302:	fb01 f303 	mul.w	r3, r1, r3
 800f306:	4413      	add	r3, r2
 800f308:	3391      	adds	r3, #145	@ 0x91
 800f30a:	2201      	movs	r2, #1
 800f30c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f314:	4619      	mov	r1, r3
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	2334      	movs	r3, #52	@ 0x34
 800f31a:	fb01 f303 	mul.w	r3, r1, r3
 800f31e:	4413      	add	r3, r2
 800f320:	3390      	adds	r3, #144	@ 0x90
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2b08      	cmp	r3, #8
 800f326:	f200 8326 	bhi.w	800f976 <USBH_MSC_Process+0x6be>
 800f32a:	a201      	add	r2, pc, #4	@ (adr r2, 800f330 <USBH_MSC_Process+0x78>)
 800f32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f330:	0800f355 	.word	0x0800f355
 800f334:	0800f977 	.word	0x0800f977
 800f338:	0800f49d 	.word	0x0800f49d
 800f33c:	0800f651 	.word	0x0800f651
 800f340:	0800f38f 	.word	0x0800f38f
 800f344:	0800f7bd 	.word	0x0800f7bd
 800f348:	0800f977 	.word	0x0800f977
 800f34c:	0800f977 	.word	0x0800f977
 800f350:	0800f949 	.word	0x0800f949
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f35a:	4619      	mov	r1, r3
 800f35c:	48b6      	ldr	r0, [pc, #728]	@ (800f638 <USBH_MSC_Process+0x380>)
 800f35e:	f001 ff29 	bl	80111b4 <iprintf>
 800f362:	200a      	movs	r0, #10
 800f364:	f001 ff38 	bl	80111d8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f36e:	4619      	mov	r1, r3
 800f370:	693a      	ldr	r2, [r7, #16]
 800f372:	2334      	movs	r3, #52	@ 0x34
 800f374:	fb01 f303 	mul.w	r3, r1, r3
 800f378:	4413      	add	r3, r2
 800f37a:	3390      	adds	r3, #144	@ 0x90
 800f37c:	2204      	movs	r2, #4
 800f37e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800f38c:	e2fc      	b.n	800f988 <USBH_MSC_Process+0x6d0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f394:	b2d9      	uxtb	r1, r3
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f39c:	461a      	mov	r2, r3
 800f39e:	2334      	movs	r3, #52	@ 0x34
 800f3a0:	fb02 f303 	mul.w	r3, r2, r3
 800f3a4:	3398      	adds	r3, #152	@ 0x98
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	3307      	adds	r3, #7
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f001 f88f 	bl	80104d2 <USBH_MSC_SCSI_Inquiry>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d141      	bne.n	800f442 <USBH_MSC_Process+0x18a>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	2334      	movs	r3, #52	@ 0x34
 800f3c8:	fb02 f303 	mul.w	r3, r2, r3
 800f3cc:	3398      	adds	r3, #152	@ 0x98
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	330a      	adds	r3, #10
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4899      	ldr	r0, [pc, #612]	@ (800f63c <USBH_MSC_Process+0x384>)
 800f3d8:	f001 feec 	bl	80111b4 <iprintf>
 800f3dc:	200a      	movs	r0, #10
 800f3de:	f001 fefb 	bl	80111d8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	2334      	movs	r3, #52	@ 0x34
 800f3ec:	fb02 f303 	mul.w	r3, r2, r3
 800f3f0:	33a0      	adds	r3, #160	@ 0xa0
 800f3f2:	693a      	ldr	r2, [r7, #16]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	330b      	adds	r3, #11
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4891      	ldr	r0, [pc, #580]	@ (800f640 <USBH_MSC_Process+0x388>)
 800f3fc:	f001 feda 	bl	80111b4 <iprintf>
 800f400:	200a      	movs	r0, #10
 800f402:	f001 fee9 	bl	80111d8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f40c:	461a      	mov	r2, r3
 800f40e:	2334      	movs	r3, #52	@ 0x34
 800f410:	fb02 f303 	mul.w	r3, r2, r3
 800f414:	33b0      	adds	r3, #176	@ 0xb0
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	4413      	add	r3, r2
 800f41a:	330c      	adds	r3, #12
 800f41c:	4619      	mov	r1, r3
 800f41e:	4889      	ldr	r0, [pc, #548]	@ (800f644 <USBH_MSC_Process+0x38c>)
 800f420:	f001 fec8 	bl	80111b4 <iprintf>
 800f424:	200a      	movs	r0, #10
 800f426:	f001 fed7 	bl	80111d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f430:	4619      	mov	r1, r3
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	2334      	movs	r3, #52	@ 0x34
 800f436:	fb01 f303 	mul.w	r3, r1, r3
 800f43a:	4413      	add	r3, r2
 800f43c:	3390      	adds	r3, #144	@ 0x90
 800f43e:	2202      	movs	r2, #2
 800f440:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	2b02      	cmp	r3, #2
 800f446:	d10c      	bne.n	800f462 <USBH_MSC_Process+0x1aa>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f44e:	4619      	mov	r1, r3
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	2334      	movs	r3, #52	@ 0x34
 800f454:	fb01 f303 	mul.w	r3, r1, r3
 800f458:	4413      	add	r3, r2
 800f45a:	3390      	adds	r3, #144	@ 0x90
 800f45c:	2205      	movs	r2, #5
 800f45e:	701a      	strb	r2, [r3, #0]
            break;
 800f460:	e28b      	b.n	800f97a <USBH_MSC_Process+0x6c2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	2b04      	cmp	r3, #4
 800f466:	f040 8288 	bne.w	800f97a <USBH_MSC_Process+0x6c2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f470:	4619      	mov	r1, r3
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	2334      	movs	r3, #52	@ 0x34
 800f476:	fb01 f303 	mul.w	r3, r1, r3
 800f47a:	4413      	add	r3, r2
 800f47c:	3390      	adds	r3, #144	@ 0x90
 800f47e:	2201      	movs	r2, #1
 800f480:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f488:	4619      	mov	r1, r3
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	2334      	movs	r3, #52	@ 0x34
 800f48e:	fb01 f303 	mul.w	r3, r1, r3
 800f492:	4413      	add	r3, r2
 800f494:	3391      	adds	r3, #145	@ 0x91
 800f496:	2202      	movs	r2, #2
 800f498:	701a      	strb	r2, [r3, #0]
            break;
 800f49a:	e26e      	b.n	800f97a <USBH_MSC_Process+0x6c2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 ff56 	bl	8010358 <USBH_MSC_SCSI_TestUnitReady>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800f4b0:	7bbb      	ldrb	r3, [r7, #14]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d14f      	bne.n	800f556 <USBH_MSC_Process+0x29e>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f4bc:	4619      	mov	r1, r3
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	2334      	movs	r3, #52	@ 0x34
 800f4c2:	fb01 f303 	mul.w	r3, r1, r3
 800f4c6:	4413      	add	r3, r2
 800f4c8:	3392      	adds	r3, #146	@ 0x92
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d012      	beq.n	800f4f6 <USBH_MSC_Process+0x23e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	2334      	movs	r3, #52	@ 0x34
 800f4dc:	fb01 f303 	mul.w	r3, r1, r3
 800f4e0:	4413      	add	r3, r2
 800f4e2:	33c1      	adds	r3, #193	@ 0xc1
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 800f4e8:	4857      	ldr	r0, [pc, #348]	@ (800f648 <USBH_MSC_Process+0x390>)
 800f4ea:	f001 fe63 	bl	80111b4 <iprintf>
 800f4ee:	200a      	movs	r0, #10
 800f4f0:	f001 fe72 	bl	80111d8 <putchar>
 800f4f4:	e00b      	b.n	800f50e <USBH_MSC_Process+0x256>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	693a      	ldr	r2, [r7, #16]
 800f500:	2334      	movs	r3, #52	@ 0x34
 800f502:	fb01 f303 	mul.w	r3, r1, r3
 800f506:	4413      	add	r3, r2
 800f508:	33c1      	adds	r3, #193	@ 0xc1
 800f50a:	2200      	movs	r2, #0
 800f50c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f514:	4619      	mov	r1, r3
 800f516:	693a      	ldr	r2, [r7, #16]
 800f518:	2334      	movs	r3, #52	@ 0x34
 800f51a:	fb01 f303 	mul.w	r3, r1, r3
 800f51e:	4413      	add	r3, r2
 800f520:	3390      	adds	r3, #144	@ 0x90
 800f522:	2203      	movs	r2, #3
 800f524:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f52c:	4619      	mov	r1, r3
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	2334      	movs	r3, #52	@ 0x34
 800f532:	fb01 f303 	mul.w	r3, r1, r3
 800f536:	4413      	add	r3, r2
 800f538:	3391      	adds	r3, #145	@ 0x91
 800f53a:	2200      	movs	r2, #0
 800f53c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f544:	4619      	mov	r1, r3
 800f546:	693a      	ldr	r2, [r7, #16]
 800f548:	2334      	movs	r3, #52	@ 0x34
 800f54a:	fb01 f303 	mul.w	r3, r1, r3
 800f54e:	4413      	add	r3, r2
 800f550:	3392      	adds	r3, #146	@ 0x92
 800f552:	2200      	movs	r2, #0
 800f554:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800f556:	7bbb      	ldrb	r3, [r7, #14]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d150      	bne.n	800f5fe <USBH_MSC_Process+0x346>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f562:	4619      	mov	r1, r3
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	2334      	movs	r3, #52	@ 0x34
 800f568:	fb01 f303 	mul.w	r3, r1, r3
 800f56c:	4413      	add	r3, r2
 800f56e:	3392      	adds	r3, #146	@ 0x92
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2b02      	cmp	r3, #2
 800f574:	d012      	beq.n	800f59c <USBH_MSC_Process+0x2e4>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f57c:	4619      	mov	r1, r3
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	2334      	movs	r3, #52	@ 0x34
 800f582:	fb01 f303 	mul.w	r3, r1, r3
 800f586:	4413      	add	r3, r2
 800f588:	33c1      	adds	r3, #193	@ 0xc1
 800f58a:	2201      	movs	r2, #1
 800f58c:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800f58e:	482f      	ldr	r0, [pc, #188]	@ (800f64c <USBH_MSC_Process+0x394>)
 800f590:	f001 fe10 	bl	80111b4 <iprintf>
 800f594:	200a      	movs	r0, #10
 800f596:	f001 fe1f 	bl	80111d8 <putchar>
 800f59a:	e00b      	b.n	800f5b4 <USBH_MSC_Process+0x2fc>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	693a      	ldr	r2, [r7, #16]
 800f5a6:	2334      	movs	r3, #52	@ 0x34
 800f5a8:	fb01 f303 	mul.w	r3, r1, r3
 800f5ac:	4413      	add	r3, r2
 800f5ae:	33c1      	adds	r3, #193	@ 0xc1
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	2334      	movs	r3, #52	@ 0x34
 800f5c0:	fb01 f303 	mul.w	r3, r1, r3
 800f5c4:	4413      	add	r3, r2
 800f5c6:	3390      	adds	r3, #144	@ 0x90
 800f5c8:	2205      	movs	r2, #5
 800f5ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	2334      	movs	r3, #52	@ 0x34
 800f5d8:	fb01 f303 	mul.w	r3, r1, r3
 800f5dc:	4413      	add	r3, r2
 800f5de:	3391      	adds	r3, #145	@ 0x91
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	2334      	movs	r3, #52	@ 0x34
 800f5f0:	fb01 f303 	mul.w	r3, r1, r3
 800f5f4:	4413      	add	r3, r2
 800f5f6:	3392      	adds	r3, #146	@ 0x92
 800f5f8:	2202      	movs	r2, #2
 800f5fa:	701a      	strb	r2, [r3, #0]
            break;
 800f5fc:	e1bf      	b.n	800f97e <USBH_MSC_Process+0x6c6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800f5fe:	7bbb      	ldrb	r3, [r7, #14]
 800f600:	2b04      	cmp	r3, #4
 800f602:	f040 81bc 	bne.w	800f97e <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f60c:	4619      	mov	r1, r3
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	2334      	movs	r3, #52	@ 0x34
 800f612:	fb01 f303 	mul.w	r3, r1, r3
 800f616:	4413      	add	r3, r2
 800f618:	3390      	adds	r3, #144	@ 0x90
 800f61a:	2201      	movs	r2, #1
 800f61c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f624:	4619      	mov	r1, r3
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	2334      	movs	r3, #52	@ 0x34
 800f62a:	fb01 f303 	mul.w	r3, r1, r3
 800f62e:	4413      	add	r3, r2
 800f630:	3391      	adds	r3, #145	@ 0x91
 800f632:	2202      	movs	r2, #2
 800f634:	701a      	strb	r2, [r3, #0]
            break;
 800f636:	e1a2      	b.n	800f97e <USBH_MSC_Process+0x6c6>
 800f638:	080129cc 	.word	0x080129cc
 800f63c:	080129d8 	.word	0x080129d8
 800f640:	080129f0 	.word	0x080129f0
 800f644:	08012a08 	.word	0x08012a08
 800f648:	08012a20 	.word	0x08012a20
 800f64c:	08012a34 	.word	0x08012a34
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f656:	b2d9      	uxtb	r1, r3
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f65e:	461a      	mov	r2, r3
 800f660:	2334      	movs	r3, #52	@ 0x34
 800f662:	fb02 f303 	mul.w	r3, r2, r3
 800f666:	3390      	adds	r3, #144	@ 0x90
 800f668:	693a      	ldr	r2, [r7, #16]
 800f66a:	4413      	add	r3, r2
 800f66c:	3304      	adds	r3, #4
 800f66e:	461a      	mov	r2, r3
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 feb4 	bl	80103de <USBH_MSC_SCSI_ReadCapacity>
 800f676:	4603      	mov	r3, r0
 800f678:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d170      	bne.n	800f762 <USBH_MSC_Process+0x4aa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f686:	4619      	mov	r1, r3
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	2334      	movs	r3, #52	@ 0x34
 800f68c:	fb01 f303 	mul.w	r3, r1, r3
 800f690:	4413      	add	r3, r2
 800f692:	33c1      	adds	r3, #193	@ 0xc1
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d142      	bne.n	800f720 <USBH_MSC_Process+0x468>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	2334      	movs	r3, #52	@ 0x34
 800f6a6:	fb01 f303 	mul.w	r3, r1, r3
 800f6aa:	4413      	add	r3, r2
 800f6ac:	3394      	adds	r3, #148	@ 0x94
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	@ 0xf8
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	6939      	ldr	r1, [r7, #16]
 800f6ba:	2234      	movs	r2, #52	@ 0x34
 800f6bc:	fb00 f202 	mul.w	r2, r0, r2
 800f6c0:	440a      	add	r2, r1
 800f6c2:	3298      	adds	r2, #152	@ 0x98
 800f6c4:	8812      	ldrh	r2, [r2, #0]
 800f6c6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	48b3      	ldr	r0, [pc, #716]	@ (800f99c <USBH_MSC_Process+0x6e4>)
 800f6ce:	f001 fd71 	bl	80111b4 <iprintf>
 800f6d2:	200a      	movs	r0, #10
 800f6d4:	f001 fd80 	bl	80111d8 <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f6de:	4619      	mov	r1, r3
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	2334      	movs	r3, #52	@ 0x34
 800f6e4:	fb01 f303 	mul.w	r3, r1, r3
 800f6e8:	4413      	add	r3, r2
 800f6ea:	3394      	adds	r3, #148	@ 0x94
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	48ab      	ldr	r0, [pc, #684]	@ (800f9a0 <USBH_MSC_Process+0x6e8>)
 800f6f2:	f001 fd5f 	bl	80111b4 <iprintf>
 800f6f6:	200a      	movs	r0, #10
 800f6f8:	f001 fd6e 	bl	80111d8 <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f702:	4619      	mov	r1, r3
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	2334      	movs	r3, #52	@ 0x34
 800f708:	fb01 f303 	mul.w	r3, r1, r3
 800f70c:	4413      	add	r3, r2
 800f70e:	3398      	adds	r3, #152	@ 0x98
 800f710:	881b      	ldrh	r3, [r3, #0]
 800f712:	4619      	mov	r1, r3
 800f714:	48a3      	ldr	r0, [pc, #652]	@ (800f9a4 <USBH_MSC_Process+0x6ec>)
 800f716:	f001 fd4d 	bl	80111b4 <iprintf>
 800f71a:	200a      	movs	r0, #10
 800f71c:	f001 fd5c 	bl	80111d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f726:	4619      	mov	r1, r3
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	2334      	movs	r3, #52	@ 0x34
 800f72c:	fb01 f303 	mul.w	r3, r1, r3
 800f730:	4413      	add	r3, r2
 800f732:	3390      	adds	r3, #144	@ 0x90
 800f734:	2201      	movs	r2, #1
 800f736:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f73e:	4619      	mov	r1, r3
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	2334      	movs	r3, #52	@ 0x34
 800f744:	fb01 f303 	mul.w	r3, r1, r3
 800f748:	4413      	add	r3, r2
 800f74a:	3391      	adds	r3, #145	@ 0x91
 800f74c:	2200      	movs	r2, #0
 800f74e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f756:	3301      	adds	r3, #1
 800f758:	b29a      	uxth	r2, r3
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800f760:	e10f      	b.n	800f982 <USBH_MSC_Process+0x6ca>
            else if (scsi_status == USBH_FAIL)
 800f762:	7bfb      	ldrb	r3, [r7, #15]
 800f764:	2b02      	cmp	r3, #2
 800f766:	d10c      	bne.n	800f782 <USBH_MSC_Process+0x4ca>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f76e:	4619      	mov	r1, r3
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	2334      	movs	r3, #52	@ 0x34
 800f774:	fb01 f303 	mul.w	r3, r1, r3
 800f778:	4413      	add	r3, r2
 800f77a:	3390      	adds	r3, #144	@ 0x90
 800f77c:	2205      	movs	r2, #5
 800f77e:	701a      	strb	r2, [r3, #0]
            break;
 800f780:	e0ff      	b.n	800f982 <USBH_MSC_Process+0x6ca>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800f782:	7bfb      	ldrb	r3, [r7, #15]
 800f784:	2b04      	cmp	r3, #4
 800f786:	f040 80fc 	bne.w	800f982 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f790:	4619      	mov	r1, r3
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	2334      	movs	r3, #52	@ 0x34
 800f796:	fb01 f303 	mul.w	r3, r1, r3
 800f79a:	4413      	add	r3, r2
 800f79c:	3390      	adds	r3, #144	@ 0x90
 800f79e:	2201      	movs	r2, #1
 800f7a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	693a      	ldr	r2, [r7, #16]
 800f7ac:	2334      	movs	r3, #52	@ 0x34
 800f7ae:	fb01 f303 	mul.w	r3, r1, r3
 800f7b2:	4413      	add	r3, r2
 800f7b4:	3391      	adds	r3, #145	@ 0x91
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	701a      	strb	r2, [r3, #0]
            break;
 800f7ba:	e0e2      	b.n	800f982 <USBH_MSC_Process+0x6ca>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f7c2:	b2d9      	uxtb	r1, r3
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	2334      	movs	r3, #52	@ 0x34
 800f7ce:	fb02 f303 	mul.w	r3, r2, r3
 800f7d2:	3398      	adds	r3, #152	@ 0x98
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	3304      	adds	r3, #4
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 ff1d 	bl	801061c <USBH_MSC_SCSI_RequestSense>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800f7e6:	7bfb      	ldrb	r3, [r7, #15]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d17b      	bne.n	800f8e4 <USBH_MSC_Process+0x62c>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	2334      	movs	r3, #52	@ 0x34
 800f7f8:	fb01 f303 	mul.w	r3, r1, r3
 800f7fc:	4413      	add	r3, r2
 800f7fe:	339c      	adds	r3, #156	@ 0x9c
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b06      	cmp	r3, #6
 800f804:	d00c      	beq.n	800f820 <USBH_MSC_Process+0x568>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f80c:	4619      	mov	r1, r3
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	2334      	movs	r3, #52	@ 0x34
 800f812:	fb01 f303 	mul.w	r3, r1, r3
 800f816:	4413      	add	r3, r2
 800f818:	339c      	adds	r3, #156	@ 0x9c
 800f81a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d117      	bne.n	800f850 <USBH_MSC_Process+0x598>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	f242 720f 	movw	r2, #9999	@ 0x270f
 800f832:	4293      	cmp	r3, r2
 800f834:	d80c      	bhi.n	800f850 <USBH_MSC_Process+0x598>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f83c:	4619      	mov	r1, r3
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	2334      	movs	r3, #52	@ 0x34
 800f842:	fb01 f303 	mul.w	r3, r1, r3
 800f846:	4413      	add	r3, r2
 800f848:	3390      	adds	r3, #144	@ 0x90
 800f84a:	2202      	movs	r2, #2
 800f84c:	701a      	strb	r2, [r3, #0]
                  break;
 800f84e:	e09b      	b.n	800f988 <USBH_MSC_Process+0x6d0>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f856:	4619      	mov	r1, r3
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	2334      	movs	r3, #52	@ 0x34
 800f85c:	fb01 f303 	mul.w	r3, r1, r3
 800f860:	4413      	add	r3, r2
 800f862:	339c      	adds	r3, #156	@ 0x9c
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	4619      	mov	r1, r3
 800f868:	484f      	ldr	r0, [pc, #316]	@ (800f9a8 <USBH_MSC_Process+0x6f0>)
 800f86a:	f001 fca3 	bl	80111b4 <iprintf>
 800f86e:	200a      	movs	r0, #10
 800f870:	f001 fcb2 	bl	80111d8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f87a:	4619      	mov	r1, r3
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	2334      	movs	r3, #52	@ 0x34
 800f880:	fb01 f303 	mul.w	r3, r1, r3
 800f884:	4413      	add	r3, r2
 800f886:	339d      	adds	r3, #157	@ 0x9d
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	4619      	mov	r1, r3
 800f88c:	4847      	ldr	r0, [pc, #284]	@ (800f9ac <USBH_MSC_Process+0x6f4>)
 800f88e:	f001 fc91 	bl	80111b4 <iprintf>
 800f892:	200a      	movs	r0, #10
 800f894:	f001 fca0 	bl	80111d8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f89e:	4619      	mov	r1, r3
 800f8a0:	693a      	ldr	r2, [r7, #16]
 800f8a2:	2334      	movs	r3, #52	@ 0x34
 800f8a4:	fb01 f303 	mul.w	r3, r1, r3
 800f8a8:	4413      	add	r3, r2
 800f8aa:	339e      	adds	r3, #158	@ 0x9e
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	483f      	ldr	r0, [pc, #252]	@ (800f9b0 <USBH_MSC_Process+0x6f8>)
 800f8b2:	f001 fc7f 	bl	80111b4 <iprintf>
 800f8b6:	200a      	movs	r0, #10
 800f8b8:	f001 fc8e 	bl	80111d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	2334      	movs	r3, #52	@ 0x34
 800f8c8:	fb01 f303 	mul.w	r3, r1, r3
 800f8cc:	4413      	add	r3, r2
 800f8ce:	3390      	adds	r3, #144	@ 0x90
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8da:	3301      	adds	r3, #1
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	d112      	bne.n	800f910 <USBH_MSC_Process+0x658>
              USBH_UsrLog("MSC Device NOT ready");
 800f8ea:	4832      	ldr	r0, [pc, #200]	@ (800f9b4 <USBH_MSC_Process+0x6fc>)
 800f8ec:	f001 fc62 	bl	80111b4 <iprintf>
 800f8f0:	200a      	movs	r0, #10
 800f8f2:	f001 fc71 	bl	80111d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	2334      	movs	r3, #52	@ 0x34
 800f902:	fb01 f303 	mul.w	r3, r1, r3
 800f906:	4413      	add	r3, r2
 800f908:	3390      	adds	r3, #144	@ 0x90
 800f90a:	2208      	movs	r2, #8
 800f90c:	701a      	strb	r2, [r3, #0]
            break;
 800f90e:	e03a      	b.n	800f986 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	2b04      	cmp	r3, #4
 800f914:	d137      	bne.n	800f986 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f91c:	4619      	mov	r1, r3
 800f91e:	693a      	ldr	r2, [r7, #16]
 800f920:	2334      	movs	r3, #52	@ 0x34
 800f922:	fb01 f303 	mul.w	r3, r1, r3
 800f926:	4413      	add	r3, r2
 800f928:	3390      	adds	r3, #144	@ 0x90
 800f92a:	2201      	movs	r2, #1
 800f92c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f934:	4619      	mov	r1, r3
 800f936:	693a      	ldr	r2, [r7, #16]
 800f938:	2334      	movs	r3, #52	@ 0x34
 800f93a:	fb01 f303 	mul.w	r3, r1, r3
 800f93e:	4413      	add	r3, r2
 800f940:	3391      	adds	r3, #145	@ 0x91
 800f942:	2202      	movs	r2, #2
 800f944:	701a      	strb	r2, [r3, #0]
            break;
 800f946:	e01e      	b.n	800f986 <USBH_MSC_Process+0x6ce>
            MSC_Handle->current_lun++;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f94e:	3301      	adds	r3, #1
 800f950:	b29a      	uxth	r2, r3
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800f958:	e016      	b.n	800f988 <USBH_MSC_Process+0x6d0>
        MSC_Handle->current_lun = 0U;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	2200      	movs	r2, #0
 800f95e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2201      	movs	r2, #1
 800f966:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800f96e:	2102      	movs	r1, #2
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	4798      	blx	r3
      break;
 800f974:	e00c      	b.n	800f990 <USBH_MSC_Process+0x6d8>
            break;
 800f976:	bf00      	nop
 800f978:	e00a      	b.n	800f990 <USBH_MSC_Process+0x6d8>
            break;
 800f97a:	bf00      	nop
 800f97c:	e008      	b.n	800f990 <USBH_MSC_Process+0x6d8>
            break;
 800f97e:	bf00      	nop
 800f980:	e006      	b.n	800f990 <USBH_MSC_Process+0x6d8>
            break;
 800f982:	bf00      	nop
 800f984:	e004      	b.n	800f990 <USBH_MSC_Process+0x6d8>
            break;
 800f986:	bf00      	nop
      break;
 800f988:	e002      	b.n	800f990 <USBH_MSC_Process+0x6d8>
      error = USBH_OK;
 800f98a:	2300      	movs	r3, #0
 800f98c:	75fb      	strb	r3, [r7, #23]
      break;
 800f98e:	bf00      	nop
  }
  return error;
 800f990:	7dfb      	ldrb	r3, [r7, #23]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3718      	adds	r7, #24
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	08012a4c 	.word	0x08012a4c
 800f9a0:	08012a6c 	.word	0x08012a6c
 800f9a4:	08012a80 	.word	0x08012a80
 800f9a8:	08012a94 	.word	0x08012a94
 800f9ac:	08012aa4 	.word	0x08012aa4
 800f9b0:	08012ac0 	.word	0x08012ac0
 800f9b4:	08012a34 	.word	0x08012a34

0800f9b8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	370c      	adds	r7, #12
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
	...

0800f9d0 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b088      	sub	sp, #32
 800f9d4:	af02      	add	r7, sp, #8
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800f9e2:	69db      	ldr	r3, [r3, #28]
 800f9e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800f9ee:	78fb      	ldrb	r3, [r7, #3]
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	2134      	movs	r1, #52	@ 0x34
 800f9f4:	fb01 f303 	mul.w	r3, r1, r3
 800f9f8:	4413      	add	r3, r2
 800f9fa:	3390      	adds	r3, #144	@ 0x90
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	2b07      	cmp	r3, #7
 800fa00:	d03d      	beq.n	800fa7e <USBH_MSC_RdWrProcess+0xae>
 800fa02:	2b07      	cmp	r3, #7
 800fa04:	f300 80dc 	bgt.w	800fbc0 <USBH_MSC_RdWrProcess+0x1f0>
 800fa08:	2b05      	cmp	r3, #5
 800fa0a:	d06d      	beq.n	800fae8 <USBH_MSC_RdWrProcess+0x118>
 800fa0c:	2b06      	cmp	r3, #6
 800fa0e:	f040 80d7 	bne.w	800fbc0 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800fa12:	78f9      	ldrb	r1, [r7, #3]
 800fa14:	2300      	movs	r3, #0
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 fee1 	bl	80107e4 <USBH_MSC_SCSI_Read>
 800fa22:	4603      	mov	r3, r0
 800fa24:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10b      	bne.n	800fa44 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	693a      	ldr	r2, [r7, #16]
 800fa30:	2134      	movs	r1, #52	@ 0x34
 800fa32:	fb01 f303 	mul.w	r3, r1, r3
 800fa36:	4413      	add	r3, r2
 800fa38:	3390      	adds	r3, #144	@ 0x90
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa42:	e0bf      	b.n	800fbc4 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800fa44:	7bfb      	ldrb	r3, [r7, #15]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d109      	bne.n	800fa5e <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	693a      	ldr	r2, [r7, #16]
 800fa4e:	2134      	movs	r1, #52	@ 0x34
 800fa50:	fb01 f303 	mul.w	r3, r1, r3
 800fa54:	4413      	add	r3, r2
 800fa56:	3390      	adds	r3, #144	@ 0x90
 800fa58:	2205      	movs	r2, #5
 800fa5a:	701a      	strb	r2, [r3, #0]
      break;
 800fa5c:	e0b2      	b.n	800fbc4 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	f040 80af 	bne.w	800fbc4 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800fa66:	78fb      	ldrb	r3, [r7, #3]
 800fa68:	693a      	ldr	r2, [r7, #16]
 800fa6a:	2134      	movs	r1, #52	@ 0x34
 800fa6c:	fb01 f303 	mul.w	r3, r1, r3
 800fa70:	4413      	add	r3, r2
 800fa72:	3390      	adds	r3, #144	@ 0x90
 800fa74:	2208      	movs	r2, #8
 800fa76:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800fa78:	2302      	movs	r3, #2
 800fa7a:	75fb      	strb	r3, [r7, #23]
      break;
 800fa7c:	e0a2      	b.n	800fbc4 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800fa7e:	78f9      	ldrb	r1, [r7, #3]
 800fa80:	2300      	movs	r3, #0
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	2300      	movs	r3, #0
 800fa86:	2200      	movs	r2, #0
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fe40 	bl	801070e <USBH_MSC_SCSI_Write>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d10b      	bne.n	800fab0 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	2134      	movs	r1, #52	@ 0x34
 800fa9e:	fb01 f303 	mul.w	r3, r1, r3
 800faa2:	4413      	add	r3, r2
 800faa4:	3390      	adds	r3, #144	@ 0x90
 800faa6:	2201      	movs	r2, #1
 800faa8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800faae:	e08b      	b.n	800fbc8 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	d109      	bne.n	800faca <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800fab6:	78fb      	ldrb	r3, [r7, #3]
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	2134      	movs	r1, #52	@ 0x34
 800fabc:	fb01 f303 	mul.w	r3, r1, r3
 800fac0:	4413      	add	r3, r2
 800fac2:	3390      	adds	r3, #144	@ 0x90
 800fac4:	2205      	movs	r2, #5
 800fac6:	701a      	strb	r2, [r3, #0]
      break;
 800fac8:	e07e      	b.n	800fbc8 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800faca:	7bfb      	ldrb	r3, [r7, #15]
 800facc:	2b04      	cmp	r3, #4
 800face:	d17b      	bne.n	800fbc8 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800fad0:	78fb      	ldrb	r3, [r7, #3]
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	2134      	movs	r1, #52	@ 0x34
 800fad6:	fb01 f303 	mul.w	r3, r1, r3
 800fada:	4413      	add	r3, r2
 800fadc:	3390      	adds	r3, #144	@ 0x90
 800fade:	2208      	movs	r2, #8
 800fae0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800fae2:	2302      	movs	r3, #2
 800fae4:	75fb      	strb	r3, [r7, #23]
      break;
 800fae6:	e06f      	b.n	800fbc8 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800fae8:	78fb      	ldrb	r3, [r7, #3]
 800faea:	2234      	movs	r2, #52	@ 0x34
 800faec:	fb02 f303 	mul.w	r3, r2, r3
 800faf0:	3398      	adds	r3, #152	@ 0x98
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	4413      	add	r3, r2
 800faf6:	1d1a      	adds	r2, r3, #4
 800faf8:	78fb      	ldrb	r3, [r7, #3]
 800fafa:	4619      	mov	r1, r3
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fd8d 	bl	801061c <USBH_MSC_SCSI_RequestSense>
 800fb02:	4603      	mov	r3, r0
 800fb04:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d140      	bne.n	800fb8e <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	693a      	ldr	r2, [r7, #16]
 800fb10:	2134      	movs	r1, #52	@ 0x34
 800fb12:	fb01 f303 	mul.w	r3, r1, r3
 800fb16:	4413      	add	r3, r2
 800fb18:	339c      	adds	r3, #156	@ 0x9c
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	482e      	ldr	r0, [pc, #184]	@ (800fbd8 <USBH_MSC_RdWrProcess+0x208>)
 800fb20:	f001 fb48 	bl	80111b4 <iprintf>
 800fb24:	200a      	movs	r0, #10
 800fb26:	f001 fb57 	bl	80111d8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800fb2a:	78fb      	ldrb	r3, [r7, #3]
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	2134      	movs	r1, #52	@ 0x34
 800fb30:	fb01 f303 	mul.w	r3, r1, r3
 800fb34:	4413      	add	r3, r2
 800fb36:	339d      	adds	r3, #157	@ 0x9d
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	4827      	ldr	r0, [pc, #156]	@ (800fbdc <USBH_MSC_RdWrProcess+0x20c>)
 800fb3e:	f001 fb39 	bl	80111b4 <iprintf>
 800fb42:	200a      	movs	r0, #10
 800fb44:	f001 fb48 	bl	80111d8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800fb48:	78fb      	ldrb	r3, [r7, #3]
 800fb4a:	693a      	ldr	r2, [r7, #16]
 800fb4c:	2134      	movs	r1, #52	@ 0x34
 800fb4e:	fb01 f303 	mul.w	r3, r1, r3
 800fb52:	4413      	add	r3, r2
 800fb54:	339e      	adds	r3, #158	@ 0x9e
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	4619      	mov	r1, r3
 800fb5a:	4821      	ldr	r0, [pc, #132]	@ (800fbe0 <USBH_MSC_RdWrProcess+0x210>)
 800fb5c:	f001 fb2a 	bl	80111b4 <iprintf>
 800fb60:	200a      	movs	r0, #10
 800fb62:	f001 fb39 	bl	80111d8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800fb66:	78fb      	ldrb	r3, [r7, #3]
 800fb68:	693a      	ldr	r2, [r7, #16]
 800fb6a:	2134      	movs	r1, #52	@ 0x34
 800fb6c:	fb01 f303 	mul.w	r3, r1, r3
 800fb70:	4413      	add	r3, r2
 800fb72:	3390      	adds	r3, #144	@ 0x90
 800fb74:	2201      	movs	r2, #1
 800fb76:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800fb78:	78fb      	ldrb	r3, [r7, #3]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	2134      	movs	r1, #52	@ 0x34
 800fb7e:	fb01 f303 	mul.w	r3, r1, r3
 800fb82:	4413      	add	r3, r2
 800fb84:	3391      	adds	r3, #145	@ 0x91
 800fb86:	2202      	movs	r2, #2
 800fb88:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	d106      	bne.n	800fba2 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800fb94:	4813      	ldr	r0, [pc, #76]	@ (800fbe4 <USBH_MSC_RdWrProcess+0x214>)
 800fb96:	f001 fb0d 	bl	80111b4 <iprintf>
 800fb9a:	200a      	movs	r0, #10
 800fb9c:	f001 fb1c 	bl	80111d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fba0:	e014      	b.n	800fbcc <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	d111      	bne.n	800fbcc <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800fba8:	78fb      	ldrb	r3, [r7, #3]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	2134      	movs	r1, #52	@ 0x34
 800fbae:	fb01 f303 	mul.w	r3, r1, r3
 800fbb2:	4413      	add	r3, r2
 800fbb4:	3390      	adds	r3, #144	@ 0x90
 800fbb6:	2208      	movs	r2, #8
 800fbb8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800fbba:	2302      	movs	r3, #2
 800fbbc:	75fb      	strb	r3, [r7, #23]
      break;
 800fbbe:	e005      	b.n	800fbcc <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800fbc0:	bf00      	nop
 800fbc2:	e004      	b.n	800fbce <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800fbc4:	bf00      	nop
 800fbc6:	e002      	b.n	800fbce <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800fbc8:	bf00      	nop
 800fbca:	e000      	b.n	800fbce <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800fbcc:	bf00      	nop

  }
  return error;
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3718      	adds	r7, #24
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	08012a94 	.word	0x08012a94
 800fbdc:	08012aa4 	.word	0x08012aa4
 800fbe0:	08012ac0 	.word	0x08012ac0
 800fbe4:	08012a34 	.word	0x08012a34

0800fbe8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fbfa:	69db      	ldr	r3, [r3, #28]
 800fbfc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b0b      	cmp	r3, #11
 800fc06:	d10c      	bne.n	800fc22 <USBH_MSC_UnitIsReady+0x3a>
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	2134      	movs	r1, #52	@ 0x34
 800fc0e:	fb01 f303 	mul.w	r3, r1, r3
 800fc12:	4413      	add	r3, r2
 800fc14:	3391      	adds	r3, #145	@ 0x91
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d102      	bne.n	800fc22 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	73fb      	strb	r3, [r7, #15]
 800fc20:	e001      	b.n	800fc26 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800fc22:	2300      	movs	r3, #0
 800fc24:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3714      	adds	r7, #20
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	607a      	str	r2, [r7, #4]
 800fc40:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fc48:	69db      	ldr	r3, [r3, #28]
 800fc4a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b0b      	cmp	r3, #11
 800fc54:	d10d      	bne.n	800fc72 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800fc56:	7afb      	ldrb	r3, [r7, #11]
 800fc58:	2234      	movs	r2, #52	@ 0x34
 800fc5a:	fb02 f303 	mul.w	r3, r2, r3
 800fc5e:	3390      	adds	r3, #144	@ 0x90
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	4413      	add	r3, r2
 800fc64:	2234      	movs	r2, #52	@ 0x34
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 fb9c 	bl	80113a6 <memcpy>
    return USBH_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	e000      	b.n	800fc74 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800fc72:	2302      	movs	r3, #2
  }
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3718      	adds	r7, #24
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af02      	add	r7, sp, #8
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	607a      	str	r2, [r7, #4]
 800fc86:	603b      	str	r3, [r7, #0]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fc92:	69db      	ldr	r3, [r3, #28]
 800fc94:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00e      	beq.n	800fcc0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800fca8:	2b0b      	cmp	r3, #11
 800fcaa:	d109      	bne.n	800fcc0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	2134      	movs	r1, #52	@ 0x34
 800fcb2:	fb01 f303 	mul.w	r3, r1, r3
 800fcb6:	4413      	add	r3, r2
 800fcb8:	3390      	adds	r3, #144	@ 0x90
 800fcba:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d001      	beq.n	800fcc4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	e040      	b.n	800fd46 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	2206      	movs	r2, #6
 800fcc8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800fcca:	7afb      	ldrb	r3, [r7, #11]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	2134      	movs	r1, #52	@ 0x34
 800fcd0:	fb01 f303 	mul.w	r3, r1, r3
 800fcd4:	4413      	add	r3, r2
 800fcd6:	3390      	adds	r3, #144	@ 0x90
 800fcd8:	2206      	movs	r2, #6
 800fcda:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800fcdc:	7afb      	ldrb	r3, [r7, #11]
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800fce6:	7af9      	ldrb	r1, [r7, #11]
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f000 fd77 	bl	80107e4 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800fcfc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800fcfe:	e016      	b.n	800fd2e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	1ad2      	subs	r2, r2, r3
 800fd0a:	6a3b      	ldr	r3, [r7, #32]
 800fd0c:	f242 7110 	movw	r1, #10000	@ 0x2710
 800fd10:	fb01 f303 	mul.w	r3, r1, r3
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d805      	bhi.n	800fd24 <USBH_MSC_Read+0xa8>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d104      	bne.n	800fd2e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	2201      	movs	r2, #1
 800fd28:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	e00b      	b.n	800fd46 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800fd2e:	7afb      	ldrb	r3, [r7, #11]
 800fd30:	4619      	mov	r1, r3
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f7ff fe4c 	bl	800f9d0 <USBH_MSC_RdWrProcess>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d0e0      	beq.n	800fd00 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	2201      	movs	r2, #1
 800fd42:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b088      	sub	sp, #32
 800fd52:	af02      	add	r7, sp, #8
 800fd54:	60f8      	str	r0, [r7, #12]
 800fd56:	607a      	str	r2, [r7, #4]
 800fd58:	603b      	str	r3, [r7, #0]
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fd64:	69db      	ldr	r3, [r3, #28]
 800fd66:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00e      	beq.n	800fd92 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800fd7a:	2b0b      	cmp	r3, #11
 800fd7c:	d109      	bne.n	800fd92 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800fd7e:	7afb      	ldrb	r3, [r7, #11]
 800fd80:	697a      	ldr	r2, [r7, #20]
 800fd82:	2134      	movs	r1, #52	@ 0x34
 800fd84:	fb01 f303 	mul.w	r3, r1, r3
 800fd88:	4413      	add	r3, r2
 800fd8a:	3390      	adds	r3, #144	@ 0x90
 800fd8c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d001      	beq.n	800fd96 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800fd92:	2302      	movs	r3, #2
 800fd94:	e040      	b.n	800fe18 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2207      	movs	r2, #7
 800fd9a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800fd9c:	7afb      	ldrb	r3, [r7, #11]
 800fd9e:	697a      	ldr	r2, [r7, #20]
 800fda0:	2134      	movs	r1, #52	@ 0x34
 800fda2:	fb01 f303 	mul.w	r3, r1, r3
 800fda6:	4413      	add	r3, r2
 800fda8:	3390      	adds	r3, #144	@ 0x90
 800fdaa:	2207      	movs	r2, #7
 800fdac:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800fdae:	7afb      	ldrb	r3, [r7, #11]
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800fdb8:	7af9      	ldrb	r1, [r7, #11]
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f000 fca3 	bl	801070e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 800fdce:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800fdd0:	e016      	b.n	800fe00 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	1ad2      	subs	r2, r2, r3
 800fddc:	6a3b      	ldr	r3, [r7, #32]
 800fdde:	f242 7110 	movw	r1, #10000	@ 0x2710
 800fde2:	fb01 f303 	mul.w	r3, r1, r3
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d805      	bhi.n	800fdf6 <USBH_MSC_Write+0xa8>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d104      	bne.n	800fe00 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e00b      	b.n	800fe18 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800fe00:	7afb      	ldrb	r3, [r7, #11]
 800fe02:	4619      	mov	r1, r3
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fde3 	bl	800f9d0 <USBH_MSC_RdWrProcess>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d0e0      	beq.n	800fdd2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2201      	movs	r2, #1
 800fe14:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800fe16:	2300      	movs	r3, #0
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2221      	movs	r2, #33	@ 0x21
 800fe2c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	22ff      	movs	r2, #255	@ 0xff
 800fe32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800fe46:	2200      	movs	r2, #0
 800fe48:	2100      	movs	r1, #0
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7fe fdfb 	bl	800ea46 <USBH_CtlReq>
 800fe50:	4603      	mov	r3, r0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b082      	sub	sp, #8
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	22a1      	movs	r2, #161	@ 0xa1
 800fe68:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	22fe      	movs	r2, #254	@ 0xfe
 800fe6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800fe82:	2201      	movs	r2, #1
 800fe84:	6839      	ldr	r1, [r7, #0]
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fe fddd 	bl	800ea46 <USBH_CtlReq>
 800fe8c:	4603      	mov	r3, r0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fea6:	69db      	ldr	r3, [r3, #28]
 800fea8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	4a09      	ldr	r2, [pc, #36]	@ (800fed4 <USBH_MSC_BOT_Init+0x3c>)
 800feae:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4a09      	ldr	r2, [pc, #36]	@ (800fed8 <USBH_MSC_BOT_Init+0x40>)
 800feb4:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2201      	movs	r2, #1
 800feba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3714      	adds	r7, #20
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr
 800fed4:	43425355 	.word	0x43425355
 800fed8:	20304050 	.word	0x20304050

0800fedc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b088      	sub	sp, #32
 800fee0:	af02      	add	r7, sp, #8
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	460b      	mov	r3, r1
 800fee6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800fee8:	2301      	movs	r3, #1
 800feea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800feec:	2301      	movs	r3, #1
 800feee:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800fef0:	2301      	movs	r3, #1
 800fef2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fef4:	2300      	movs	r3, #0
 800fef6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 800fefe:	69db      	ldr	r3, [r3, #28]
 800ff00:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ff02:	2300      	movs	r3, #0
 800ff04:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	2b0a      	cmp	r3, #10
 800ff10:	f200 819e 	bhi.w	8010250 <USBH_MSC_BOT_Process+0x374>
 800ff14:	a201      	add	r2, pc, #4	@ (adr r2, 800ff1c <USBH_MSC_BOT_Process+0x40>)
 800ff16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff1a:	bf00      	nop
 800ff1c:	0800ff49 	.word	0x0800ff49
 800ff20:	0800ff71 	.word	0x0800ff71
 800ff24:	0800ffdb 	.word	0x0800ffdb
 800ff28:	0800fff9 	.word	0x0800fff9
 800ff2c:	0801007d 	.word	0x0801007d
 800ff30:	0801009f 	.word	0x0801009f
 800ff34:	08010137 	.word	0x08010137
 800ff38:	08010153 	.word	0x08010153
 800ff3c:	080101a5 	.word	0x080101a5
 800ff40:	080101d5 	.word	0x080101d5
 800ff44:	08010237 	.word	0x08010237
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	78fa      	ldrb	r2, [r7, #3]
 800ff4c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	2202      	movs	r2, #2
 800ff54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	795b      	ldrb	r3, [r3, #5]
 800ff62:	2201      	movs	r2, #1
 800ff64:	9200      	str	r2, [sp, #0]
 800ff66:	221f      	movs	r2, #31
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7fe ff88 	bl	800ee7e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800ff6e:	e17e      	b.n	801026e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	795b      	ldrb	r3, [r3, #5]
 800ff74:	4619      	mov	r1, r3
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7f1 feb7 	bl	8001cea <USBH_LL_GetURBState>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ff80:	7d3b      	ldrb	r3, [r7, #20]
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d118      	bne.n	800ffb8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00f      	beq.n	800ffae <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800ff94:	b25b      	sxtb	r3, r3
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da04      	bge.n	800ffa4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2203      	movs	r2, #3
 800ff9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ffa2:	e157      	b.n	8010254 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	2205      	movs	r2, #5
 800ffa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800ffac:	e152      	b.n	8010254 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	2207      	movs	r2, #7
 800ffb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800ffb6:	e14d      	b.n	8010254 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ffb8:	7d3b      	ldrb	r3, [r7, #20]
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d104      	bne.n	800ffc8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800ffc6:	e145      	b.n	8010254 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ffc8:	7d3b      	ldrb	r3, [r7, #20]
 800ffca:	2b05      	cmp	r3, #5
 800ffcc:	f040 8142 	bne.w	8010254 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	220a      	movs	r2, #10
 800ffd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800ffd8:	e13c      	b.n	8010254 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	895a      	ldrh	r2, [r3, #10]
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	791b      	ldrb	r3, [r3, #4]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7fe ff6d 	bl	800eec8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	2204      	movs	r2, #4
 800fff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800fff6:	e13a      	b.n	801026e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	791b      	ldrb	r3, [r3, #4]
 800fffc:	4619      	mov	r1, r3
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7f1 fe73 	bl	8001cea <USBH_LL_GetURBState>
 8010004:	4603      	mov	r3, r0
 8010006:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010008:	7d3b      	ldrb	r3, [r7, #20]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d12d      	bne.n	801006a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	8952      	ldrh	r2, [r2, #10]
 8010016:	4293      	cmp	r3, r2
 8010018:	d910      	bls.n	801003c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	8952      	ldrh	r2, [r2, #10]
 8010024:	441a      	add	r2, r3
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	8952      	ldrh	r2, [r2, #10]
 8010034:	1a9a      	subs	r2, r3, r2
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	65da      	str	r2, [r3, #92]	@ 0x5c
 801003a:	e002      	b.n	8010042 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2200      	movs	r2, #0
 8010040:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00a      	beq.n	8010060 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	895a      	ldrh	r2, [r3, #10]
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	791b      	ldrb	r3, [r3, #4]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7fe ff35 	bl	800eec8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 801005e:	e0fb      	b.n	8010258 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	2207      	movs	r2, #7
 8010064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010068:	e0f6      	b.n	8010258 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 801006a:	7d3b      	ldrb	r3, [r7, #20]
 801006c:	2b05      	cmp	r3, #5
 801006e:	f040 80f3 	bne.w	8010258 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	2209      	movs	r2, #9
 8010076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801007a:	e0ed      	b.n	8010258 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	891a      	ldrh	r2, [r3, #8]
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	795b      	ldrb	r3, [r3, #5]
 801008a:	2001      	movs	r0, #1
 801008c:	9000      	str	r0, [sp, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fe fef5 	bl	800ee7e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	2206      	movs	r2, #6
 8010098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801009c:	e0e7      	b.n	801026e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	795b      	ldrb	r3, [r3, #5]
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7f1 fe20 	bl	8001cea <USBH_LL_GetURBState>
 80100aa:	4603      	mov	r3, r0
 80100ac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80100ae:	7d3b      	ldrb	r3, [r7, #20]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d12f      	bne.n	8010114 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	8912      	ldrh	r2, [r2, #8]
 80100bc:	4293      	cmp	r3, r2
 80100be:	d910      	bls.n	80100e2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100c6:	693a      	ldr	r2, [r7, #16]
 80100c8:	8912      	ldrh	r2, [r2, #8]
 80100ca:	441a      	add	r2, r3
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100d6:	693a      	ldr	r2, [r7, #16]
 80100d8:	8912      	ldrh	r2, [r2, #8]
 80100da:	1a9a      	subs	r2, r3, r2
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80100e0:	e002      	b.n	80100e8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	2200      	movs	r2, #0
 80100e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d00c      	beq.n	801010a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	891a      	ldrh	r2, [r3, #8]
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	795b      	ldrb	r3, [r3, #5]
 80100fe:	2001      	movs	r0, #1
 8010100:	9000      	str	r0, [sp, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7fe febb 	bl	800ee7e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8010108:	e0a8      	b.n	801025c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	2207      	movs	r2, #7
 801010e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010112:	e0a3      	b.n	801025c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010114:	7d3b      	ldrb	r3, [r7, #20]
 8010116:	2b02      	cmp	r3, #2
 8010118:	d104      	bne.n	8010124 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2205      	movs	r2, #5
 801011e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010122:	e09b      	b.n	801025c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8010124:	7d3b      	ldrb	r3, [r7, #20]
 8010126:	2b05      	cmp	r3, #5
 8010128:	f040 8098 	bne.w	801025c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	220a      	movs	r2, #10
 8010130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010134:	e092      	b.n	801025c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	791b      	ldrb	r3, [r3, #4]
 8010140:	220d      	movs	r2, #13
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fe fec0 	bl	800eec8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	2208      	movs	r2, #8
 801014c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010150:	e08d      	b.n	801026e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	791b      	ldrb	r3, [r3, #4]
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7f1 fdc6 	bl	8001cea <USBH_LL_GetURBState>
 801015e:	4603      	mov	r3, r0
 8010160:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8010162:	7d3b      	ldrb	r3, [r7, #20]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d115      	bne.n	8010194 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2201      	movs	r2, #1
 801016c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	2201      	movs	r2, #1
 8010174:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f8a9 	bl	80102d0 <USBH_MSC_DecodeCSW>
 801017e:	4603      	mov	r3, r0
 8010180:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8010182:	7d7b      	ldrb	r3, [r7, #21]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d102      	bne.n	801018e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 801018c:	e068      	b.n	8010260 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 801018e:	2302      	movs	r3, #2
 8010190:	75fb      	strb	r3, [r7, #23]
      break;
 8010192:	e065      	b.n	8010260 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8010194:	7d3b      	ldrb	r3, [r7, #20]
 8010196:	2b05      	cmp	r3, #5
 8010198:	d162      	bne.n	8010260 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	2209      	movs	r2, #9
 801019e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80101a2:	e05d      	b.n	8010260 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80101a4:	78fb      	ldrb	r3, [r7, #3]
 80101a6:	2200      	movs	r2, #0
 80101a8:	4619      	mov	r1, r3
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f864 	bl	8010278 <USBH_MSC_BOT_Abort>
 80101b0:	4603      	mov	r3, r0
 80101b2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80101b4:	7dbb      	ldrb	r3, [r7, #22]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d104      	bne.n	80101c4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	2207      	movs	r2, #7
 80101be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80101c2:	e04f      	b.n	8010264 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80101c4:	7dbb      	ldrb	r3, [r7, #22]
 80101c6:	2b04      	cmp	r3, #4
 80101c8:	d14c      	bne.n	8010264 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	220b      	movs	r2, #11
 80101ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80101d2:	e047      	b.n	8010264 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80101d4:	78fb      	ldrb	r3, [r7, #3]
 80101d6:	2201      	movs	r2, #1
 80101d8:	4619      	mov	r1, r3
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f84c 	bl	8010278 <USBH_MSC_BOT_Abort>
 80101e0:	4603      	mov	r3, r0
 80101e2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80101e4:	7dbb      	ldrb	r3, [r7, #22]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d11d      	bne.n	8010226 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	795b      	ldrb	r3, [r3, #5]
 80101ee:	4619      	mov	r1, r3
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f7f1 fddd 	bl	8001db0 <USBH_LL_GetToggle>
 80101f6:	4603      	mov	r3, r0
 80101f8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	7959      	ldrb	r1, [r3, #5]
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	f1c3 0301 	rsb	r3, r3, #1
 8010204:	b2db      	uxtb	r3, r3
 8010206:	461a      	mov	r2, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7f1 fd9f 	bl	8001d4c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	791b      	ldrb	r3, [r3, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	4619      	mov	r1, r3
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f7f1 fd98 	bl	8001d4c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	2209      	movs	r2, #9
 8010220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8010224:	e020      	b.n	8010268 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8010226:	7dbb      	ldrb	r3, [r7, #22]
 8010228:	2b04      	cmp	r3, #4
 801022a:	d11d      	bne.n	8010268 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	220b      	movs	r2, #11
 8010230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010234:	e018      	b.n	8010268 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff fdf2 	bl	800fe20 <USBH_MSC_BOT_REQ_Reset>
 801023c:	4603      	mov	r3, r0
 801023e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8010240:	7dfb      	ldrb	r3, [r7, #23]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d112      	bne.n	801026c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 801024e:	e00d      	b.n	801026c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8010250:	bf00      	nop
 8010252:	e00c      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 8010254:	bf00      	nop
 8010256:	e00a      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 8010258:	bf00      	nop
 801025a:	e008      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 801025c:	bf00      	nop
 801025e:	e006      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 8010260:	bf00      	nop
 8010262:	e004      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 8010264:	bf00      	nop
 8010266:	e002      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 8010268:	bf00      	nop
 801026a:	e000      	b.n	801026e <USBH_MSC_BOT_Process+0x392>
      break;
 801026c:	bf00      	nop
  }
  return status;
 801026e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
 8010284:	4613      	mov	r3, r2
 8010286:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8010288:	2302      	movs	r3, #2
 801028a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8010292:	69db      	ldr	r3, [r3, #28]
 8010294:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8010296:	78bb      	ldrb	r3, [r7, #2]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <USBH_MSC_BOT_Abort+0x2a>
 801029c:	2b01      	cmp	r3, #1
 801029e:	d009      	beq.n	80102b4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80102a0:	e011      	b.n	80102c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	79db      	ldrb	r3, [r3, #7]
 80102a6:	4619      	mov	r1, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7fe f897 	bl	800e3dc <USBH_ClrFeature>
 80102ae:	4603      	mov	r3, r0
 80102b0:	73fb      	strb	r3, [r7, #15]
      break;
 80102b2:	e008      	b.n	80102c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	799b      	ldrb	r3, [r3, #6]
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7fe f88e 	bl	800e3dc <USBH_ClrFeature>
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
      break;
 80102c4:	bf00      	nop
  }
  return status;
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80102de:	69db      	ldr	r3, [r3, #28]
 80102e0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80102e2:	2301      	movs	r3, #1
 80102e4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	791b      	ldrb	r3, [r3, #4]
 80102ea:	4619      	mov	r1, r3
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7f1 fc91 	bl	8001c14 <USBH_LL_GetLastXferSize>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b0d      	cmp	r3, #13
 80102f6:	d002      	beq.n	80102fe <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80102f8:	2302      	movs	r3, #2
 80102fa:	73fb      	strb	r3, [r7, #15]
 80102fc:	e024      	b.n	8010348 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010302:	4a14      	ldr	r2, [pc, #80]	@ (8010354 <USBH_MSC_DecodeCSW+0x84>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d11d      	bne.n	8010344 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010310:	429a      	cmp	r2, r3
 8010312:	d119      	bne.n	8010348 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801031a:	2b00      	cmp	r3, #0
 801031c:	d102      	bne.n	8010324 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 801031e:	2300      	movs	r3, #0
 8010320:	73fb      	strb	r3, [r7, #15]
 8010322:	e011      	b.n	8010348 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801032a:	2b01      	cmp	r3, #1
 801032c:	d102      	bne.n	8010334 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 801032e:	2301      	movs	r3, #1
 8010330:	73fb      	strb	r3, [r7, #15]
 8010332:	e009      	b.n	8010348 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801033a:	2b02      	cmp	r3, #2
 801033c:	d104      	bne.n	8010348 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 801033e:	2302      	movs	r3, #2
 8010340:	73fb      	strb	r3, [r7, #15]
 8010342:	e001      	b.n	8010348 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8010344:	2302      	movs	r3, #2
 8010346:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8010348:	7bfb      	ldrb	r3, [r7, #15]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	53425355 	.word	0x53425355

08010358 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	460b      	mov	r3, r1
 8010362:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8010364:	2302      	movs	r3, #2
 8010366:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801036e:	69db      	ldr	r3, [r3, #28]
 8010370:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010378:	2b01      	cmp	r3, #1
 801037a:	d002      	beq.n	8010382 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 801037c:	2b02      	cmp	r3, #2
 801037e:	d021      	beq.n	80103c4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8010380:	e028      	b.n	80103d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	2200      	movs	r2, #0
 8010386:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	2200      	movs	r2, #0
 801038c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	220a      	movs	r2, #10
 8010394:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	3363      	adds	r3, #99	@ 0x63
 801039c:	2210      	movs	r2, #16
 801039e:	2100      	movs	r1, #0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 ffba 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2202      	movs	r2, #2
 80103ba:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 80103be:	2301      	movs	r3, #1
 80103c0:	73fb      	strb	r3, [r7, #15]
      break;
 80103c2:	e007      	b.n	80103d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80103c4:	78fb      	ldrb	r3, [r7, #3]
 80103c6:	4619      	mov	r1, r3
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff fd87 	bl	800fedc <USBH_MSC_BOT_Process>
 80103ce:	4603      	mov	r3, r0
 80103d0:	73fb      	strb	r3, [r7, #15]
      break;
 80103d2:	bf00      	nop
  }

  return error;
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b086      	sub	sp, #24
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	60f8      	str	r0, [r7, #12]
 80103e6:	460b      	mov	r3, r1
 80103e8:	607a      	str	r2, [r7, #4]
 80103ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 80103ec:	2301      	movs	r3, #1
 80103ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80103f6:	69db      	ldr	r3, [r3, #28]
 80103f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010400:	2b01      	cmp	r3, #1
 8010402:	d002      	beq.n	801040a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8010404:	2b02      	cmp	r3, #2
 8010406:	d027      	beq.n	8010458 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8010408:	e05e      	b.n	80104c8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	2208      	movs	r2, #8
 801040e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	2280      	movs	r2, #128	@ 0x80
 8010414:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	220a      	movs	r2, #10
 801041c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	3363      	adds	r3, #99	@ 0x63
 8010424:	2210      	movs	r2, #16
 8010426:	2100      	movs	r1, #0
 8010428:	4618      	mov	r0, r3
 801042a:	f000 ff76 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	2225      	movs	r2, #37	@ 0x25
 8010432:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	2201      	movs	r2, #1
 801043a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	2202      	movs	r2, #2
 8010442:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f103 0210 	add.w	r2, r3, #16
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8010452:	2301      	movs	r3, #1
 8010454:	75fb      	strb	r3, [r7, #23]
      break;
 8010456:	e037      	b.n	80104c8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8010458:	7afb      	ldrb	r3, [r7, #11]
 801045a:	4619      	mov	r1, r3
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f7ff fd3d 	bl	800fedc <USBH_MSC_BOT_Process>
 8010462:	4603      	mov	r3, r0
 8010464:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8010466:	7dfb      	ldrb	r3, [r7, #23]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d12c      	bne.n	80104c6 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010472:	3303      	adds	r3, #3
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	461a      	mov	r2, r3
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801047e:	3302      	adds	r3, #2
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	021b      	lsls	r3, r3, #8
 8010484:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801048c:	3301      	adds	r3, #1
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8010492:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	061b      	lsls	r3, r3, #24
 801049e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80104aa:	3307      	adds	r3, #7
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80104b6:	3306      	adds	r3, #6
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	021b      	lsls	r3, r3, #8
 80104bc:	b29b      	uxth	r3, r3
 80104be:	4313      	orrs	r3, r2
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	809a      	strh	r2, [r3, #4]
      break;
 80104c6:	bf00      	nop
  }

  return error;
 80104c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3718      	adds	r7, #24
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b086      	sub	sp, #24
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	60f8      	str	r0, [r7, #12]
 80104da:	460b      	mov	r3, r1
 80104dc:	607a      	str	r2, [r7, #4]
 80104de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80104e0:	2302      	movs	r3, #2
 80104e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80104ea:	69db      	ldr	r3, [r3, #28]
 80104ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d002      	beq.n	80104fe <USBH_MSC_SCSI_Inquiry+0x2c>
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d03d      	beq.n	8010578 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80104fc:	e089      	b.n	8010612 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2224      	movs	r2, #36	@ 0x24
 8010502:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	2280      	movs	r2, #128	@ 0x80
 8010508:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	220a      	movs	r2, #10
 8010510:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	3363      	adds	r3, #99	@ 0x63
 8010518:	220a      	movs	r2, #10
 801051a:	2100      	movs	r1, #0
 801051c:	4618      	mov	r0, r3
 801051e:	f000 fefc 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2212      	movs	r2, #18
 8010526:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 801052a:	7afb      	ldrb	r3, [r7, #11]
 801052c:	015b      	lsls	r3, r3, #5
 801052e:	b2da      	uxtb	r2, r3
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	2200      	movs	r2, #0
 8010542:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	2224      	movs	r2, #36	@ 0x24
 801054a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	2200      	movs	r2, #0
 8010552:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2202      	movs	r2, #2
 8010562:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	f103 0210 	add.w	r2, r3, #16
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8010572:	2301      	movs	r3, #1
 8010574:	75fb      	strb	r3, [r7, #23]
      break;
 8010576:	e04c      	b.n	8010612 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8010578:	7afb      	ldrb	r3, [r7, #11]
 801057a:	4619      	mov	r1, r3
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7ff fcad 	bl	800fedc <USBH_MSC_BOT_Process>
 8010582:	4603      	mov	r3, r0
 8010584:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8010586:	7dfb      	ldrb	r3, [r7, #23]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d141      	bne.n	8010610 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 801058c:	2222      	movs	r2, #34	@ 0x22
 801058e:	2100      	movs	r1, #0
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f000 fec2 	bl	801131a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	f003 031f 	and.w	r3, r3, #31
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	095b      	lsrs	r3, r3, #5
 80105b2:	b2da      	uxtb	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105be:	3301      	adds	r3, #1
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	b25b      	sxtb	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da03      	bge.n	80105d0 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	709a      	strb	r2, [r3, #2]
 80105ce:	e002      	b.n	80105d6 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	1cd8      	adds	r0, r3, #3
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105e0:	3308      	adds	r3, #8
 80105e2:	2208      	movs	r2, #8
 80105e4:	4619      	mov	r1, r3
 80105e6:	f000 fede 	bl	80113a6 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f103 000c 	add.w	r0, r3, #12
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105f6:	3310      	adds	r3, #16
 80105f8:	2210      	movs	r2, #16
 80105fa:	4619      	mov	r1, r3
 80105fc:	f000 fed3 	bl	80113a6 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	331d      	adds	r3, #29
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 801060a:	3220      	adds	r2, #32
 801060c:	6812      	ldr	r2, [r2, #0]
 801060e:	601a      	str	r2, [r3, #0]
      break;
 8010610:	bf00      	nop
  }

  return error;
 8010612:	7dfb      	ldrb	r3, [r7, #23]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3718      	adds	r7, #24
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b086      	sub	sp, #24
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	460b      	mov	r3, r1
 8010626:	607a      	str	r2, [r7, #4]
 8010628:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 801062a:	2302      	movs	r3, #2
 801062c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8010634:	69db      	ldr	r3, [r3, #28]
 8010636:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 801063e:	2b01      	cmp	r3, #1
 8010640:	d002      	beq.n	8010648 <USBH_MSC_SCSI_RequestSense+0x2c>
 8010642:	2b02      	cmp	r3, #2
 8010644:	d03d      	beq.n	80106c2 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8010646:	e05d      	b.n	8010704 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	220e      	movs	r2, #14
 801064c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	2280      	movs	r2, #128	@ 0x80
 8010652:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	220a      	movs	r2, #10
 801065a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	3363      	adds	r3, #99	@ 0x63
 8010662:	2210      	movs	r2, #16
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f000 fe57 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	2203      	movs	r2, #3
 8010670:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8010674:	7afb      	ldrb	r3, [r7, #11]
 8010676:	015b      	lsls	r3, r3, #5
 8010678:	b2da      	uxtb	r2, r3
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	2200      	movs	r2, #0
 8010684:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	220e      	movs	r2, #14
 8010694:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	2200      	movs	r2, #0
 801069c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	2202      	movs	r2, #2
 80106ac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	f103 0210 	add.w	r2, r3, #16
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80106bc:	2301      	movs	r3, #1
 80106be:	75fb      	strb	r3, [r7, #23]
      break;
 80106c0:	e020      	b.n	8010704 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80106c2:	7afb      	ldrb	r3, [r7, #11]
 80106c4:	4619      	mov	r1, r3
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7ff fc08 	bl	800fedc <USBH_MSC_BOT_Process>
 80106cc:	4603      	mov	r3, r0
 80106ce:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d115      	bne.n	8010702 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106dc:	3302      	adds	r3, #2
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	f003 030f 	and.w	r3, r3, #15
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106f0:	7b1a      	ldrb	r2, [r3, #12]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106fc:	7b5a      	ldrb	r2, [r3, #13]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	709a      	strb	r2, [r3, #2]
      break;
 8010702:	bf00      	nop
  }

  return error;
 8010704:	7dfb      	ldrb	r3, [r7, #23]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b086      	sub	sp, #24
 8010712:	af00      	add	r7, sp, #0
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
 801071a:	460b      	mov	r3, r1
 801071c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 801071e:	2302      	movs	r3, #2
 8010720:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8010728:	69db      	ldr	r3, [r3, #28]
 801072a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010732:	2b01      	cmp	r3, #1
 8010734:	d002      	beq.n	801073c <USBH_MSC_SCSI_Write+0x2e>
 8010736:	2b02      	cmp	r3, #2
 8010738:	d047      	beq.n	80107ca <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 801073a:	e04e      	b.n	80107da <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8010742:	461a      	mov	r2, r3
 8010744:	6a3b      	ldr	r3, [r7, #32]
 8010746:	fb03 f202 	mul.w	r2, r3, r2
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	2200      	movs	r2, #0
 8010752:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	220a      	movs	r2, #10
 801075a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	3363      	adds	r3, #99	@ 0x63
 8010762:	2210      	movs	r2, #16
 8010764:	2100      	movs	r1, #0
 8010766:	4618      	mov	r0, r3
 8010768:	f000 fdd7 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	222a      	movs	r2, #42	@ 0x2a
 8010770:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8010774:	79fa      	ldrb	r2, [r7, #7]
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 801077c:	79ba      	ldrb	r2, [r7, #6]
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8010784:	797a      	ldrb	r2, [r7, #5]
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801078c:	1d3b      	adds	r3, r7, #4
 801078e:	781a      	ldrb	r2, [r3, #0]
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8010796:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 80107a0:	f107 0320 	add.w	r3, r7, #32
 80107a4:	781a      	ldrb	r2, [r3, #0]
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	2201      	movs	r2, #1
 80107b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2202      	movs	r2, #2
 80107b8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80107c4:	2301      	movs	r3, #1
 80107c6:	75fb      	strb	r3, [r7, #23]
      break;
 80107c8:	e007      	b.n	80107da <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80107ca:	7afb      	ldrb	r3, [r7, #11]
 80107cc:	4619      	mov	r1, r3
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7ff fb84 	bl	800fedc <USBH_MSC_BOT_Process>
 80107d4:	4603      	mov	r3, r0
 80107d6:	75fb      	strb	r3, [r7, #23]
      break;
 80107d8:	bf00      	nop
  }

  return error;
 80107da:	7dfb      	ldrb	r3, [r7, #23]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3718      	adds	r7, #24
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	607a      	str	r2, [r7, #4]
 80107ee:	603b      	str	r3, [r7, #0]
 80107f0:	460b      	mov	r3, r1
 80107f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80107f4:	2302      	movs	r3, #2
 80107f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80107fe:	69db      	ldr	r3, [r3, #28]
 8010800:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010808:	2b01      	cmp	r3, #1
 801080a:	d002      	beq.n	8010812 <USBH_MSC_SCSI_Read+0x2e>
 801080c:	2b02      	cmp	r3, #2
 801080e:	d047      	beq.n	80108a0 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8010810:	e04e      	b.n	80108b0 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8010818:	461a      	mov	r2, r3
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	fb03 f202 	mul.w	r2, r3, r2
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	2280      	movs	r2, #128	@ 0x80
 8010828:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	220a      	movs	r2, #10
 8010830:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	3363      	adds	r3, #99	@ 0x63
 8010838:	2210      	movs	r2, #16
 801083a:	2100      	movs	r1, #0
 801083c:	4618      	mov	r0, r3
 801083e:	f000 fd6c 	bl	801131a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2228      	movs	r2, #40	@ 0x28
 8010846:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 801084a:	79fa      	ldrb	r2, [r7, #7]
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8010852:	79ba      	ldrb	r2, [r7, #6]
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 801085a:	797a      	ldrb	r2, [r7, #5]
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8010862:	1d3b      	adds	r3, r7, #4
 8010864:	781a      	ldrb	r2, [r3, #0]
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 801086c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8010876:	f107 0320 	add.w	r3, r7, #32
 801087a:	781a      	ldrb	r2, [r3, #0]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2202      	movs	r2, #2
 801088e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	683a      	ldr	r2, [r7, #0]
 8010896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 801089a:	2301      	movs	r3, #1
 801089c:	75fb      	strb	r3, [r7, #23]
      break;
 801089e:	e007      	b.n	80108b0 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80108a0:	7afb      	ldrb	r3, [r7, #11]
 80108a2:	4619      	mov	r1, r3
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f7ff fb19 	bl	800fedc <USBH_MSC_BOT_Process>
 80108aa:	4603      	mov	r3, r0
 80108ac:	75fb      	strb	r3, [r7, #23]
      break;
 80108ae:	bf00      	nop
  }

  return error;
 80108b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3718      	adds	r7, #24
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b086      	sub	sp, #24
 80108be:	af04      	add	r7, sp, #16
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	4608      	mov	r0, r1
 80108c4:	4611      	mov	r1, r2
 80108c6:	461a      	mov	r2, r3
 80108c8:	4603      	mov	r3, r0
 80108ca:	70fb      	strb	r3, [r7, #3]
 80108cc:	460b      	mov	r3, r1
 80108ce:	70bb      	strb	r3, [r7, #2]
 80108d0:	4613      	mov	r3, r2
 80108d2:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80108d4:	7878      	ldrb	r0, [r7, #1]
 80108d6:	78ba      	ldrb	r2, [r7, #2]
 80108d8:	78f9      	ldrb	r1, [r7, #3]
 80108da:	8b3b      	ldrh	r3, [r7, #24]
 80108dc:	9302      	str	r3, [sp, #8]
 80108de:	7d3b      	ldrb	r3, [r7, #20]
 80108e0:	9301      	str	r3, [sp, #4]
 80108e2:	7c3b      	ldrb	r3, [r7, #16]
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	4603      	mov	r3, r0
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7f1 f9a6 	bl	8001c3a <USBH_LL_OpenPipe>

  return USBH_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	460b      	mov	r3, r1
 8010902:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010904:	78fb      	ldrb	r3, [r7, #3]
 8010906:	4619      	mov	r1, r3
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7f1 f9b7 	bl	8001c7c <USBH_LL_ClosePipe>

  return USBH_OK;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	460b      	mov	r3, r1
 8010922:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 f839 	bl	801099c <USBH_GetFreePipe>
 801092a:	4603      	mov	r3, r0
 801092c:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801092e:	89fb      	ldrh	r3, [r7, #14]
 8010930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010934:	4293      	cmp	r3, r2
 8010936:	d00b      	beq.n	8010950 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010938:	78fa      	ldrb	r2, [r7, #3]
 801093a:	89fb      	ldrh	r3, [r7, #14]
 801093c:	f003 030f 	and.w	r3, r3, #15
 8010940:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010944:	6879      	ldr	r1, [r7, #4]
 8010946:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	440b      	add	r3, r1
 801094e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010950:	89fb      	ldrh	r3, [r7, #14]
 8010952:	b2db      	uxtb	r3, r3
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010968:	78fb      	ldrb	r3, [r7, #3]
 801096a:	2b0f      	cmp	r3, #15
 801096c:	d80f      	bhi.n	801098e <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801096e:	78fb      	ldrb	r3, [r7, #3]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	685a      	ldr	r2, [r3, #4]
 801097c:	78fb      	ldrb	r3, [r7, #3]
 801097e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010982:	6879      	ldr	r1, [r7, #4]
 8010984:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	440b      	add	r3, r1
 801098c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80109a8:	2300      	movs	r3, #0
 80109aa:	73fb      	strb	r3, [r7, #15]
 80109ac:	e010      	b.n	80109d0 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	e007      	b.n	80109da <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
 80109cc:	3301      	adds	r3, #1
 80109ce:	73fb      	strb	r3, [r7, #15]
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
 80109d2:	2b0f      	cmp	r3, #15
 80109d4:	d9eb      	bls.n	80109ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80109d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3714      	adds	r7, #20
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init (void)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 80109ea:	f000 f807 	bl	80109fc <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80109ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80109f2:	f7f2 f993 	bl	8002d1c <BSP_LCD_Clear>
}
 80109f6:	bf00      	nop
 80109f8:	bd80      	pop	{r7, pc}
	...

080109fc <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 80109fc:	b480      	push	{r7}
 80109fe:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8010a00:	4b13      	ldr	r3, [pc, #76]	@ (8010a50 <LCD_LOG_DeInit+0x54>)
 8010a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a06:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8010a08:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <LCD_LOG_DeInit+0x58>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8010a0e:	4b12      	ldr	r3, [pc, #72]	@ (8010a58 <LCD_LOG_DeInit+0x5c>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8010a14:	4b11      	ldr	r3, [pc, #68]	@ (8010a5c <LCD_LOG_DeInit+0x60>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8010a1a:	4b11      	ldr	r3, [pc, #68]	@ (8010a60 <LCD_LOG_DeInit+0x64>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8010a20:	4b10      	ldr	r3, [pc, #64]	@ (8010a64 <LCD_LOG_DeInit+0x68>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8010a26:	4b10      	ldr	r3, [pc, #64]	@ (8010a68 <LCD_LOG_DeInit+0x6c>)
 8010a28:	2201      	movs	r2, #1
 8010a2a:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010a6c <LCD_LOG_DeInit+0x70>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8010a32:	4b0f      	ldr	r3, [pc, #60]	@ (8010a70 <LCD_LOG_DeInit+0x74>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8010a38:	4b0e      	ldr	r3, [pc, #56]	@ (8010a74 <LCD_LOG_DeInit+0x78>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8010a78 <LCD_LOG_DeInit+0x7c>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	801a      	strh	r2, [r3, #0]
}
 8010a44:	bf00      	nop
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	200023f8 	.word	0x200023f8
 8010a54:	200023fc 	.word	0x200023fc
 8010a58:	200023fe 	.word	0x200023fe
 8010a5c:	20002400 	.word	0x20002400
 8010a60:	20002402 	.word	0x20002402
 8010a64:	20002404 	.word	0x20002404
 8010a68:	20002406 	.word	0x20002406
 8010a6c:	20002407 	.word	0x20002407
 8010a70:	20002408 	.word	0x20002408
 8010a74:	20002409 	.word	0x20002409
 8010a78:	2000240a 	.word	0x2000240a

08010a7c <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8010a84:	4819      	ldr	r0, [pc, #100]	@ (8010aec <LCD_LOG_SetHeader+0x70>)
 8010a86:	f7f2 f919 	bl	8002cbc <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8010a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a8e:	f7f2 f8e3 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8010a92:	f7f2 f843 	bl	8002b1c <BSP_LCD_GetXSize>
 8010a96:	4603      	mov	r3, r0
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	4b14      	ldr	r3, [pc, #80]	@ (8010aec <LCD_LOG_SetHeader+0x70>)
 8010a9c:	88db      	ldrh	r3, [r3, #6]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	0049      	lsls	r1, r1, #1
 8010aa2:	440b      	add	r3, r1
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	f7f2 fa79 	bl	8002fa0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8010aae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8010ab2:	f7f2 f8d1 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8010ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010aba:	f7f2 f8e5 	bl	8002c88 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8010abe:	4b0b      	ldr	r3, [pc, #44]	@ (8010aec <LCD_LOG_SetHeader+0x70>)
 8010ac0:	88d9      	ldrh	r1, [r3, #6]
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	f7f2 f994 	bl	8002df4 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8010acc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8010ad0:	f7f2 f8da 	bl	8002c88 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8010ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ad8:	f7f2 f8be 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8010adc:	4803      	ldr	r0, [pc, #12]	@ (8010aec <LCD_LOG_SetHeader+0x70>)
 8010ade:	f7f2 f8ed 	bl	8002cbc <BSP_LCD_SetFont>
}
 8010ae2:	bf00      	nop
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	20000058 	.word	0x20000058

08010af0 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8010af0:	b590      	push	{r4, r7, lr}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8010af8:	4820      	ldr	r0, [pc, #128]	@ (8010b7c <LCD_LOG_SetFooter+0x8c>)
 8010afa:	f7f2 f8df 	bl	8002cbc <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8010afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b02:	f7f2 f8a9 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8010b06:	f7f2 f815 	bl	8002b34 <BSP_LCD_GetYSize>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8010b7c <LCD_LOG_SetFooter+0x8c>)
 8010b10:	88db      	ldrh	r3, [r3, #6]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	3b04      	subs	r3, #4
 8010b18:	b29c      	uxth	r4, r3
 8010b1a:	f7f1 ffff 	bl	8002b1c <BSP_LCD_GetXSize>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	4b16      	ldr	r3, [pc, #88]	@ (8010b7c <LCD_LOG_SetFooter+0x8c>)
 8010b24:	88db      	ldrh	r3, [r3, #6]
 8010b26:	3304      	adds	r3, #4
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f7f2 fa37 	bl	8002fa0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8010b32:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8010b36:	f7f2 f88f 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8010b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b3e:	f7f2 f8a3 	bl	8002c88 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8010b42:	f7f1 fff7 	bl	8002b34 <BSP_LCD_GetYSize>
 8010b46:	4603      	mov	r3, r0
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b7c <LCD_LOG_SetFooter+0x8c>)
 8010b4c:	88db      	ldrh	r3, [r3, #6]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	b299      	uxth	r1, r3
 8010b52:	2301      	movs	r3, #1
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	2000      	movs	r0, #0
 8010b58:	f7f2 f94c 	bl	8002df4 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8010b5c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8010b60:	f7f2 f892 	bl	8002c88 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8010b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b68:	f7f2 f876 	bl	8002c58 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8010b6c:	4803      	ldr	r0, [pc, #12]	@ (8010b7c <LCD_LOG_SetFooter+0x8c>)
 8010b6e:	f7f2 f8a5 	bl	8002cbc <BSP_LCD_SetFont>
}
 8010b72:	bf00      	nop
 8010b74:	370c      	adds	r7, #12
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd90      	pop	{r4, r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20000058 	.word	0x20000058

08010b80 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8010b80:	b590      	push	{r4, r7, lr}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8010b88:	f7f2 f8b2 	bl	8002cf0 <BSP_LCD_GetFont>
 8010b8c:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8010b8e:	4b60      	ldr	r3, [pc, #384]	@ (8010d10 <__io_putchar+0x190>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 80b6 	bne.w	8010d04 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8010b98:	4b5e      	ldr	r3, [pc, #376]	@ (8010d14 <__io_putchar+0x194>)
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d110      	bne.n	8010bc2 <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8010ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8010d18 <__io_putchar+0x198>)
 8010ba2:	881a      	ldrh	r2, [r3, #0]
 8010ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8010d1c <__io_putchar+0x19c>)
 8010ba6:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8010ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8010d20 <__io_putchar+0x1a0>)
 8010baa:	881a      	ldrh	r2, [r3, #0]
 8010bac:	4b5d      	ldr	r3, [pc, #372]	@ (8010d24 <__io_putchar+0x1a4>)
 8010bae:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8010bb0:	4b58      	ldr	r3, [pc, #352]	@ (8010d14 <__io_putchar+0x194>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8010bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8010d28 <__io_putchar+0x1a8>)
 8010bb8:	2200      	movs	r2, #0
 8010bba:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8010bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8010d2c <__io_putchar+0x1ac>)
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8010bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8010d30 <__io_putchar+0x1b0>)
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	461c      	mov	r4, r3
 8010bc8:	f7f1 ffa8 	bl	8002b1c <BSP_LCD_GetXSize>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	889b      	ldrh	r3, [r3, #4]
 8010bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bd6:	429c      	cmp	r4, r3
 8010bd8:	d218      	bcs.n	8010c0c <__io_putchar+0x8c>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2b0a      	cmp	r3, #10
 8010bde:	d015      	beq.n	8010c0c <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8010be0:	4b4e      	ldr	r3, [pc, #312]	@ (8010d1c <__io_putchar+0x19c>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	4619      	mov	r1, r3
 8010be6:	4b52      	ldr	r3, [pc, #328]	@ (8010d30 <__io_putchar+0x1b0>)
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	b290      	uxth	r0, r2
 8010bee:	4a50      	ldr	r2, [pc, #320]	@ (8010d30 <__io_putchar+0x1b0>)
 8010bf0:	8010      	strh	r0, [r2, #0]
 8010bf2:	461c      	mov	r4, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	b2d8      	uxtb	r0, r3
 8010bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8010d34 <__io_putchar+0x1b4>)
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	015b      	lsls	r3, r3, #5
 8010bfe:	440b      	add	r3, r1
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4413      	add	r3, r2
 8010c04:	4423      	add	r3, r4
 8010c06:	4602      	mov	r2, r0
 8010c08:	701a      	strb	r2, [r3, #0]
 8010c0a:	e07b      	b.n	8010d04 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8010c0c:	4b45      	ldr	r3, [pc, #276]	@ (8010d24 <__io_putchar+0x1a4>)
 8010c0e:	881a      	ldrh	r2, [r3, #0]
 8010c10:	4b42      	ldr	r3, [pc, #264]	@ (8010d1c <__io_putchar+0x19c>)
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d314      	bcc.n	8010c42 <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8010c18:	4b47      	ldr	r3, [pc, #284]	@ (8010d38 <__io_putchar+0x1b8>)
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d10d      	bne.n	8010c3c <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8010c20:	4b40      	ldr	r3, [pc, #256]	@ (8010d24 <__io_putchar+0x1a4>)
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	3301      	adds	r3, #1
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	4b3e      	ldr	r3, [pc, #248]	@ (8010d24 <__io_putchar+0x1a4>)
 8010c2a:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8010c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8010d24 <__io_putchar+0x1a4>)
 8010c2e:	881b      	ldrh	r3, [r3, #0]
 8010c30:	2b11      	cmp	r3, #17
 8010c32:	d106      	bne.n	8010c42 <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8010c34:	4b3b      	ldr	r3, [pc, #236]	@ (8010d24 <__io_putchar+0x1a4>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	801a      	strh	r2, [r3, #0]
 8010c3a:	e002      	b.n	8010c42 <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8010c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8010d38 <__io_putchar+0x1b8>)
 8010c3e:	2200      	movs	r2, #0
 8010c40:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8010c42:	4b3b      	ldr	r3, [pc, #236]	@ (8010d30 <__io_putchar+0x1b0>)
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	e015      	b.n	8010c76 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8010c4a:	4b34      	ldr	r3, [pc, #208]	@ (8010d1c <__io_putchar+0x19c>)
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	4619      	mov	r1, r3
 8010c50:	4b37      	ldr	r3, [pc, #220]	@ (8010d30 <__io_putchar+0x1b0>)
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	1c5a      	adds	r2, r3, #1
 8010c56:	b290      	uxth	r0, r2
 8010c58:	4a35      	ldr	r2, [pc, #212]	@ (8010d30 <__io_putchar+0x1b0>)
 8010c5a:	8010      	strh	r0, [r2, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	4a35      	ldr	r2, [pc, #212]	@ (8010d34 <__io_putchar+0x1b4>)
 8010c60:	460b      	mov	r3, r1
 8010c62:	015b      	lsls	r3, r3, #5
 8010c64:	440b      	add	r3, r1
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	4413      	add	r3, r2
 8010c6a:	4403      	add	r3, r0
 8010c6c:	2220      	movs	r2, #32
 8010c6e:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	3301      	adds	r3, #1
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	f7f1 ff51 	bl	8002b1c <BSP_LCD_GetXSize>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	889b      	ldrh	r3, [r3, #4]
 8010c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d3df      	bcc.n	8010c4a <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8010c8a:	4b24      	ldr	r3, [pc, #144]	@ (8010d1c <__io_putchar+0x19c>)
 8010c8c:	881b      	ldrh	r3, [r3, #0]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	4b2a      	ldr	r3, [pc, #168]	@ (8010d3c <__io_putchar+0x1bc>)
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	4927      	ldr	r1, [pc, #156]	@ (8010d34 <__io_putchar+0x1b4>)
 8010c96:	4603      	mov	r3, r0
 8010c98:	015b      	lsls	r3, r3, #5
 8010c9a:	4403      	add	r3, r0
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	440b      	add	r3, r1
 8010ca0:	3380      	adds	r3, #128	@ 0x80
 8010ca2:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8010ca4:	4b22      	ldr	r3, [pc, #136]	@ (8010d30 <__io_putchar+0x1b0>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8010caa:	f000 f849 	bl	8010d40 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8010cae:	4b1b      	ldr	r3, [pc, #108]	@ (8010d1c <__io_putchar+0x19c>)
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	4b19      	ldr	r3, [pc, #100]	@ (8010d1c <__io_putchar+0x19c>)
 8010cb8:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8010cba:	4b18      	ldr	r3, [pc, #96]	@ (8010d1c <__io_putchar+0x19c>)
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	2b11      	cmp	r3, #17
 8010cc0:	d108      	bne.n	8010cd4 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8010cc2:	4b16      	ldr	r3, [pc, #88]	@ (8010d1c <__io_putchar+0x19c>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8010cc8:	4b16      	ldr	r3, [pc, #88]	@ (8010d24 <__io_putchar+0x1a4>)
 8010cca:	2201      	movs	r2, #1
 8010ccc:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8010cce:	4b1a      	ldr	r3, [pc, #104]	@ (8010d38 <__io_putchar+0x1b8>)
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b0a      	cmp	r3, #10
 8010cd8:	d014      	beq.n	8010d04 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8010cda:	4b10      	ldr	r3, [pc, #64]	@ (8010d1c <__io_putchar+0x19c>)
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	4b13      	ldr	r3, [pc, #76]	@ (8010d30 <__io_putchar+0x1b0>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	b290      	uxth	r0, r2
 8010ce8:	4a11      	ldr	r2, [pc, #68]	@ (8010d30 <__io_putchar+0x1b0>)
 8010cea:	8010      	strh	r0, [r2, #0]
 8010cec:	461c      	mov	r4, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	b2d8      	uxtb	r0, r3
 8010cf2:	4a10      	ldr	r2, [pc, #64]	@ (8010d34 <__io_putchar+0x1b4>)
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	015b      	lsls	r3, r3, #5
 8010cf8:	440b      	add	r3, r1
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	4423      	add	r3, r4
 8010d00:	4602      	mov	r2, r0
 8010d02:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8010d04:	687b      	ldr	r3, [r7, #4]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3714      	adds	r7, #20
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd90      	pop	{r4, r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20002408 	.word	0x20002408
 8010d14:	20002407 	.word	0x20002407
 8010d18:	20002404 	.word	0x20002404
 8010d1c:	20002400 	.word	0x20002400
 8010d20:	20002402 	.word	0x20002402
 8010d24:	200023fe 	.word	0x200023fe
 8010d28:	20002409 	.word	0x20002409
 8010d2c:	2000240a 	.word	0x2000240a
 8010d30:	200023fc 	.word	0x200023fc
 8010d34:	20001b34 	.word	0x20001b34
 8010d38:	20002406 	.word	0x20002406
 8010d3c:	200023f8 	.word	0x200023f8

08010d40 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8010d46:	2300      	movs	r3, #0
 8010d48:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	807b      	strh	r3, [r7, #2]
 8010d52:	2300      	movs	r3, #0
 8010d54:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8010d56:	4b39      	ldr	r3, [pc, #228]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010d58:	881b      	ldrh	r3, [r3, #0]
 8010d5a:	2b0f      	cmp	r3, #15
 8010d5c:	d826      	bhi.n	8010dac <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8010d5e:	4b37      	ldr	r3, [pc, #220]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010d60:	881a      	ldrh	r2, [r3, #0]
 8010d62:	4b37      	ldr	r3, [pc, #220]	@ (8010e40 <LCD_LOG_UpdateDisplay+0x100>)
 8010d64:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d320      	bcc.n	8010dac <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	4a33      	ldr	r2, [pc, #204]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010d6e:	8812      	ldrh	r2, [r2, #0]
 8010d70:	441a      	add	r2, r3
 8010d72:	4934      	ldr	r1, [pc, #208]	@ (8010e44 <LCD_LOG_UpdateDisplay+0x104>)
 8010d74:	4613      	mov	r3, r2
 8010d76:	015b      	lsls	r3, r3, #5
 8010d78:	4413      	add	r3, r2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	440b      	add	r3, r1
 8010d7e:	3380      	adds	r3, #128	@ 0x80
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7f1 ff68 	bl	8002c58 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8010d88:	4b2c      	ldr	r3, [pc, #176]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8010d90:	79fb      	ldrb	r3, [r7, #7]
 8010d92:	4a2a      	ldr	r2, [pc, #168]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010d94:	8812      	ldrh	r2, [r2, #0]
 8010d96:	441a      	add	r2, r3
 8010d98:	4613      	mov	r3, r2
 8010d9a:	015b      	lsls	r3, r3, #5
 8010d9c:	4413      	add	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	4a28      	ldr	r2, [pc, #160]	@ (8010e44 <LCD_LOG_UpdateDisplay+0x104>)
 8010da2:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8010da4:	4619      	mov	r1, r3
 8010da6:	f7f2 f8e3 	bl	8002f70 <BSP_LCD_DisplayStringAtLine>
 8010daa:	e043      	b.n	8010e34 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8010dac:	4b23      	ldr	r3, [pc, #140]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010dae:	881a      	ldrh	r2, [r3, #0]
 8010db0:	4b23      	ldr	r3, [pc, #140]	@ (8010e40 <LCD_LOG_UpdateDisplay+0x100>)
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d204      	bcs.n	8010dc2 <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8010db8:	4b20      	ldr	r3, [pc, #128]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010dba:	881b      	ldrh	r3, [r3, #0]
 8010dbc:	3311      	adds	r3, #17
 8010dbe:	80bb      	strh	r3, [r7, #4]
 8010dc0:	e002      	b.n	8010dc8 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 8010dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8010e3c <LCD_LOG_UpdateDisplay+0xfc>)
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8010dc8:	88bb      	ldrh	r3, [r7, #4]
 8010dca:	3b10      	subs	r3, #16
 8010dcc:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8010dce:	2300      	movs	r3, #0
 8010dd0:	71fb      	strb	r3, [r7, #7]
 8010dd2:	e02b      	b.n	8010e2c <LCD_LOG_UpdateDisplay+0xec>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8010dd4:	79fa      	ldrb	r2, [r7, #7]
 8010dd6:	887b      	ldrh	r3, [r7, #2]
 8010dd8:	441a      	add	r2, r3
 8010dda:	4b1b      	ldr	r3, [pc, #108]	@ (8010e48 <LCD_LOG_UpdateDisplay+0x108>)
 8010ddc:	fb83 1302 	smull	r1, r3, r3, r2
 8010de0:	10d9      	asrs	r1, r3, #3
 8010de2:	17d3      	asrs	r3, r2, #31
 8010de4:	1ac9      	subs	r1, r1, r3
 8010de6:	460b      	mov	r3, r1
 8010de8:	011b      	lsls	r3, r3, #4
 8010dea:	440b      	add	r3, r1
 8010dec:	1ad1      	subs	r1, r2, r3
 8010dee:	460b      	mov	r3, r1
 8010df0:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8010df2:	883a      	ldrh	r2, [r7, #0]
 8010df4:	4913      	ldr	r1, [pc, #76]	@ (8010e44 <LCD_LOG_UpdateDisplay+0x104>)
 8010df6:	4613      	mov	r3, r2
 8010df8:	015b      	lsls	r3, r3, #5
 8010dfa:	4413      	add	r3, r2
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	440b      	add	r3, r1
 8010e00:	3380      	adds	r3, #128	@ 0x80
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7f1 ff27 	bl	8002c58 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8010e0a:	79fb      	ldrb	r3, [r7, #7]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	3304      	adds	r3, #4
 8010e10:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8010e12:	883a      	ldrh	r2, [r7, #0]
 8010e14:	4613      	mov	r3, r2
 8010e16:	015b      	lsls	r3, r3, #5
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4a09      	ldr	r2, [pc, #36]	@ (8010e44 <LCD_LOG_UpdateDisplay+0x104>)
 8010e1e:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8010e20:	4619      	mov	r1, r3
 8010e22:	f7f2 f8a5 	bl	8002f70 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	71fb      	strb	r3, [r7, #7]
 8010e2c:	79fb      	ldrb	r3, [r7, #7]
 8010e2e:	2b10      	cmp	r3, #16
 8010e30:	d9d0      	bls.n	8010dd4 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8010e32:	bf00      	nop
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	20002400 	.word	0x20002400
 8010e40:	200023fe 	.word	0x200023fe
 8010e44:	20001b34 	.word	0x20001b34
 8010e48:	78787879 	.word	0x78787879

08010e4c <malloc>:
 8010e4c:	4b02      	ldr	r3, [pc, #8]	@ (8010e58 <malloc+0xc>)
 8010e4e:	4601      	mov	r1, r0
 8010e50:	6818      	ldr	r0, [r3, #0]
 8010e52:	f000 b82d 	b.w	8010eb0 <_malloc_r>
 8010e56:	bf00      	nop
 8010e58:	20000098 	.word	0x20000098

08010e5c <free>:
 8010e5c:	4b02      	ldr	r3, [pc, #8]	@ (8010e68 <free+0xc>)
 8010e5e:	4601      	mov	r1, r0
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	f000 baaf 	b.w	80113c4 <_free_r>
 8010e66:	bf00      	nop
 8010e68:	20000098 	.word	0x20000098

08010e6c <sbrk_aligned>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8010eac <sbrk_aligned+0x40>)
 8010e70:	460c      	mov	r4, r1
 8010e72:	6831      	ldr	r1, [r6, #0]
 8010e74:	4605      	mov	r5, r0
 8010e76:	b911      	cbnz	r1, 8010e7e <sbrk_aligned+0x12>
 8010e78:	f000 fa58 	bl	801132c <_sbrk_r>
 8010e7c:	6030      	str	r0, [r6, #0]
 8010e7e:	4621      	mov	r1, r4
 8010e80:	4628      	mov	r0, r5
 8010e82:	f000 fa53 	bl	801132c <_sbrk_r>
 8010e86:	1c43      	adds	r3, r0, #1
 8010e88:	d103      	bne.n	8010e92 <sbrk_aligned+0x26>
 8010e8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010e8e:	4620      	mov	r0, r4
 8010e90:	bd70      	pop	{r4, r5, r6, pc}
 8010e92:	1cc4      	adds	r4, r0, #3
 8010e94:	f024 0403 	bic.w	r4, r4, #3
 8010e98:	42a0      	cmp	r0, r4
 8010e9a:	d0f8      	beq.n	8010e8e <sbrk_aligned+0x22>
 8010e9c:	1a21      	subs	r1, r4, r0
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f000 fa44 	bl	801132c <_sbrk_r>
 8010ea4:	3001      	adds	r0, #1
 8010ea6:	d1f2      	bne.n	8010e8e <sbrk_aligned+0x22>
 8010ea8:	e7ef      	b.n	8010e8a <sbrk_aligned+0x1e>
 8010eaa:	bf00      	nop
 8010eac:	2000240c 	.word	0x2000240c

08010eb0 <_malloc_r>:
 8010eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb4:	1ccd      	adds	r5, r1, #3
 8010eb6:	f025 0503 	bic.w	r5, r5, #3
 8010eba:	3508      	adds	r5, #8
 8010ebc:	2d0c      	cmp	r5, #12
 8010ebe:	bf38      	it	cc
 8010ec0:	250c      	movcc	r5, #12
 8010ec2:	2d00      	cmp	r5, #0
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	db01      	blt.n	8010ecc <_malloc_r+0x1c>
 8010ec8:	42a9      	cmp	r1, r5
 8010eca:	d904      	bls.n	8010ed6 <_malloc_r+0x26>
 8010ecc:	230c      	movs	r3, #12
 8010ece:	6033      	str	r3, [r6, #0]
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010fac <_malloc_r+0xfc>
 8010eda:	f000 f89d 	bl	8011018 <__malloc_lock>
 8010ede:	f8d8 3000 	ldr.w	r3, [r8]
 8010ee2:	461c      	mov	r4, r3
 8010ee4:	bb44      	cbnz	r4, 8010f38 <_malloc_r+0x88>
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f7ff ffbf 	bl	8010e6c <sbrk_aligned>
 8010eee:	1c43      	adds	r3, r0, #1
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	d158      	bne.n	8010fa6 <_malloc_r+0xf6>
 8010ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8010ef8:	4627      	mov	r7, r4
 8010efa:	2f00      	cmp	r7, #0
 8010efc:	d143      	bne.n	8010f86 <_malloc_r+0xd6>
 8010efe:	2c00      	cmp	r4, #0
 8010f00:	d04b      	beq.n	8010f9a <_malloc_r+0xea>
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	4639      	mov	r1, r7
 8010f06:	4630      	mov	r0, r6
 8010f08:	eb04 0903 	add.w	r9, r4, r3
 8010f0c:	f000 fa0e 	bl	801132c <_sbrk_r>
 8010f10:	4581      	cmp	r9, r0
 8010f12:	d142      	bne.n	8010f9a <_malloc_r+0xea>
 8010f14:	6821      	ldr	r1, [r4, #0]
 8010f16:	1a6d      	subs	r5, r5, r1
 8010f18:	4629      	mov	r1, r5
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ff ffa6 	bl	8010e6c <sbrk_aligned>
 8010f20:	3001      	adds	r0, #1
 8010f22:	d03a      	beq.n	8010f9a <_malloc_r+0xea>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	442b      	add	r3, r5
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f2e:	685a      	ldr	r2, [r3, #4]
 8010f30:	bb62      	cbnz	r2, 8010f8c <_malloc_r+0xdc>
 8010f32:	f8c8 7000 	str.w	r7, [r8]
 8010f36:	e00f      	b.n	8010f58 <_malloc_r+0xa8>
 8010f38:	6822      	ldr	r2, [r4, #0]
 8010f3a:	1b52      	subs	r2, r2, r5
 8010f3c:	d420      	bmi.n	8010f80 <_malloc_r+0xd0>
 8010f3e:	2a0b      	cmp	r2, #11
 8010f40:	d917      	bls.n	8010f72 <_malloc_r+0xc2>
 8010f42:	1961      	adds	r1, r4, r5
 8010f44:	42a3      	cmp	r3, r4
 8010f46:	6025      	str	r5, [r4, #0]
 8010f48:	bf18      	it	ne
 8010f4a:	6059      	strne	r1, [r3, #4]
 8010f4c:	6863      	ldr	r3, [r4, #4]
 8010f4e:	bf08      	it	eq
 8010f50:	f8c8 1000 	streq.w	r1, [r8]
 8010f54:	5162      	str	r2, [r4, r5]
 8010f56:	604b      	str	r3, [r1, #4]
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f000 f863 	bl	8011024 <__malloc_unlock>
 8010f5e:	f104 000b 	add.w	r0, r4, #11
 8010f62:	1d23      	adds	r3, r4, #4
 8010f64:	f020 0007 	bic.w	r0, r0, #7
 8010f68:	1ac2      	subs	r2, r0, r3
 8010f6a:	bf1c      	itt	ne
 8010f6c:	1a1b      	subne	r3, r3, r0
 8010f6e:	50a3      	strne	r3, [r4, r2]
 8010f70:	e7af      	b.n	8010ed2 <_malloc_r+0x22>
 8010f72:	6862      	ldr	r2, [r4, #4]
 8010f74:	42a3      	cmp	r3, r4
 8010f76:	bf0c      	ite	eq
 8010f78:	f8c8 2000 	streq.w	r2, [r8]
 8010f7c:	605a      	strne	r2, [r3, #4]
 8010f7e:	e7eb      	b.n	8010f58 <_malloc_r+0xa8>
 8010f80:	4623      	mov	r3, r4
 8010f82:	6864      	ldr	r4, [r4, #4]
 8010f84:	e7ae      	b.n	8010ee4 <_malloc_r+0x34>
 8010f86:	463c      	mov	r4, r7
 8010f88:	687f      	ldr	r7, [r7, #4]
 8010f8a:	e7b6      	b.n	8010efa <_malloc_r+0x4a>
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	42a3      	cmp	r3, r4
 8010f92:	d1fb      	bne.n	8010f8c <_malloc_r+0xdc>
 8010f94:	2300      	movs	r3, #0
 8010f96:	6053      	str	r3, [r2, #4]
 8010f98:	e7de      	b.n	8010f58 <_malloc_r+0xa8>
 8010f9a:	230c      	movs	r3, #12
 8010f9c:	6033      	str	r3, [r6, #0]
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f000 f840 	bl	8011024 <__malloc_unlock>
 8010fa4:	e794      	b.n	8010ed0 <_malloc_r+0x20>
 8010fa6:	6005      	str	r5, [r0, #0]
 8010fa8:	e7d6      	b.n	8010f58 <_malloc_r+0xa8>
 8010faa:	bf00      	nop
 8010fac:	20002410 	.word	0x20002410

08010fb0 <sniprintf>:
 8010fb0:	b40c      	push	{r2, r3}
 8010fb2:	b530      	push	{r4, r5, lr}
 8010fb4:	4b17      	ldr	r3, [pc, #92]	@ (8011014 <sniprintf+0x64>)
 8010fb6:	1e0c      	subs	r4, r1, #0
 8010fb8:	681d      	ldr	r5, [r3, #0]
 8010fba:	b09d      	sub	sp, #116	@ 0x74
 8010fbc:	da08      	bge.n	8010fd0 <sniprintf+0x20>
 8010fbe:	238b      	movs	r3, #139	@ 0x8b
 8010fc0:	602b      	str	r3, [r5, #0]
 8010fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fc6:	b01d      	add	sp, #116	@ 0x74
 8010fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fcc:	b002      	add	sp, #8
 8010fce:	4770      	bx	lr
 8010fd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010fd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010fd8:	bf14      	ite	ne
 8010fda:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010fde:	4623      	moveq	r3, r4
 8010fe0:	9304      	str	r3, [sp, #16]
 8010fe2:	9307      	str	r3, [sp, #28]
 8010fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010fe8:	9002      	str	r0, [sp, #8]
 8010fea:	9006      	str	r0, [sp, #24]
 8010fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010ff0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010ff2:	ab21      	add	r3, sp, #132	@ 0x84
 8010ff4:	a902      	add	r1, sp, #8
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	f000 fa89 	bl	8011510 <_svfiprintf_r>
 8010ffe:	1c43      	adds	r3, r0, #1
 8011000:	bfbc      	itt	lt
 8011002:	238b      	movlt	r3, #139	@ 0x8b
 8011004:	602b      	strlt	r3, [r5, #0]
 8011006:	2c00      	cmp	r4, #0
 8011008:	d0dd      	beq.n	8010fc6 <sniprintf+0x16>
 801100a:	9b02      	ldr	r3, [sp, #8]
 801100c:	2200      	movs	r2, #0
 801100e:	701a      	strb	r2, [r3, #0]
 8011010:	e7d9      	b.n	8010fc6 <sniprintf+0x16>
 8011012:	bf00      	nop
 8011014:	20000098 	.word	0x20000098

08011018 <__malloc_lock>:
 8011018:	4801      	ldr	r0, [pc, #4]	@ (8011020 <__malloc_lock+0x8>)
 801101a:	f000 b9c2 	b.w	80113a2 <__retarget_lock_acquire_recursive>
 801101e:	bf00      	nop
 8011020:	20002550 	.word	0x20002550

08011024 <__malloc_unlock>:
 8011024:	4801      	ldr	r0, [pc, #4]	@ (801102c <__malloc_unlock+0x8>)
 8011026:	f000 b9bd 	b.w	80113a4 <__retarget_lock_release_recursive>
 801102a:	bf00      	nop
 801102c:	20002550 	.word	0x20002550

08011030 <std>:
 8011030:	2300      	movs	r3, #0
 8011032:	b510      	push	{r4, lr}
 8011034:	4604      	mov	r4, r0
 8011036:	e9c0 3300 	strd	r3, r3, [r0]
 801103a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801103e:	6083      	str	r3, [r0, #8]
 8011040:	8181      	strh	r1, [r0, #12]
 8011042:	6643      	str	r3, [r0, #100]	@ 0x64
 8011044:	81c2      	strh	r2, [r0, #14]
 8011046:	6183      	str	r3, [r0, #24]
 8011048:	4619      	mov	r1, r3
 801104a:	2208      	movs	r2, #8
 801104c:	305c      	adds	r0, #92	@ 0x5c
 801104e:	f000 f964 	bl	801131a <memset>
 8011052:	4b0d      	ldr	r3, [pc, #52]	@ (8011088 <std+0x58>)
 8011054:	6263      	str	r3, [r4, #36]	@ 0x24
 8011056:	4b0d      	ldr	r3, [pc, #52]	@ (801108c <std+0x5c>)
 8011058:	62a3      	str	r3, [r4, #40]	@ 0x28
 801105a:	4b0d      	ldr	r3, [pc, #52]	@ (8011090 <std+0x60>)
 801105c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801105e:	4b0d      	ldr	r3, [pc, #52]	@ (8011094 <std+0x64>)
 8011060:	6323      	str	r3, [r4, #48]	@ 0x30
 8011062:	4b0d      	ldr	r3, [pc, #52]	@ (8011098 <std+0x68>)
 8011064:	6224      	str	r4, [r4, #32]
 8011066:	429c      	cmp	r4, r3
 8011068:	d006      	beq.n	8011078 <std+0x48>
 801106a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801106e:	4294      	cmp	r4, r2
 8011070:	d002      	beq.n	8011078 <std+0x48>
 8011072:	33d0      	adds	r3, #208	@ 0xd0
 8011074:	429c      	cmp	r4, r3
 8011076:	d105      	bne.n	8011084 <std+0x54>
 8011078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801107c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011080:	f000 b98e 	b.w	80113a0 <__retarget_lock_init_recursive>
 8011084:	bd10      	pop	{r4, pc}
 8011086:	bf00      	nop
 8011088:	08011e01 	.word	0x08011e01
 801108c:	08011e23 	.word	0x08011e23
 8011090:	08011e5b 	.word	0x08011e5b
 8011094:	08011e7f 	.word	0x08011e7f
 8011098:	20002414 	.word	0x20002414

0801109c <stdio_exit_handler>:
 801109c:	4a02      	ldr	r2, [pc, #8]	@ (80110a8 <stdio_exit_handler+0xc>)
 801109e:	4903      	ldr	r1, [pc, #12]	@ (80110ac <stdio_exit_handler+0x10>)
 80110a0:	4803      	ldr	r0, [pc, #12]	@ (80110b0 <stdio_exit_handler+0x14>)
 80110a2:	f000 b869 	b.w	8011178 <_fwalk_sglue>
 80110a6:	bf00      	nop
 80110a8:	2000008c 	.word	0x2000008c
 80110ac:	08011db1 	.word	0x08011db1
 80110b0:	2000009c 	.word	0x2000009c

080110b4 <cleanup_stdio>:
 80110b4:	6841      	ldr	r1, [r0, #4]
 80110b6:	4b0c      	ldr	r3, [pc, #48]	@ (80110e8 <cleanup_stdio+0x34>)
 80110b8:	4299      	cmp	r1, r3
 80110ba:	b510      	push	{r4, lr}
 80110bc:	4604      	mov	r4, r0
 80110be:	d001      	beq.n	80110c4 <cleanup_stdio+0x10>
 80110c0:	f000 fe76 	bl	8011db0 <_fflush_r>
 80110c4:	68a1      	ldr	r1, [r4, #8]
 80110c6:	4b09      	ldr	r3, [pc, #36]	@ (80110ec <cleanup_stdio+0x38>)
 80110c8:	4299      	cmp	r1, r3
 80110ca:	d002      	beq.n	80110d2 <cleanup_stdio+0x1e>
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 fe6f 	bl	8011db0 <_fflush_r>
 80110d2:	68e1      	ldr	r1, [r4, #12]
 80110d4:	4b06      	ldr	r3, [pc, #24]	@ (80110f0 <cleanup_stdio+0x3c>)
 80110d6:	4299      	cmp	r1, r3
 80110d8:	d004      	beq.n	80110e4 <cleanup_stdio+0x30>
 80110da:	4620      	mov	r0, r4
 80110dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110e0:	f000 be66 	b.w	8011db0 <_fflush_r>
 80110e4:	bd10      	pop	{r4, pc}
 80110e6:	bf00      	nop
 80110e8:	20002414 	.word	0x20002414
 80110ec:	2000247c 	.word	0x2000247c
 80110f0:	200024e4 	.word	0x200024e4

080110f4 <global_stdio_init.part.0>:
 80110f4:	b510      	push	{r4, lr}
 80110f6:	4b0b      	ldr	r3, [pc, #44]	@ (8011124 <global_stdio_init.part.0+0x30>)
 80110f8:	4c0b      	ldr	r4, [pc, #44]	@ (8011128 <global_stdio_init.part.0+0x34>)
 80110fa:	4a0c      	ldr	r2, [pc, #48]	@ (801112c <global_stdio_init.part.0+0x38>)
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	4620      	mov	r0, r4
 8011100:	2200      	movs	r2, #0
 8011102:	2104      	movs	r1, #4
 8011104:	f7ff ff94 	bl	8011030 <std>
 8011108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801110c:	2201      	movs	r2, #1
 801110e:	2109      	movs	r1, #9
 8011110:	f7ff ff8e 	bl	8011030 <std>
 8011114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011118:	2202      	movs	r2, #2
 801111a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801111e:	2112      	movs	r1, #18
 8011120:	f7ff bf86 	b.w	8011030 <std>
 8011124:	2000254c 	.word	0x2000254c
 8011128:	20002414 	.word	0x20002414
 801112c:	0801109d 	.word	0x0801109d

08011130 <__sfp_lock_acquire>:
 8011130:	4801      	ldr	r0, [pc, #4]	@ (8011138 <__sfp_lock_acquire+0x8>)
 8011132:	f000 b936 	b.w	80113a2 <__retarget_lock_acquire_recursive>
 8011136:	bf00      	nop
 8011138:	20002551 	.word	0x20002551

0801113c <__sfp_lock_release>:
 801113c:	4801      	ldr	r0, [pc, #4]	@ (8011144 <__sfp_lock_release+0x8>)
 801113e:	f000 b931 	b.w	80113a4 <__retarget_lock_release_recursive>
 8011142:	bf00      	nop
 8011144:	20002551 	.word	0x20002551

08011148 <__sinit>:
 8011148:	b510      	push	{r4, lr}
 801114a:	4604      	mov	r4, r0
 801114c:	f7ff fff0 	bl	8011130 <__sfp_lock_acquire>
 8011150:	6a23      	ldr	r3, [r4, #32]
 8011152:	b11b      	cbz	r3, 801115c <__sinit+0x14>
 8011154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011158:	f7ff bff0 	b.w	801113c <__sfp_lock_release>
 801115c:	4b04      	ldr	r3, [pc, #16]	@ (8011170 <__sinit+0x28>)
 801115e:	6223      	str	r3, [r4, #32]
 8011160:	4b04      	ldr	r3, [pc, #16]	@ (8011174 <__sinit+0x2c>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1f5      	bne.n	8011154 <__sinit+0xc>
 8011168:	f7ff ffc4 	bl	80110f4 <global_stdio_init.part.0>
 801116c:	e7f2      	b.n	8011154 <__sinit+0xc>
 801116e:	bf00      	nop
 8011170:	080110b5 	.word	0x080110b5
 8011174:	2000254c 	.word	0x2000254c

08011178 <_fwalk_sglue>:
 8011178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801117c:	4607      	mov	r7, r0
 801117e:	4688      	mov	r8, r1
 8011180:	4614      	mov	r4, r2
 8011182:	2600      	movs	r6, #0
 8011184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011188:	f1b9 0901 	subs.w	r9, r9, #1
 801118c:	d505      	bpl.n	801119a <_fwalk_sglue+0x22>
 801118e:	6824      	ldr	r4, [r4, #0]
 8011190:	2c00      	cmp	r4, #0
 8011192:	d1f7      	bne.n	8011184 <_fwalk_sglue+0xc>
 8011194:	4630      	mov	r0, r6
 8011196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d907      	bls.n	80111b0 <_fwalk_sglue+0x38>
 80111a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111a4:	3301      	adds	r3, #1
 80111a6:	d003      	beq.n	80111b0 <_fwalk_sglue+0x38>
 80111a8:	4629      	mov	r1, r5
 80111aa:	4638      	mov	r0, r7
 80111ac:	47c0      	blx	r8
 80111ae:	4306      	orrs	r6, r0
 80111b0:	3568      	adds	r5, #104	@ 0x68
 80111b2:	e7e9      	b.n	8011188 <_fwalk_sglue+0x10>

080111b4 <iprintf>:
 80111b4:	b40f      	push	{r0, r1, r2, r3}
 80111b6:	b507      	push	{r0, r1, r2, lr}
 80111b8:	4906      	ldr	r1, [pc, #24]	@ (80111d4 <iprintf+0x20>)
 80111ba:	ab04      	add	r3, sp, #16
 80111bc:	6808      	ldr	r0, [r1, #0]
 80111be:	f853 2b04 	ldr.w	r2, [r3], #4
 80111c2:	6881      	ldr	r1, [r0, #8]
 80111c4:	9301      	str	r3, [sp, #4]
 80111c6:	f000 fac9 	bl	801175c <_vfiprintf_r>
 80111ca:	b003      	add	sp, #12
 80111cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80111d0:	b004      	add	sp, #16
 80111d2:	4770      	bx	lr
 80111d4:	20000098 	.word	0x20000098

080111d8 <putchar>:
 80111d8:	4b02      	ldr	r3, [pc, #8]	@ (80111e4 <putchar+0xc>)
 80111da:	4601      	mov	r1, r0
 80111dc:	6818      	ldr	r0, [r3, #0]
 80111de:	6882      	ldr	r2, [r0, #8]
 80111e0:	f000 bf76 	b.w	80120d0 <_putc_r>
 80111e4:	20000098 	.word	0x20000098

080111e8 <_puts_r>:
 80111e8:	6a03      	ldr	r3, [r0, #32]
 80111ea:	b570      	push	{r4, r5, r6, lr}
 80111ec:	6884      	ldr	r4, [r0, #8]
 80111ee:	4605      	mov	r5, r0
 80111f0:	460e      	mov	r6, r1
 80111f2:	b90b      	cbnz	r3, 80111f8 <_puts_r+0x10>
 80111f4:	f7ff ffa8 	bl	8011148 <__sinit>
 80111f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111fa:	07db      	lsls	r3, r3, #31
 80111fc:	d405      	bmi.n	801120a <_puts_r+0x22>
 80111fe:	89a3      	ldrh	r3, [r4, #12]
 8011200:	0598      	lsls	r0, r3, #22
 8011202:	d402      	bmi.n	801120a <_puts_r+0x22>
 8011204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011206:	f000 f8cc 	bl	80113a2 <__retarget_lock_acquire_recursive>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	0719      	lsls	r1, r3, #28
 801120e:	d502      	bpl.n	8011216 <_puts_r+0x2e>
 8011210:	6923      	ldr	r3, [r4, #16]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d135      	bne.n	8011282 <_puts_r+0x9a>
 8011216:	4621      	mov	r1, r4
 8011218:	4628      	mov	r0, r5
 801121a:	f000 fea1 	bl	8011f60 <__swsetup_r>
 801121e:	b380      	cbz	r0, 8011282 <_puts_r+0x9a>
 8011220:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011226:	07da      	lsls	r2, r3, #31
 8011228:	d405      	bmi.n	8011236 <_puts_r+0x4e>
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	059b      	lsls	r3, r3, #22
 801122e:	d402      	bmi.n	8011236 <_puts_r+0x4e>
 8011230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011232:	f000 f8b7 	bl	80113a4 <__retarget_lock_release_recursive>
 8011236:	4628      	mov	r0, r5
 8011238:	bd70      	pop	{r4, r5, r6, pc}
 801123a:	2b00      	cmp	r3, #0
 801123c:	da04      	bge.n	8011248 <_puts_r+0x60>
 801123e:	69a2      	ldr	r2, [r4, #24]
 8011240:	429a      	cmp	r2, r3
 8011242:	dc17      	bgt.n	8011274 <_puts_r+0x8c>
 8011244:	290a      	cmp	r1, #10
 8011246:	d015      	beq.n	8011274 <_puts_r+0x8c>
 8011248:	6823      	ldr	r3, [r4, #0]
 801124a:	1c5a      	adds	r2, r3, #1
 801124c:	6022      	str	r2, [r4, #0]
 801124e:	7019      	strb	r1, [r3, #0]
 8011250:	68a3      	ldr	r3, [r4, #8]
 8011252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011256:	3b01      	subs	r3, #1
 8011258:	60a3      	str	r3, [r4, #8]
 801125a:	2900      	cmp	r1, #0
 801125c:	d1ed      	bne.n	801123a <_puts_r+0x52>
 801125e:	2b00      	cmp	r3, #0
 8011260:	da11      	bge.n	8011286 <_puts_r+0x9e>
 8011262:	4622      	mov	r2, r4
 8011264:	210a      	movs	r1, #10
 8011266:	4628      	mov	r0, r5
 8011268:	f000 fe3b 	bl	8011ee2 <__swbuf_r>
 801126c:	3001      	adds	r0, #1
 801126e:	d0d7      	beq.n	8011220 <_puts_r+0x38>
 8011270:	250a      	movs	r5, #10
 8011272:	e7d7      	b.n	8011224 <_puts_r+0x3c>
 8011274:	4622      	mov	r2, r4
 8011276:	4628      	mov	r0, r5
 8011278:	f000 fe33 	bl	8011ee2 <__swbuf_r>
 801127c:	3001      	adds	r0, #1
 801127e:	d1e7      	bne.n	8011250 <_puts_r+0x68>
 8011280:	e7ce      	b.n	8011220 <_puts_r+0x38>
 8011282:	3e01      	subs	r6, #1
 8011284:	e7e4      	b.n	8011250 <_puts_r+0x68>
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	1c5a      	adds	r2, r3, #1
 801128a:	6022      	str	r2, [r4, #0]
 801128c:	220a      	movs	r2, #10
 801128e:	701a      	strb	r2, [r3, #0]
 8011290:	e7ee      	b.n	8011270 <_puts_r+0x88>
	...

08011294 <puts>:
 8011294:	4b02      	ldr	r3, [pc, #8]	@ (80112a0 <puts+0xc>)
 8011296:	4601      	mov	r1, r0
 8011298:	6818      	ldr	r0, [r3, #0]
 801129a:	f7ff bfa5 	b.w	80111e8 <_puts_r>
 801129e:	bf00      	nop
 80112a0:	20000098 	.word	0x20000098

080112a4 <strncmp>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	b16a      	cbz	r2, 80112c4 <strncmp+0x20>
 80112a8:	3901      	subs	r1, #1
 80112aa:	1884      	adds	r4, r0, r2
 80112ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d103      	bne.n	80112c0 <strncmp+0x1c>
 80112b8:	42a0      	cmp	r0, r4
 80112ba:	d001      	beq.n	80112c0 <strncmp+0x1c>
 80112bc:	2a00      	cmp	r2, #0
 80112be:	d1f5      	bne.n	80112ac <strncmp+0x8>
 80112c0:	1ad0      	subs	r0, r2, r3
 80112c2:	bd10      	pop	{r4, pc}
 80112c4:	4610      	mov	r0, r2
 80112c6:	e7fc      	b.n	80112c2 <strncmp+0x1e>

080112c8 <strncpy>:
 80112c8:	b510      	push	{r4, lr}
 80112ca:	3901      	subs	r1, #1
 80112cc:	4603      	mov	r3, r0
 80112ce:	b132      	cbz	r2, 80112de <strncpy+0x16>
 80112d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80112d4:	f803 4b01 	strb.w	r4, [r3], #1
 80112d8:	3a01      	subs	r2, #1
 80112da:	2c00      	cmp	r4, #0
 80112dc:	d1f7      	bne.n	80112ce <strncpy+0x6>
 80112de:	441a      	add	r2, r3
 80112e0:	2100      	movs	r1, #0
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d100      	bne.n	80112e8 <strncpy+0x20>
 80112e6:	bd10      	pop	{r4, pc}
 80112e8:	f803 1b01 	strb.w	r1, [r3], #1
 80112ec:	e7f9      	b.n	80112e2 <strncpy+0x1a>

080112ee <strstr>:
 80112ee:	780a      	ldrb	r2, [r1, #0]
 80112f0:	b570      	push	{r4, r5, r6, lr}
 80112f2:	b96a      	cbnz	r2, 8011310 <strstr+0x22>
 80112f4:	bd70      	pop	{r4, r5, r6, pc}
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d109      	bne.n	801130e <strstr+0x20>
 80112fa:	460c      	mov	r4, r1
 80112fc:	4605      	mov	r5, r0
 80112fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0f6      	beq.n	80112f4 <strstr+0x6>
 8011306:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801130a:	429e      	cmp	r6, r3
 801130c:	d0f7      	beq.n	80112fe <strstr+0x10>
 801130e:	3001      	adds	r0, #1
 8011310:	7803      	ldrb	r3, [r0, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1ef      	bne.n	80112f6 <strstr+0x8>
 8011316:	4618      	mov	r0, r3
 8011318:	e7ec      	b.n	80112f4 <strstr+0x6>

0801131a <memset>:
 801131a:	4402      	add	r2, r0
 801131c:	4603      	mov	r3, r0
 801131e:	4293      	cmp	r3, r2
 8011320:	d100      	bne.n	8011324 <memset+0xa>
 8011322:	4770      	bx	lr
 8011324:	f803 1b01 	strb.w	r1, [r3], #1
 8011328:	e7f9      	b.n	801131e <memset+0x4>
	...

0801132c <_sbrk_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d06      	ldr	r5, [pc, #24]	@ (8011348 <_sbrk_r+0x1c>)
 8011330:	2300      	movs	r3, #0
 8011332:	4604      	mov	r4, r0
 8011334:	4608      	mov	r0, r1
 8011336:	602b      	str	r3, [r5, #0]
 8011338:	f7f0 fac8 	bl	80018cc <_sbrk>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_sbrk_r+0x1a>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_sbrk_r+0x1a>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	20002554 	.word	0x20002554

0801134c <__errno>:
 801134c:	4b01      	ldr	r3, [pc, #4]	@ (8011354 <__errno+0x8>)
 801134e:	6818      	ldr	r0, [r3, #0]
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop
 8011354:	20000098 	.word	0x20000098

08011358 <__libc_init_array>:
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	4d0d      	ldr	r5, [pc, #52]	@ (8011390 <__libc_init_array+0x38>)
 801135c:	4c0d      	ldr	r4, [pc, #52]	@ (8011394 <__libc_init_array+0x3c>)
 801135e:	1b64      	subs	r4, r4, r5
 8011360:	10a4      	asrs	r4, r4, #2
 8011362:	2600      	movs	r6, #0
 8011364:	42a6      	cmp	r6, r4
 8011366:	d109      	bne.n	801137c <__libc_init_array+0x24>
 8011368:	4d0b      	ldr	r5, [pc, #44]	@ (8011398 <__libc_init_array+0x40>)
 801136a:	4c0c      	ldr	r4, [pc, #48]	@ (801139c <__libc_init_array+0x44>)
 801136c:	f000 ff6e 	bl	801224c <_init>
 8011370:	1b64      	subs	r4, r4, r5
 8011372:	10a4      	asrs	r4, r4, #2
 8011374:	2600      	movs	r6, #0
 8011376:	42a6      	cmp	r6, r4
 8011378:	d105      	bne.n	8011386 <__libc_init_array+0x2e>
 801137a:	bd70      	pop	{r4, r5, r6, pc}
 801137c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011380:	4798      	blx	r3
 8011382:	3601      	adds	r6, #1
 8011384:	e7ee      	b.n	8011364 <__libc_init_array+0xc>
 8011386:	f855 3b04 	ldr.w	r3, [r5], #4
 801138a:	4798      	blx	r3
 801138c:	3601      	adds	r6, #1
 801138e:	e7f2      	b.n	8011376 <__libc_init_array+0x1e>
 8011390:	08014afc 	.word	0x08014afc
 8011394:	08014afc 	.word	0x08014afc
 8011398:	08014afc 	.word	0x08014afc
 801139c:	08014b00 	.word	0x08014b00

080113a0 <__retarget_lock_init_recursive>:
 80113a0:	4770      	bx	lr

080113a2 <__retarget_lock_acquire_recursive>:
 80113a2:	4770      	bx	lr

080113a4 <__retarget_lock_release_recursive>:
 80113a4:	4770      	bx	lr

080113a6 <memcpy>:
 80113a6:	440a      	add	r2, r1
 80113a8:	4291      	cmp	r1, r2
 80113aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80113ae:	d100      	bne.n	80113b2 <memcpy+0xc>
 80113b0:	4770      	bx	lr
 80113b2:	b510      	push	{r4, lr}
 80113b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113bc:	4291      	cmp	r1, r2
 80113be:	d1f9      	bne.n	80113b4 <memcpy+0xe>
 80113c0:	bd10      	pop	{r4, pc}
	...

080113c4 <_free_r>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	4605      	mov	r5, r0
 80113c8:	2900      	cmp	r1, #0
 80113ca:	d041      	beq.n	8011450 <_free_r+0x8c>
 80113cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113d0:	1f0c      	subs	r4, r1, #4
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bfb8      	it	lt
 80113d6:	18e4      	addlt	r4, r4, r3
 80113d8:	f7ff fe1e 	bl	8011018 <__malloc_lock>
 80113dc:	4a1d      	ldr	r2, [pc, #116]	@ (8011454 <_free_r+0x90>)
 80113de:	6813      	ldr	r3, [r2, #0]
 80113e0:	b933      	cbnz	r3, 80113f0 <_free_r+0x2c>
 80113e2:	6063      	str	r3, [r4, #4]
 80113e4:	6014      	str	r4, [r2, #0]
 80113e6:	4628      	mov	r0, r5
 80113e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113ec:	f7ff be1a 	b.w	8011024 <__malloc_unlock>
 80113f0:	42a3      	cmp	r3, r4
 80113f2:	d908      	bls.n	8011406 <_free_r+0x42>
 80113f4:	6820      	ldr	r0, [r4, #0]
 80113f6:	1821      	adds	r1, r4, r0
 80113f8:	428b      	cmp	r3, r1
 80113fa:	bf01      	itttt	eq
 80113fc:	6819      	ldreq	r1, [r3, #0]
 80113fe:	685b      	ldreq	r3, [r3, #4]
 8011400:	1809      	addeq	r1, r1, r0
 8011402:	6021      	streq	r1, [r4, #0]
 8011404:	e7ed      	b.n	80113e2 <_free_r+0x1e>
 8011406:	461a      	mov	r2, r3
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	b10b      	cbz	r3, 8011410 <_free_r+0x4c>
 801140c:	42a3      	cmp	r3, r4
 801140e:	d9fa      	bls.n	8011406 <_free_r+0x42>
 8011410:	6811      	ldr	r1, [r2, #0]
 8011412:	1850      	adds	r0, r2, r1
 8011414:	42a0      	cmp	r0, r4
 8011416:	d10b      	bne.n	8011430 <_free_r+0x6c>
 8011418:	6820      	ldr	r0, [r4, #0]
 801141a:	4401      	add	r1, r0
 801141c:	1850      	adds	r0, r2, r1
 801141e:	4283      	cmp	r3, r0
 8011420:	6011      	str	r1, [r2, #0]
 8011422:	d1e0      	bne.n	80113e6 <_free_r+0x22>
 8011424:	6818      	ldr	r0, [r3, #0]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	6053      	str	r3, [r2, #4]
 801142a:	4408      	add	r0, r1
 801142c:	6010      	str	r0, [r2, #0]
 801142e:	e7da      	b.n	80113e6 <_free_r+0x22>
 8011430:	d902      	bls.n	8011438 <_free_r+0x74>
 8011432:	230c      	movs	r3, #12
 8011434:	602b      	str	r3, [r5, #0]
 8011436:	e7d6      	b.n	80113e6 <_free_r+0x22>
 8011438:	6820      	ldr	r0, [r4, #0]
 801143a:	1821      	adds	r1, r4, r0
 801143c:	428b      	cmp	r3, r1
 801143e:	bf04      	itt	eq
 8011440:	6819      	ldreq	r1, [r3, #0]
 8011442:	685b      	ldreq	r3, [r3, #4]
 8011444:	6063      	str	r3, [r4, #4]
 8011446:	bf04      	itt	eq
 8011448:	1809      	addeq	r1, r1, r0
 801144a:	6021      	streq	r1, [r4, #0]
 801144c:	6054      	str	r4, [r2, #4]
 801144e:	e7ca      	b.n	80113e6 <_free_r+0x22>
 8011450:	bd38      	pop	{r3, r4, r5, pc}
 8011452:	bf00      	nop
 8011454:	20002410 	.word	0x20002410

08011458 <__ssputs_r>:
 8011458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801145c:	688e      	ldr	r6, [r1, #8]
 801145e:	461f      	mov	r7, r3
 8011460:	42be      	cmp	r6, r7
 8011462:	680b      	ldr	r3, [r1, #0]
 8011464:	4682      	mov	sl, r0
 8011466:	460c      	mov	r4, r1
 8011468:	4690      	mov	r8, r2
 801146a:	d82d      	bhi.n	80114c8 <__ssputs_r+0x70>
 801146c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011474:	d026      	beq.n	80114c4 <__ssputs_r+0x6c>
 8011476:	6965      	ldr	r5, [r4, #20]
 8011478:	6909      	ldr	r1, [r1, #16]
 801147a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801147e:	eba3 0901 	sub.w	r9, r3, r1
 8011482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011486:	1c7b      	adds	r3, r7, #1
 8011488:	444b      	add	r3, r9
 801148a:	106d      	asrs	r5, r5, #1
 801148c:	429d      	cmp	r5, r3
 801148e:	bf38      	it	cc
 8011490:	461d      	movcc	r5, r3
 8011492:	0553      	lsls	r3, r2, #21
 8011494:	d527      	bpl.n	80114e6 <__ssputs_r+0x8e>
 8011496:	4629      	mov	r1, r5
 8011498:	f7ff fd0a 	bl	8010eb0 <_malloc_r>
 801149c:	4606      	mov	r6, r0
 801149e:	b360      	cbz	r0, 80114fa <__ssputs_r+0xa2>
 80114a0:	6921      	ldr	r1, [r4, #16]
 80114a2:	464a      	mov	r2, r9
 80114a4:	f7ff ff7f 	bl	80113a6 <memcpy>
 80114a8:	89a3      	ldrh	r3, [r4, #12]
 80114aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114b2:	81a3      	strh	r3, [r4, #12]
 80114b4:	6126      	str	r6, [r4, #16]
 80114b6:	6165      	str	r5, [r4, #20]
 80114b8:	444e      	add	r6, r9
 80114ba:	eba5 0509 	sub.w	r5, r5, r9
 80114be:	6026      	str	r6, [r4, #0]
 80114c0:	60a5      	str	r5, [r4, #8]
 80114c2:	463e      	mov	r6, r7
 80114c4:	42be      	cmp	r6, r7
 80114c6:	d900      	bls.n	80114ca <__ssputs_r+0x72>
 80114c8:	463e      	mov	r6, r7
 80114ca:	6820      	ldr	r0, [r4, #0]
 80114cc:	4632      	mov	r2, r6
 80114ce:	4641      	mov	r1, r8
 80114d0:	f000 fe32 	bl	8012138 <memmove>
 80114d4:	68a3      	ldr	r3, [r4, #8]
 80114d6:	1b9b      	subs	r3, r3, r6
 80114d8:	60a3      	str	r3, [r4, #8]
 80114da:	6823      	ldr	r3, [r4, #0]
 80114dc:	4433      	add	r3, r6
 80114de:	6023      	str	r3, [r4, #0]
 80114e0:	2000      	movs	r0, #0
 80114e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e6:	462a      	mov	r2, r5
 80114e8:	f000 fccd 	bl	8011e86 <_realloc_r>
 80114ec:	4606      	mov	r6, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d1e0      	bne.n	80114b4 <__ssputs_r+0x5c>
 80114f2:	6921      	ldr	r1, [r4, #16]
 80114f4:	4650      	mov	r0, sl
 80114f6:	f7ff ff65 	bl	80113c4 <_free_r>
 80114fa:	230c      	movs	r3, #12
 80114fc:	f8ca 3000 	str.w	r3, [sl]
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011506:	81a3      	strh	r3, [r4, #12]
 8011508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801150c:	e7e9      	b.n	80114e2 <__ssputs_r+0x8a>
	...

08011510 <_svfiprintf_r>:
 8011510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	4698      	mov	r8, r3
 8011516:	898b      	ldrh	r3, [r1, #12]
 8011518:	061b      	lsls	r3, r3, #24
 801151a:	b09d      	sub	sp, #116	@ 0x74
 801151c:	4607      	mov	r7, r0
 801151e:	460d      	mov	r5, r1
 8011520:	4614      	mov	r4, r2
 8011522:	d510      	bpl.n	8011546 <_svfiprintf_r+0x36>
 8011524:	690b      	ldr	r3, [r1, #16]
 8011526:	b973      	cbnz	r3, 8011546 <_svfiprintf_r+0x36>
 8011528:	2140      	movs	r1, #64	@ 0x40
 801152a:	f7ff fcc1 	bl	8010eb0 <_malloc_r>
 801152e:	6028      	str	r0, [r5, #0]
 8011530:	6128      	str	r0, [r5, #16]
 8011532:	b930      	cbnz	r0, 8011542 <_svfiprintf_r+0x32>
 8011534:	230c      	movs	r3, #12
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801153c:	b01d      	add	sp, #116	@ 0x74
 801153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011542:	2340      	movs	r3, #64	@ 0x40
 8011544:	616b      	str	r3, [r5, #20]
 8011546:	2300      	movs	r3, #0
 8011548:	9309      	str	r3, [sp, #36]	@ 0x24
 801154a:	2320      	movs	r3, #32
 801154c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011550:	f8cd 800c 	str.w	r8, [sp, #12]
 8011554:	2330      	movs	r3, #48	@ 0x30
 8011556:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80116f4 <_svfiprintf_r+0x1e4>
 801155a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801155e:	f04f 0901 	mov.w	r9, #1
 8011562:	4623      	mov	r3, r4
 8011564:	469a      	mov	sl, r3
 8011566:	f813 2b01 	ldrb.w	r2, [r3], #1
 801156a:	b10a      	cbz	r2, 8011570 <_svfiprintf_r+0x60>
 801156c:	2a25      	cmp	r2, #37	@ 0x25
 801156e:	d1f9      	bne.n	8011564 <_svfiprintf_r+0x54>
 8011570:	ebba 0b04 	subs.w	fp, sl, r4
 8011574:	d00b      	beq.n	801158e <_svfiprintf_r+0x7e>
 8011576:	465b      	mov	r3, fp
 8011578:	4622      	mov	r2, r4
 801157a:	4629      	mov	r1, r5
 801157c:	4638      	mov	r0, r7
 801157e:	f7ff ff6b 	bl	8011458 <__ssputs_r>
 8011582:	3001      	adds	r0, #1
 8011584:	f000 80a7 	beq.w	80116d6 <_svfiprintf_r+0x1c6>
 8011588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801158a:	445a      	add	r2, fp
 801158c:	9209      	str	r2, [sp, #36]	@ 0x24
 801158e:	f89a 3000 	ldrb.w	r3, [sl]
 8011592:	2b00      	cmp	r3, #0
 8011594:	f000 809f 	beq.w	80116d6 <_svfiprintf_r+0x1c6>
 8011598:	2300      	movs	r3, #0
 801159a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801159e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115a2:	f10a 0a01 	add.w	sl, sl, #1
 80115a6:	9304      	str	r3, [sp, #16]
 80115a8:	9307      	str	r3, [sp, #28]
 80115aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80115b0:	4654      	mov	r4, sl
 80115b2:	2205      	movs	r2, #5
 80115b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115b8:	484e      	ldr	r0, [pc, #312]	@ (80116f4 <_svfiprintf_r+0x1e4>)
 80115ba:	f7ee fe21 	bl	8000200 <memchr>
 80115be:	9a04      	ldr	r2, [sp, #16]
 80115c0:	b9d8      	cbnz	r0, 80115fa <_svfiprintf_r+0xea>
 80115c2:	06d0      	lsls	r0, r2, #27
 80115c4:	bf44      	itt	mi
 80115c6:	2320      	movmi	r3, #32
 80115c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115cc:	0711      	lsls	r1, r2, #28
 80115ce:	bf44      	itt	mi
 80115d0:	232b      	movmi	r3, #43	@ 0x2b
 80115d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d6:	f89a 3000 	ldrb.w	r3, [sl]
 80115da:	2b2a      	cmp	r3, #42	@ 0x2a
 80115dc:	d015      	beq.n	801160a <_svfiprintf_r+0xfa>
 80115de:	9a07      	ldr	r2, [sp, #28]
 80115e0:	4654      	mov	r4, sl
 80115e2:	2000      	movs	r0, #0
 80115e4:	f04f 0c0a 	mov.w	ip, #10
 80115e8:	4621      	mov	r1, r4
 80115ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115ee:	3b30      	subs	r3, #48	@ 0x30
 80115f0:	2b09      	cmp	r3, #9
 80115f2:	d94b      	bls.n	801168c <_svfiprintf_r+0x17c>
 80115f4:	b1b0      	cbz	r0, 8011624 <_svfiprintf_r+0x114>
 80115f6:	9207      	str	r2, [sp, #28]
 80115f8:	e014      	b.n	8011624 <_svfiprintf_r+0x114>
 80115fa:	eba0 0308 	sub.w	r3, r0, r8
 80115fe:	fa09 f303 	lsl.w	r3, r9, r3
 8011602:	4313      	orrs	r3, r2
 8011604:	9304      	str	r3, [sp, #16]
 8011606:	46a2      	mov	sl, r4
 8011608:	e7d2      	b.n	80115b0 <_svfiprintf_r+0xa0>
 801160a:	9b03      	ldr	r3, [sp, #12]
 801160c:	1d19      	adds	r1, r3, #4
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	9103      	str	r1, [sp, #12]
 8011612:	2b00      	cmp	r3, #0
 8011614:	bfbb      	ittet	lt
 8011616:	425b      	neglt	r3, r3
 8011618:	f042 0202 	orrlt.w	r2, r2, #2
 801161c:	9307      	strge	r3, [sp, #28]
 801161e:	9307      	strlt	r3, [sp, #28]
 8011620:	bfb8      	it	lt
 8011622:	9204      	strlt	r2, [sp, #16]
 8011624:	7823      	ldrb	r3, [r4, #0]
 8011626:	2b2e      	cmp	r3, #46	@ 0x2e
 8011628:	d10a      	bne.n	8011640 <_svfiprintf_r+0x130>
 801162a:	7863      	ldrb	r3, [r4, #1]
 801162c:	2b2a      	cmp	r3, #42	@ 0x2a
 801162e:	d132      	bne.n	8011696 <_svfiprintf_r+0x186>
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	1d1a      	adds	r2, r3, #4
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	9203      	str	r2, [sp, #12]
 8011638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801163c:	3402      	adds	r4, #2
 801163e:	9305      	str	r3, [sp, #20]
 8011640:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011704 <_svfiprintf_r+0x1f4>
 8011644:	7821      	ldrb	r1, [r4, #0]
 8011646:	2203      	movs	r2, #3
 8011648:	4650      	mov	r0, sl
 801164a:	f7ee fdd9 	bl	8000200 <memchr>
 801164e:	b138      	cbz	r0, 8011660 <_svfiprintf_r+0x150>
 8011650:	9b04      	ldr	r3, [sp, #16]
 8011652:	eba0 000a 	sub.w	r0, r0, sl
 8011656:	2240      	movs	r2, #64	@ 0x40
 8011658:	4082      	lsls	r2, r0
 801165a:	4313      	orrs	r3, r2
 801165c:	3401      	adds	r4, #1
 801165e:	9304      	str	r3, [sp, #16]
 8011660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011664:	4824      	ldr	r0, [pc, #144]	@ (80116f8 <_svfiprintf_r+0x1e8>)
 8011666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801166a:	2206      	movs	r2, #6
 801166c:	f7ee fdc8 	bl	8000200 <memchr>
 8011670:	2800      	cmp	r0, #0
 8011672:	d036      	beq.n	80116e2 <_svfiprintf_r+0x1d2>
 8011674:	4b21      	ldr	r3, [pc, #132]	@ (80116fc <_svfiprintf_r+0x1ec>)
 8011676:	bb1b      	cbnz	r3, 80116c0 <_svfiprintf_r+0x1b0>
 8011678:	9b03      	ldr	r3, [sp, #12]
 801167a:	3307      	adds	r3, #7
 801167c:	f023 0307 	bic.w	r3, r3, #7
 8011680:	3308      	adds	r3, #8
 8011682:	9303      	str	r3, [sp, #12]
 8011684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011686:	4433      	add	r3, r6
 8011688:	9309      	str	r3, [sp, #36]	@ 0x24
 801168a:	e76a      	b.n	8011562 <_svfiprintf_r+0x52>
 801168c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011690:	460c      	mov	r4, r1
 8011692:	2001      	movs	r0, #1
 8011694:	e7a8      	b.n	80115e8 <_svfiprintf_r+0xd8>
 8011696:	2300      	movs	r3, #0
 8011698:	3401      	adds	r4, #1
 801169a:	9305      	str	r3, [sp, #20]
 801169c:	4619      	mov	r1, r3
 801169e:	f04f 0c0a 	mov.w	ip, #10
 80116a2:	4620      	mov	r0, r4
 80116a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116a8:	3a30      	subs	r2, #48	@ 0x30
 80116aa:	2a09      	cmp	r2, #9
 80116ac:	d903      	bls.n	80116b6 <_svfiprintf_r+0x1a6>
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d0c6      	beq.n	8011640 <_svfiprintf_r+0x130>
 80116b2:	9105      	str	r1, [sp, #20]
 80116b4:	e7c4      	b.n	8011640 <_svfiprintf_r+0x130>
 80116b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ba:	4604      	mov	r4, r0
 80116bc:	2301      	movs	r3, #1
 80116be:	e7f0      	b.n	80116a2 <_svfiprintf_r+0x192>
 80116c0:	ab03      	add	r3, sp, #12
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	462a      	mov	r2, r5
 80116c6:	4b0e      	ldr	r3, [pc, #56]	@ (8011700 <_svfiprintf_r+0x1f0>)
 80116c8:	a904      	add	r1, sp, #16
 80116ca:	4638      	mov	r0, r7
 80116cc:	f3af 8000 	nop.w
 80116d0:	1c42      	adds	r2, r0, #1
 80116d2:	4606      	mov	r6, r0
 80116d4:	d1d6      	bne.n	8011684 <_svfiprintf_r+0x174>
 80116d6:	89ab      	ldrh	r3, [r5, #12]
 80116d8:	065b      	lsls	r3, r3, #25
 80116da:	f53f af2d 	bmi.w	8011538 <_svfiprintf_r+0x28>
 80116de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116e0:	e72c      	b.n	801153c <_svfiprintf_r+0x2c>
 80116e2:	ab03      	add	r3, sp, #12
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	462a      	mov	r2, r5
 80116e8:	4b05      	ldr	r3, [pc, #20]	@ (8011700 <_svfiprintf_r+0x1f0>)
 80116ea:	a904      	add	r1, sp, #16
 80116ec:	4638      	mov	r0, r7
 80116ee:	f000 f9bb 	bl	8011a68 <_printf_i>
 80116f2:	e7ed      	b.n	80116d0 <_svfiprintf_r+0x1c0>
 80116f4:	08014ac0 	.word	0x08014ac0
 80116f8:	08014aca 	.word	0x08014aca
 80116fc:	00000000 	.word	0x00000000
 8011700:	08011459 	.word	0x08011459
 8011704:	08014ac6 	.word	0x08014ac6

08011708 <__sfputc_r>:
 8011708:	6893      	ldr	r3, [r2, #8]
 801170a:	3b01      	subs	r3, #1
 801170c:	2b00      	cmp	r3, #0
 801170e:	b410      	push	{r4}
 8011710:	6093      	str	r3, [r2, #8]
 8011712:	da08      	bge.n	8011726 <__sfputc_r+0x1e>
 8011714:	6994      	ldr	r4, [r2, #24]
 8011716:	42a3      	cmp	r3, r4
 8011718:	db01      	blt.n	801171e <__sfputc_r+0x16>
 801171a:	290a      	cmp	r1, #10
 801171c:	d103      	bne.n	8011726 <__sfputc_r+0x1e>
 801171e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011722:	f000 bbde 	b.w	8011ee2 <__swbuf_r>
 8011726:	6813      	ldr	r3, [r2, #0]
 8011728:	1c58      	adds	r0, r3, #1
 801172a:	6010      	str	r0, [r2, #0]
 801172c:	7019      	strb	r1, [r3, #0]
 801172e:	4608      	mov	r0, r1
 8011730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011734:	4770      	bx	lr

08011736 <__sfputs_r>:
 8011736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011738:	4606      	mov	r6, r0
 801173a:	460f      	mov	r7, r1
 801173c:	4614      	mov	r4, r2
 801173e:	18d5      	adds	r5, r2, r3
 8011740:	42ac      	cmp	r4, r5
 8011742:	d101      	bne.n	8011748 <__sfputs_r+0x12>
 8011744:	2000      	movs	r0, #0
 8011746:	e007      	b.n	8011758 <__sfputs_r+0x22>
 8011748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801174c:	463a      	mov	r2, r7
 801174e:	4630      	mov	r0, r6
 8011750:	f7ff ffda 	bl	8011708 <__sfputc_r>
 8011754:	1c43      	adds	r3, r0, #1
 8011756:	d1f3      	bne.n	8011740 <__sfputs_r+0xa>
 8011758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801175c <_vfiprintf_r>:
 801175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	460d      	mov	r5, r1
 8011762:	b09d      	sub	sp, #116	@ 0x74
 8011764:	4614      	mov	r4, r2
 8011766:	4698      	mov	r8, r3
 8011768:	4606      	mov	r6, r0
 801176a:	b118      	cbz	r0, 8011774 <_vfiprintf_r+0x18>
 801176c:	6a03      	ldr	r3, [r0, #32]
 801176e:	b90b      	cbnz	r3, 8011774 <_vfiprintf_r+0x18>
 8011770:	f7ff fcea 	bl	8011148 <__sinit>
 8011774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011776:	07d9      	lsls	r1, r3, #31
 8011778:	d405      	bmi.n	8011786 <_vfiprintf_r+0x2a>
 801177a:	89ab      	ldrh	r3, [r5, #12]
 801177c:	059a      	lsls	r2, r3, #22
 801177e:	d402      	bmi.n	8011786 <_vfiprintf_r+0x2a>
 8011780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011782:	f7ff fe0e 	bl	80113a2 <__retarget_lock_acquire_recursive>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	071b      	lsls	r3, r3, #28
 801178a:	d501      	bpl.n	8011790 <_vfiprintf_r+0x34>
 801178c:	692b      	ldr	r3, [r5, #16]
 801178e:	b99b      	cbnz	r3, 80117b8 <_vfiprintf_r+0x5c>
 8011790:	4629      	mov	r1, r5
 8011792:	4630      	mov	r0, r6
 8011794:	f000 fbe4 	bl	8011f60 <__swsetup_r>
 8011798:	b170      	cbz	r0, 80117b8 <_vfiprintf_r+0x5c>
 801179a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801179c:	07dc      	lsls	r4, r3, #31
 801179e:	d504      	bpl.n	80117aa <_vfiprintf_r+0x4e>
 80117a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117a4:	b01d      	add	sp, #116	@ 0x74
 80117a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117aa:	89ab      	ldrh	r3, [r5, #12]
 80117ac:	0598      	lsls	r0, r3, #22
 80117ae:	d4f7      	bmi.n	80117a0 <_vfiprintf_r+0x44>
 80117b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117b2:	f7ff fdf7 	bl	80113a4 <__retarget_lock_release_recursive>
 80117b6:	e7f3      	b.n	80117a0 <_vfiprintf_r+0x44>
 80117b8:	2300      	movs	r3, #0
 80117ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80117bc:	2320      	movs	r3, #32
 80117be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80117c6:	2330      	movs	r3, #48	@ 0x30
 80117c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011978 <_vfiprintf_r+0x21c>
 80117cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117d0:	f04f 0901 	mov.w	r9, #1
 80117d4:	4623      	mov	r3, r4
 80117d6:	469a      	mov	sl, r3
 80117d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117dc:	b10a      	cbz	r2, 80117e2 <_vfiprintf_r+0x86>
 80117de:	2a25      	cmp	r2, #37	@ 0x25
 80117e0:	d1f9      	bne.n	80117d6 <_vfiprintf_r+0x7a>
 80117e2:	ebba 0b04 	subs.w	fp, sl, r4
 80117e6:	d00b      	beq.n	8011800 <_vfiprintf_r+0xa4>
 80117e8:	465b      	mov	r3, fp
 80117ea:	4622      	mov	r2, r4
 80117ec:	4629      	mov	r1, r5
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7ff ffa1 	bl	8011736 <__sfputs_r>
 80117f4:	3001      	adds	r0, #1
 80117f6:	f000 80a7 	beq.w	8011948 <_vfiprintf_r+0x1ec>
 80117fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117fc:	445a      	add	r2, fp
 80117fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011800:	f89a 3000 	ldrb.w	r3, [sl]
 8011804:	2b00      	cmp	r3, #0
 8011806:	f000 809f 	beq.w	8011948 <_vfiprintf_r+0x1ec>
 801180a:	2300      	movs	r3, #0
 801180c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011814:	f10a 0a01 	add.w	sl, sl, #1
 8011818:	9304      	str	r3, [sp, #16]
 801181a:	9307      	str	r3, [sp, #28]
 801181c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011820:	931a      	str	r3, [sp, #104]	@ 0x68
 8011822:	4654      	mov	r4, sl
 8011824:	2205      	movs	r2, #5
 8011826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801182a:	4853      	ldr	r0, [pc, #332]	@ (8011978 <_vfiprintf_r+0x21c>)
 801182c:	f7ee fce8 	bl	8000200 <memchr>
 8011830:	9a04      	ldr	r2, [sp, #16]
 8011832:	b9d8      	cbnz	r0, 801186c <_vfiprintf_r+0x110>
 8011834:	06d1      	lsls	r1, r2, #27
 8011836:	bf44      	itt	mi
 8011838:	2320      	movmi	r3, #32
 801183a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801183e:	0713      	lsls	r3, r2, #28
 8011840:	bf44      	itt	mi
 8011842:	232b      	movmi	r3, #43	@ 0x2b
 8011844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011848:	f89a 3000 	ldrb.w	r3, [sl]
 801184c:	2b2a      	cmp	r3, #42	@ 0x2a
 801184e:	d015      	beq.n	801187c <_vfiprintf_r+0x120>
 8011850:	9a07      	ldr	r2, [sp, #28]
 8011852:	4654      	mov	r4, sl
 8011854:	2000      	movs	r0, #0
 8011856:	f04f 0c0a 	mov.w	ip, #10
 801185a:	4621      	mov	r1, r4
 801185c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011860:	3b30      	subs	r3, #48	@ 0x30
 8011862:	2b09      	cmp	r3, #9
 8011864:	d94b      	bls.n	80118fe <_vfiprintf_r+0x1a2>
 8011866:	b1b0      	cbz	r0, 8011896 <_vfiprintf_r+0x13a>
 8011868:	9207      	str	r2, [sp, #28]
 801186a:	e014      	b.n	8011896 <_vfiprintf_r+0x13a>
 801186c:	eba0 0308 	sub.w	r3, r0, r8
 8011870:	fa09 f303 	lsl.w	r3, r9, r3
 8011874:	4313      	orrs	r3, r2
 8011876:	9304      	str	r3, [sp, #16]
 8011878:	46a2      	mov	sl, r4
 801187a:	e7d2      	b.n	8011822 <_vfiprintf_r+0xc6>
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	1d19      	adds	r1, r3, #4
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	9103      	str	r1, [sp, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	bfbb      	ittet	lt
 8011888:	425b      	neglt	r3, r3
 801188a:	f042 0202 	orrlt.w	r2, r2, #2
 801188e:	9307      	strge	r3, [sp, #28]
 8011890:	9307      	strlt	r3, [sp, #28]
 8011892:	bfb8      	it	lt
 8011894:	9204      	strlt	r2, [sp, #16]
 8011896:	7823      	ldrb	r3, [r4, #0]
 8011898:	2b2e      	cmp	r3, #46	@ 0x2e
 801189a:	d10a      	bne.n	80118b2 <_vfiprintf_r+0x156>
 801189c:	7863      	ldrb	r3, [r4, #1]
 801189e:	2b2a      	cmp	r3, #42	@ 0x2a
 80118a0:	d132      	bne.n	8011908 <_vfiprintf_r+0x1ac>
 80118a2:	9b03      	ldr	r3, [sp, #12]
 80118a4:	1d1a      	adds	r2, r3, #4
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	9203      	str	r2, [sp, #12]
 80118aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118ae:	3402      	adds	r4, #2
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011988 <_vfiprintf_r+0x22c>
 80118b6:	7821      	ldrb	r1, [r4, #0]
 80118b8:	2203      	movs	r2, #3
 80118ba:	4650      	mov	r0, sl
 80118bc:	f7ee fca0 	bl	8000200 <memchr>
 80118c0:	b138      	cbz	r0, 80118d2 <_vfiprintf_r+0x176>
 80118c2:	9b04      	ldr	r3, [sp, #16]
 80118c4:	eba0 000a 	sub.w	r0, r0, sl
 80118c8:	2240      	movs	r2, #64	@ 0x40
 80118ca:	4082      	lsls	r2, r0
 80118cc:	4313      	orrs	r3, r2
 80118ce:	3401      	adds	r4, #1
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d6:	4829      	ldr	r0, [pc, #164]	@ (801197c <_vfiprintf_r+0x220>)
 80118d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118dc:	2206      	movs	r2, #6
 80118de:	f7ee fc8f 	bl	8000200 <memchr>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	d03f      	beq.n	8011966 <_vfiprintf_r+0x20a>
 80118e6:	4b26      	ldr	r3, [pc, #152]	@ (8011980 <_vfiprintf_r+0x224>)
 80118e8:	bb1b      	cbnz	r3, 8011932 <_vfiprintf_r+0x1d6>
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	3307      	adds	r3, #7
 80118ee:	f023 0307 	bic.w	r3, r3, #7
 80118f2:	3308      	adds	r3, #8
 80118f4:	9303      	str	r3, [sp, #12]
 80118f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f8:	443b      	add	r3, r7
 80118fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80118fc:	e76a      	b.n	80117d4 <_vfiprintf_r+0x78>
 80118fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011902:	460c      	mov	r4, r1
 8011904:	2001      	movs	r0, #1
 8011906:	e7a8      	b.n	801185a <_vfiprintf_r+0xfe>
 8011908:	2300      	movs	r3, #0
 801190a:	3401      	adds	r4, #1
 801190c:	9305      	str	r3, [sp, #20]
 801190e:	4619      	mov	r1, r3
 8011910:	f04f 0c0a 	mov.w	ip, #10
 8011914:	4620      	mov	r0, r4
 8011916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801191a:	3a30      	subs	r2, #48	@ 0x30
 801191c:	2a09      	cmp	r2, #9
 801191e:	d903      	bls.n	8011928 <_vfiprintf_r+0x1cc>
 8011920:	2b00      	cmp	r3, #0
 8011922:	d0c6      	beq.n	80118b2 <_vfiprintf_r+0x156>
 8011924:	9105      	str	r1, [sp, #20]
 8011926:	e7c4      	b.n	80118b2 <_vfiprintf_r+0x156>
 8011928:	fb0c 2101 	mla	r1, ip, r1, r2
 801192c:	4604      	mov	r4, r0
 801192e:	2301      	movs	r3, #1
 8011930:	e7f0      	b.n	8011914 <_vfiprintf_r+0x1b8>
 8011932:	ab03      	add	r3, sp, #12
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	462a      	mov	r2, r5
 8011938:	4b12      	ldr	r3, [pc, #72]	@ (8011984 <_vfiprintf_r+0x228>)
 801193a:	a904      	add	r1, sp, #16
 801193c:	4630      	mov	r0, r6
 801193e:	f3af 8000 	nop.w
 8011942:	4607      	mov	r7, r0
 8011944:	1c78      	adds	r0, r7, #1
 8011946:	d1d6      	bne.n	80118f6 <_vfiprintf_r+0x19a>
 8011948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801194a:	07d9      	lsls	r1, r3, #31
 801194c:	d405      	bmi.n	801195a <_vfiprintf_r+0x1fe>
 801194e:	89ab      	ldrh	r3, [r5, #12]
 8011950:	059a      	lsls	r2, r3, #22
 8011952:	d402      	bmi.n	801195a <_vfiprintf_r+0x1fe>
 8011954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011956:	f7ff fd25 	bl	80113a4 <__retarget_lock_release_recursive>
 801195a:	89ab      	ldrh	r3, [r5, #12]
 801195c:	065b      	lsls	r3, r3, #25
 801195e:	f53f af1f 	bmi.w	80117a0 <_vfiprintf_r+0x44>
 8011962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011964:	e71e      	b.n	80117a4 <_vfiprintf_r+0x48>
 8011966:	ab03      	add	r3, sp, #12
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	462a      	mov	r2, r5
 801196c:	4b05      	ldr	r3, [pc, #20]	@ (8011984 <_vfiprintf_r+0x228>)
 801196e:	a904      	add	r1, sp, #16
 8011970:	4630      	mov	r0, r6
 8011972:	f000 f879 	bl	8011a68 <_printf_i>
 8011976:	e7e4      	b.n	8011942 <_vfiprintf_r+0x1e6>
 8011978:	08014ac0 	.word	0x08014ac0
 801197c:	08014aca 	.word	0x08014aca
 8011980:	00000000 	.word	0x00000000
 8011984:	08011737 	.word	0x08011737
 8011988:	08014ac6 	.word	0x08014ac6

0801198c <_printf_common>:
 801198c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011990:	4616      	mov	r6, r2
 8011992:	4698      	mov	r8, r3
 8011994:	688a      	ldr	r2, [r1, #8]
 8011996:	690b      	ldr	r3, [r1, #16]
 8011998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801199c:	4293      	cmp	r3, r2
 801199e:	bfb8      	it	lt
 80119a0:	4613      	movlt	r3, r2
 80119a2:	6033      	str	r3, [r6, #0]
 80119a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80119a8:	4607      	mov	r7, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	b10a      	cbz	r2, 80119b2 <_printf_common+0x26>
 80119ae:	3301      	adds	r3, #1
 80119b0:	6033      	str	r3, [r6, #0]
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	0699      	lsls	r1, r3, #26
 80119b6:	bf42      	ittt	mi
 80119b8:	6833      	ldrmi	r3, [r6, #0]
 80119ba:	3302      	addmi	r3, #2
 80119bc:	6033      	strmi	r3, [r6, #0]
 80119be:	6825      	ldr	r5, [r4, #0]
 80119c0:	f015 0506 	ands.w	r5, r5, #6
 80119c4:	d106      	bne.n	80119d4 <_printf_common+0x48>
 80119c6:	f104 0a19 	add.w	sl, r4, #25
 80119ca:	68e3      	ldr	r3, [r4, #12]
 80119cc:	6832      	ldr	r2, [r6, #0]
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	42ab      	cmp	r3, r5
 80119d2:	dc26      	bgt.n	8011a22 <_printf_common+0x96>
 80119d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80119d8:	6822      	ldr	r2, [r4, #0]
 80119da:	3b00      	subs	r3, #0
 80119dc:	bf18      	it	ne
 80119de:	2301      	movne	r3, #1
 80119e0:	0692      	lsls	r2, r2, #26
 80119e2:	d42b      	bmi.n	8011a3c <_printf_common+0xb0>
 80119e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119e8:	4641      	mov	r1, r8
 80119ea:	4638      	mov	r0, r7
 80119ec:	47c8      	blx	r9
 80119ee:	3001      	adds	r0, #1
 80119f0:	d01e      	beq.n	8011a30 <_printf_common+0xa4>
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	6922      	ldr	r2, [r4, #16]
 80119f6:	f003 0306 	and.w	r3, r3, #6
 80119fa:	2b04      	cmp	r3, #4
 80119fc:	bf02      	ittt	eq
 80119fe:	68e5      	ldreq	r5, [r4, #12]
 8011a00:	6833      	ldreq	r3, [r6, #0]
 8011a02:	1aed      	subeq	r5, r5, r3
 8011a04:	68a3      	ldr	r3, [r4, #8]
 8011a06:	bf0c      	ite	eq
 8011a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a0c:	2500      	movne	r5, #0
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	bfc4      	itt	gt
 8011a12:	1a9b      	subgt	r3, r3, r2
 8011a14:	18ed      	addgt	r5, r5, r3
 8011a16:	2600      	movs	r6, #0
 8011a18:	341a      	adds	r4, #26
 8011a1a:	42b5      	cmp	r5, r6
 8011a1c:	d11a      	bne.n	8011a54 <_printf_common+0xc8>
 8011a1e:	2000      	movs	r0, #0
 8011a20:	e008      	b.n	8011a34 <_printf_common+0xa8>
 8011a22:	2301      	movs	r3, #1
 8011a24:	4652      	mov	r2, sl
 8011a26:	4641      	mov	r1, r8
 8011a28:	4638      	mov	r0, r7
 8011a2a:	47c8      	blx	r9
 8011a2c:	3001      	adds	r0, #1
 8011a2e:	d103      	bne.n	8011a38 <_printf_common+0xac>
 8011a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a38:	3501      	adds	r5, #1
 8011a3a:	e7c6      	b.n	80119ca <_printf_common+0x3e>
 8011a3c:	18e1      	adds	r1, r4, r3
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	2030      	movs	r0, #48	@ 0x30
 8011a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a46:	4422      	add	r2, r4
 8011a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a50:	3302      	adds	r3, #2
 8011a52:	e7c7      	b.n	80119e4 <_printf_common+0x58>
 8011a54:	2301      	movs	r3, #1
 8011a56:	4622      	mov	r2, r4
 8011a58:	4641      	mov	r1, r8
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	47c8      	blx	r9
 8011a5e:	3001      	adds	r0, #1
 8011a60:	d0e6      	beq.n	8011a30 <_printf_common+0xa4>
 8011a62:	3601      	adds	r6, #1
 8011a64:	e7d9      	b.n	8011a1a <_printf_common+0x8e>
	...

08011a68 <_printf_i>:
 8011a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a6c:	7e0f      	ldrb	r7, [r1, #24]
 8011a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a70:	2f78      	cmp	r7, #120	@ 0x78
 8011a72:	4691      	mov	r9, r2
 8011a74:	4680      	mov	r8, r0
 8011a76:	460c      	mov	r4, r1
 8011a78:	469a      	mov	sl, r3
 8011a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a7e:	d807      	bhi.n	8011a90 <_printf_i+0x28>
 8011a80:	2f62      	cmp	r7, #98	@ 0x62
 8011a82:	d80a      	bhi.n	8011a9a <_printf_i+0x32>
 8011a84:	2f00      	cmp	r7, #0
 8011a86:	f000 80d2 	beq.w	8011c2e <_printf_i+0x1c6>
 8011a8a:	2f58      	cmp	r7, #88	@ 0x58
 8011a8c:	f000 80b9 	beq.w	8011c02 <_printf_i+0x19a>
 8011a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011a98:	e03a      	b.n	8011b10 <_printf_i+0xa8>
 8011a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011a9e:	2b15      	cmp	r3, #21
 8011aa0:	d8f6      	bhi.n	8011a90 <_printf_i+0x28>
 8011aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8011aa8 <_printf_i+0x40>)
 8011aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011aa8:	08011b01 	.word	0x08011b01
 8011aac:	08011b15 	.word	0x08011b15
 8011ab0:	08011a91 	.word	0x08011a91
 8011ab4:	08011a91 	.word	0x08011a91
 8011ab8:	08011a91 	.word	0x08011a91
 8011abc:	08011a91 	.word	0x08011a91
 8011ac0:	08011b15 	.word	0x08011b15
 8011ac4:	08011a91 	.word	0x08011a91
 8011ac8:	08011a91 	.word	0x08011a91
 8011acc:	08011a91 	.word	0x08011a91
 8011ad0:	08011a91 	.word	0x08011a91
 8011ad4:	08011c15 	.word	0x08011c15
 8011ad8:	08011b3f 	.word	0x08011b3f
 8011adc:	08011bcf 	.word	0x08011bcf
 8011ae0:	08011a91 	.word	0x08011a91
 8011ae4:	08011a91 	.word	0x08011a91
 8011ae8:	08011c37 	.word	0x08011c37
 8011aec:	08011a91 	.word	0x08011a91
 8011af0:	08011b3f 	.word	0x08011b3f
 8011af4:	08011a91 	.word	0x08011a91
 8011af8:	08011a91 	.word	0x08011a91
 8011afc:	08011bd7 	.word	0x08011bd7
 8011b00:	6833      	ldr	r3, [r6, #0]
 8011b02:	1d1a      	adds	r2, r3, #4
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6032      	str	r2, [r6, #0]
 8011b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011b10:	2301      	movs	r3, #1
 8011b12:	e09d      	b.n	8011c50 <_printf_i+0x1e8>
 8011b14:	6833      	ldr	r3, [r6, #0]
 8011b16:	6820      	ldr	r0, [r4, #0]
 8011b18:	1d19      	adds	r1, r3, #4
 8011b1a:	6031      	str	r1, [r6, #0]
 8011b1c:	0606      	lsls	r6, r0, #24
 8011b1e:	d501      	bpl.n	8011b24 <_printf_i+0xbc>
 8011b20:	681d      	ldr	r5, [r3, #0]
 8011b22:	e003      	b.n	8011b2c <_printf_i+0xc4>
 8011b24:	0645      	lsls	r5, r0, #25
 8011b26:	d5fb      	bpl.n	8011b20 <_printf_i+0xb8>
 8011b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011b2c:	2d00      	cmp	r5, #0
 8011b2e:	da03      	bge.n	8011b38 <_printf_i+0xd0>
 8011b30:	232d      	movs	r3, #45	@ 0x2d
 8011b32:	426d      	negs	r5, r5
 8011b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b38:	4859      	ldr	r0, [pc, #356]	@ (8011ca0 <_printf_i+0x238>)
 8011b3a:	230a      	movs	r3, #10
 8011b3c:	e011      	b.n	8011b62 <_printf_i+0xfa>
 8011b3e:	6821      	ldr	r1, [r4, #0]
 8011b40:	6833      	ldr	r3, [r6, #0]
 8011b42:	0608      	lsls	r0, r1, #24
 8011b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b48:	d402      	bmi.n	8011b50 <_printf_i+0xe8>
 8011b4a:	0649      	lsls	r1, r1, #25
 8011b4c:	bf48      	it	mi
 8011b4e:	b2ad      	uxthmi	r5, r5
 8011b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b52:	4853      	ldr	r0, [pc, #332]	@ (8011ca0 <_printf_i+0x238>)
 8011b54:	6033      	str	r3, [r6, #0]
 8011b56:	bf14      	ite	ne
 8011b58:	230a      	movne	r3, #10
 8011b5a:	2308      	moveq	r3, #8
 8011b5c:	2100      	movs	r1, #0
 8011b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b62:	6866      	ldr	r6, [r4, #4]
 8011b64:	60a6      	str	r6, [r4, #8]
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	bfa2      	ittt	ge
 8011b6a:	6821      	ldrge	r1, [r4, #0]
 8011b6c:	f021 0104 	bicge.w	r1, r1, #4
 8011b70:	6021      	strge	r1, [r4, #0]
 8011b72:	b90d      	cbnz	r5, 8011b78 <_printf_i+0x110>
 8011b74:	2e00      	cmp	r6, #0
 8011b76:	d04b      	beq.n	8011c10 <_printf_i+0x1a8>
 8011b78:	4616      	mov	r6, r2
 8011b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8011b82:	5dc7      	ldrb	r7, [r0, r7]
 8011b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b88:	462f      	mov	r7, r5
 8011b8a:	42bb      	cmp	r3, r7
 8011b8c:	460d      	mov	r5, r1
 8011b8e:	d9f4      	bls.n	8011b7a <_printf_i+0x112>
 8011b90:	2b08      	cmp	r3, #8
 8011b92:	d10b      	bne.n	8011bac <_printf_i+0x144>
 8011b94:	6823      	ldr	r3, [r4, #0]
 8011b96:	07df      	lsls	r7, r3, #31
 8011b98:	d508      	bpl.n	8011bac <_printf_i+0x144>
 8011b9a:	6923      	ldr	r3, [r4, #16]
 8011b9c:	6861      	ldr	r1, [r4, #4]
 8011b9e:	4299      	cmp	r1, r3
 8011ba0:	bfde      	ittt	le
 8011ba2:	2330      	movle	r3, #48	@ 0x30
 8011ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ba8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011bac:	1b92      	subs	r2, r2, r6
 8011bae:	6122      	str	r2, [r4, #16]
 8011bb0:	f8cd a000 	str.w	sl, [sp]
 8011bb4:	464b      	mov	r3, r9
 8011bb6:	aa03      	add	r2, sp, #12
 8011bb8:	4621      	mov	r1, r4
 8011bba:	4640      	mov	r0, r8
 8011bbc:	f7ff fee6 	bl	801198c <_printf_common>
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	d14a      	bne.n	8011c5a <_printf_i+0x1f2>
 8011bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bc8:	b004      	add	sp, #16
 8011bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	f043 0320 	orr.w	r3, r3, #32
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	4833      	ldr	r0, [pc, #204]	@ (8011ca4 <_printf_i+0x23c>)
 8011bd8:	2778      	movs	r7, #120	@ 0x78
 8011bda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	6831      	ldr	r1, [r6, #0]
 8011be2:	061f      	lsls	r7, r3, #24
 8011be4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011be8:	d402      	bmi.n	8011bf0 <_printf_i+0x188>
 8011bea:	065f      	lsls	r7, r3, #25
 8011bec:	bf48      	it	mi
 8011bee:	b2ad      	uxthmi	r5, r5
 8011bf0:	6031      	str	r1, [r6, #0]
 8011bf2:	07d9      	lsls	r1, r3, #31
 8011bf4:	bf44      	itt	mi
 8011bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8011bfa:	6023      	strmi	r3, [r4, #0]
 8011bfc:	b11d      	cbz	r5, 8011c06 <_printf_i+0x19e>
 8011bfe:	2310      	movs	r3, #16
 8011c00:	e7ac      	b.n	8011b5c <_printf_i+0xf4>
 8011c02:	4827      	ldr	r0, [pc, #156]	@ (8011ca0 <_printf_i+0x238>)
 8011c04:	e7e9      	b.n	8011bda <_printf_i+0x172>
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	f023 0320 	bic.w	r3, r3, #32
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	e7f6      	b.n	8011bfe <_printf_i+0x196>
 8011c10:	4616      	mov	r6, r2
 8011c12:	e7bd      	b.n	8011b90 <_printf_i+0x128>
 8011c14:	6833      	ldr	r3, [r6, #0]
 8011c16:	6825      	ldr	r5, [r4, #0]
 8011c18:	6961      	ldr	r1, [r4, #20]
 8011c1a:	1d18      	adds	r0, r3, #4
 8011c1c:	6030      	str	r0, [r6, #0]
 8011c1e:	062e      	lsls	r6, r5, #24
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	d501      	bpl.n	8011c28 <_printf_i+0x1c0>
 8011c24:	6019      	str	r1, [r3, #0]
 8011c26:	e002      	b.n	8011c2e <_printf_i+0x1c6>
 8011c28:	0668      	lsls	r0, r5, #25
 8011c2a:	d5fb      	bpl.n	8011c24 <_printf_i+0x1bc>
 8011c2c:	8019      	strh	r1, [r3, #0]
 8011c2e:	2300      	movs	r3, #0
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	4616      	mov	r6, r2
 8011c34:	e7bc      	b.n	8011bb0 <_printf_i+0x148>
 8011c36:	6833      	ldr	r3, [r6, #0]
 8011c38:	1d1a      	adds	r2, r3, #4
 8011c3a:	6032      	str	r2, [r6, #0]
 8011c3c:	681e      	ldr	r6, [r3, #0]
 8011c3e:	6862      	ldr	r2, [r4, #4]
 8011c40:	2100      	movs	r1, #0
 8011c42:	4630      	mov	r0, r6
 8011c44:	f7ee fadc 	bl	8000200 <memchr>
 8011c48:	b108      	cbz	r0, 8011c4e <_printf_i+0x1e6>
 8011c4a:	1b80      	subs	r0, r0, r6
 8011c4c:	6060      	str	r0, [r4, #4]
 8011c4e:	6863      	ldr	r3, [r4, #4]
 8011c50:	6123      	str	r3, [r4, #16]
 8011c52:	2300      	movs	r3, #0
 8011c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c58:	e7aa      	b.n	8011bb0 <_printf_i+0x148>
 8011c5a:	6923      	ldr	r3, [r4, #16]
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	4649      	mov	r1, r9
 8011c60:	4640      	mov	r0, r8
 8011c62:	47d0      	blx	sl
 8011c64:	3001      	adds	r0, #1
 8011c66:	d0ad      	beq.n	8011bc4 <_printf_i+0x15c>
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	079b      	lsls	r3, r3, #30
 8011c6c:	d413      	bmi.n	8011c96 <_printf_i+0x22e>
 8011c6e:	68e0      	ldr	r0, [r4, #12]
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	4298      	cmp	r0, r3
 8011c74:	bfb8      	it	lt
 8011c76:	4618      	movlt	r0, r3
 8011c78:	e7a6      	b.n	8011bc8 <_printf_i+0x160>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	4632      	mov	r2, r6
 8011c7e:	4649      	mov	r1, r9
 8011c80:	4640      	mov	r0, r8
 8011c82:	47d0      	blx	sl
 8011c84:	3001      	adds	r0, #1
 8011c86:	d09d      	beq.n	8011bc4 <_printf_i+0x15c>
 8011c88:	3501      	adds	r5, #1
 8011c8a:	68e3      	ldr	r3, [r4, #12]
 8011c8c:	9903      	ldr	r1, [sp, #12]
 8011c8e:	1a5b      	subs	r3, r3, r1
 8011c90:	42ab      	cmp	r3, r5
 8011c92:	dcf2      	bgt.n	8011c7a <_printf_i+0x212>
 8011c94:	e7eb      	b.n	8011c6e <_printf_i+0x206>
 8011c96:	2500      	movs	r5, #0
 8011c98:	f104 0619 	add.w	r6, r4, #25
 8011c9c:	e7f5      	b.n	8011c8a <_printf_i+0x222>
 8011c9e:	bf00      	nop
 8011ca0:	08014ad1 	.word	0x08014ad1
 8011ca4:	08014ae2 	.word	0x08014ae2

08011ca8 <__sflush_r>:
 8011ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	0716      	lsls	r6, r2, #28
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	d454      	bmi.n	8011d62 <__sflush_r+0xba>
 8011cb8:	684b      	ldr	r3, [r1, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	dc02      	bgt.n	8011cc4 <__sflush_r+0x1c>
 8011cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	dd48      	ble.n	8011d56 <__sflush_r+0xae>
 8011cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cc6:	2e00      	cmp	r6, #0
 8011cc8:	d045      	beq.n	8011d56 <__sflush_r+0xae>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011cd0:	682f      	ldr	r7, [r5, #0]
 8011cd2:	6a21      	ldr	r1, [r4, #32]
 8011cd4:	602b      	str	r3, [r5, #0]
 8011cd6:	d030      	beq.n	8011d3a <__sflush_r+0x92>
 8011cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	0759      	lsls	r1, r3, #29
 8011cde:	d505      	bpl.n	8011cec <__sflush_r+0x44>
 8011ce0:	6863      	ldr	r3, [r4, #4]
 8011ce2:	1ad2      	subs	r2, r2, r3
 8011ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ce6:	b10b      	cbz	r3, 8011cec <__sflush_r+0x44>
 8011ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011cea:	1ad2      	subs	r2, r2, r3
 8011cec:	2300      	movs	r3, #0
 8011cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cf0:	6a21      	ldr	r1, [r4, #32]
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	47b0      	blx	r6
 8011cf6:	1c43      	adds	r3, r0, #1
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	d106      	bne.n	8011d0a <__sflush_r+0x62>
 8011cfc:	6829      	ldr	r1, [r5, #0]
 8011cfe:	291d      	cmp	r1, #29
 8011d00:	d82b      	bhi.n	8011d5a <__sflush_r+0xb2>
 8011d02:	4a2a      	ldr	r2, [pc, #168]	@ (8011dac <__sflush_r+0x104>)
 8011d04:	410a      	asrs	r2, r1
 8011d06:	07d6      	lsls	r6, r2, #31
 8011d08:	d427      	bmi.n	8011d5a <__sflush_r+0xb2>
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	6062      	str	r2, [r4, #4]
 8011d0e:	04d9      	lsls	r1, r3, #19
 8011d10:	6922      	ldr	r2, [r4, #16]
 8011d12:	6022      	str	r2, [r4, #0]
 8011d14:	d504      	bpl.n	8011d20 <__sflush_r+0x78>
 8011d16:	1c42      	adds	r2, r0, #1
 8011d18:	d101      	bne.n	8011d1e <__sflush_r+0x76>
 8011d1a:	682b      	ldr	r3, [r5, #0]
 8011d1c:	b903      	cbnz	r3, 8011d20 <__sflush_r+0x78>
 8011d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d22:	602f      	str	r7, [r5, #0]
 8011d24:	b1b9      	cbz	r1, 8011d56 <__sflush_r+0xae>
 8011d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d2a:	4299      	cmp	r1, r3
 8011d2c:	d002      	beq.n	8011d34 <__sflush_r+0x8c>
 8011d2e:	4628      	mov	r0, r5
 8011d30:	f7ff fb48 	bl	80113c4 <_free_r>
 8011d34:	2300      	movs	r3, #0
 8011d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d38:	e00d      	b.n	8011d56 <__sflush_r+0xae>
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	47b0      	blx	r6
 8011d40:	4602      	mov	r2, r0
 8011d42:	1c50      	adds	r0, r2, #1
 8011d44:	d1c9      	bne.n	8011cda <__sflush_r+0x32>
 8011d46:	682b      	ldr	r3, [r5, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d0c6      	beq.n	8011cda <__sflush_r+0x32>
 8011d4c:	2b1d      	cmp	r3, #29
 8011d4e:	d001      	beq.n	8011d54 <__sflush_r+0xac>
 8011d50:	2b16      	cmp	r3, #22
 8011d52:	d11e      	bne.n	8011d92 <__sflush_r+0xea>
 8011d54:	602f      	str	r7, [r5, #0]
 8011d56:	2000      	movs	r0, #0
 8011d58:	e022      	b.n	8011da0 <__sflush_r+0xf8>
 8011d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d5e:	b21b      	sxth	r3, r3
 8011d60:	e01b      	b.n	8011d9a <__sflush_r+0xf2>
 8011d62:	690f      	ldr	r7, [r1, #16]
 8011d64:	2f00      	cmp	r7, #0
 8011d66:	d0f6      	beq.n	8011d56 <__sflush_r+0xae>
 8011d68:	0793      	lsls	r3, r2, #30
 8011d6a:	680e      	ldr	r6, [r1, #0]
 8011d6c:	bf08      	it	eq
 8011d6e:	694b      	ldreq	r3, [r1, #20]
 8011d70:	600f      	str	r7, [r1, #0]
 8011d72:	bf18      	it	ne
 8011d74:	2300      	movne	r3, #0
 8011d76:	eba6 0807 	sub.w	r8, r6, r7
 8011d7a:	608b      	str	r3, [r1, #8]
 8011d7c:	f1b8 0f00 	cmp.w	r8, #0
 8011d80:	dde9      	ble.n	8011d56 <__sflush_r+0xae>
 8011d82:	6a21      	ldr	r1, [r4, #32]
 8011d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d86:	4643      	mov	r3, r8
 8011d88:	463a      	mov	r2, r7
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	47b0      	blx	r6
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	dc08      	bgt.n	8011da4 <__sflush_r+0xfc>
 8011d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d9a:	81a3      	strh	r3, [r4, #12]
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da4:	4407      	add	r7, r0
 8011da6:	eba8 0800 	sub.w	r8, r8, r0
 8011daa:	e7e7      	b.n	8011d7c <__sflush_r+0xd4>
 8011dac:	dfbffffe 	.word	0xdfbffffe

08011db0 <_fflush_r>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	690b      	ldr	r3, [r1, #16]
 8011db4:	4605      	mov	r5, r0
 8011db6:	460c      	mov	r4, r1
 8011db8:	b913      	cbnz	r3, 8011dc0 <_fflush_r+0x10>
 8011dba:	2500      	movs	r5, #0
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	bd38      	pop	{r3, r4, r5, pc}
 8011dc0:	b118      	cbz	r0, 8011dca <_fflush_r+0x1a>
 8011dc2:	6a03      	ldr	r3, [r0, #32]
 8011dc4:	b90b      	cbnz	r3, 8011dca <_fflush_r+0x1a>
 8011dc6:	f7ff f9bf 	bl	8011148 <__sinit>
 8011dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d0f3      	beq.n	8011dba <_fflush_r+0xa>
 8011dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011dd4:	07d0      	lsls	r0, r2, #31
 8011dd6:	d404      	bmi.n	8011de2 <_fflush_r+0x32>
 8011dd8:	0599      	lsls	r1, r3, #22
 8011dda:	d402      	bmi.n	8011de2 <_fflush_r+0x32>
 8011ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dde:	f7ff fae0 	bl	80113a2 <__retarget_lock_acquire_recursive>
 8011de2:	4628      	mov	r0, r5
 8011de4:	4621      	mov	r1, r4
 8011de6:	f7ff ff5f 	bl	8011ca8 <__sflush_r>
 8011dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dec:	07da      	lsls	r2, r3, #31
 8011dee:	4605      	mov	r5, r0
 8011df0:	d4e4      	bmi.n	8011dbc <_fflush_r+0xc>
 8011df2:	89a3      	ldrh	r3, [r4, #12]
 8011df4:	059b      	lsls	r3, r3, #22
 8011df6:	d4e1      	bmi.n	8011dbc <_fflush_r+0xc>
 8011df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dfa:	f7ff fad3 	bl	80113a4 <__retarget_lock_release_recursive>
 8011dfe:	e7dd      	b.n	8011dbc <_fflush_r+0xc>

08011e00 <__sread>:
 8011e00:	b510      	push	{r4, lr}
 8011e02:	460c      	mov	r4, r1
 8011e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e08:	f000 f9f4 	bl	80121f4 <_read_r>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	bfab      	itete	ge
 8011e10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011e12:	89a3      	ldrhlt	r3, [r4, #12]
 8011e14:	181b      	addge	r3, r3, r0
 8011e16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e1a:	bfac      	ite	ge
 8011e1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e1e:	81a3      	strhlt	r3, [r4, #12]
 8011e20:	bd10      	pop	{r4, pc}

08011e22 <__swrite>:
 8011e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e26:	461f      	mov	r7, r3
 8011e28:	898b      	ldrh	r3, [r1, #12]
 8011e2a:	05db      	lsls	r3, r3, #23
 8011e2c:	4605      	mov	r5, r0
 8011e2e:	460c      	mov	r4, r1
 8011e30:	4616      	mov	r6, r2
 8011e32:	d505      	bpl.n	8011e40 <__swrite+0x1e>
 8011e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e38:	2302      	movs	r3, #2
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f000 f9c8 	bl	80121d0 <_lseek_r>
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e4a:	81a3      	strh	r3, [r4, #12]
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	463b      	mov	r3, r7
 8011e50:	4628      	mov	r0, r5
 8011e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e56:	f000 b9df 	b.w	8012218 <_write_r>

08011e5a <__sseek>:
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e62:	f000 f9b5 	bl	80121d0 <_lseek_r>
 8011e66:	1c43      	adds	r3, r0, #1
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	bf15      	itete	ne
 8011e6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e76:	81a3      	strheq	r3, [r4, #12]
 8011e78:	bf18      	it	ne
 8011e7a:	81a3      	strhne	r3, [r4, #12]
 8011e7c:	bd10      	pop	{r4, pc}

08011e7e <__sclose>:
 8011e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e82:	f000 b973 	b.w	801216c <_close_r>

08011e86 <_realloc_r>:
 8011e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e8a:	4680      	mov	r8, r0
 8011e8c:	4615      	mov	r5, r2
 8011e8e:	460c      	mov	r4, r1
 8011e90:	b921      	cbnz	r1, 8011e9c <_realloc_r+0x16>
 8011e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e96:	4611      	mov	r1, r2
 8011e98:	f7ff b80a 	b.w	8010eb0 <_malloc_r>
 8011e9c:	b92a      	cbnz	r2, 8011eaa <_realloc_r+0x24>
 8011e9e:	f7ff fa91 	bl	80113c4 <_free_r>
 8011ea2:	2400      	movs	r4, #0
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eaa:	f000 f9c7 	bl	801223c <_malloc_usable_size_r>
 8011eae:	4285      	cmp	r5, r0
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	d802      	bhi.n	8011eba <_realloc_r+0x34>
 8011eb4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011eb8:	d8f4      	bhi.n	8011ea4 <_realloc_r+0x1e>
 8011eba:	4629      	mov	r1, r5
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	f7fe fff7 	bl	8010eb0 <_malloc_r>
 8011ec2:	4607      	mov	r7, r0
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d0ec      	beq.n	8011ea2 <_realloc_r+0x1c>
 8011ec8:	42b5      	cmp	r5, r6
 8011eca:	462a      	mov	r2, r5
 8011ecc:	4621      	mov	r1, r4
 8011ece:	bf28      	it	cs
 8011ed0:	4632      	movcs	r2, r6
 8011ed2:	f7ff fa68 	bl	80113a6 <memcpy>
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	4640      	mov	r0, r8
 8011eda:	f7ff fa73 	bl	80113c4 <_free_r>
 8011ede:	463c      	mov	r4, r7
 8011ee0:	e7e0      	b.n	8011ea4 <_realloc_r+0x1e>

08011ee2 <__swbuf_r>:
 8011ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee4:	460e      	mov	r6, r1
 8011ee6:	4614      	mov	r4, r2
 8011ee8:	4605      	mov	r5, r0
 8011eea:	b118      	cbz	r0, 8011ef4 <__swbuf_r+0x12>
 8011eec:	6a03      	ldr	r3, [r0, #32]
 8011eee:	b90b      	cbnz	r3, 8011ef4 <__swbuf_r+0x12>
 8011ef0:	f7ff f92a 	bl	8011148 <__sinit>
 8011ef4:	69a3      	ldr	r3, [r4, #24]
 8011ef6:	60a3      	str	r3, [r4, #8]
 8011ef8:	89a3      	ldrh	r3, [r4, #12]
 8011efa:	071a      	lsls	r2, r3, #28
 8011efc:	d501      	bpl.n	8011f02 <__swbuf_r+0x20>
 8011efe:	6923      	ldr	r3, [r4, #16]
 8011f00:	b943      	cbnz	r3, 8011f14 <__swbuf_r+0x32>
 8011f02:	4621      	mov	r1, r4
 8011f04:	4628      	mov	r0, r5
 8011f06:	f000 f82b 	bl	8011f60 <__swsetup_r>
 8011f0a:	b118      	cbz	r0, 8011f14 <__swbuf_r+0x32>
 8011f0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011f10:	4638      	mov	r0, r7
 8011f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f14:	6823      	ldr	r3, [r4, #0]
 8011f16:	6922      	ldr	r2, [r4, #16]
 8011f18:	1a98      	subs	r0, r3, r2
 8011f1a:	6963      	ldr	r3, [r4, #20]
 8011f1c:	b2f6      	uxtb	r6, r6
 8011f1e:	4283      	cmp	r3, r0
 8011f20:	4637      	mov	r7, r6
 8011f22:	dc05      	bgt.n	8011f30 <__swbuf_r+0x4e>
 8011f24:	4621      	mov	r1, r4
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7ff ff42 	bl	8011db0 <_fflush_r>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1ed      	bne.n	8011f0c <__swbuf_r+0x2a>
 8011f30:	68a3      	ldr	r3, [r4, #8]
 8011f32:	3b01      	subs	r3, #1
 8011f34:	60a3      	str	r3, [r4, #8]
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	1c5a      	adds	r2, r3, #1
 8011f3a:	6022      	str	r2, [r4, #0]
 8011f3c:	701e      	strb	r6, [r3, #0]
 8011f3e:	6962      	ldr	r2, [r4, #20]
 8011f40:	1c43      	adds	r3, r0, #1
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d004      	beq.n	8011f50 <__swbuf_r+0x6e>
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	07db      	lsls	r3, r3, #31
 8011f4a:	d5e1      	bpl.n	8011f10 <__swbuf_r+0x2e>
 8011f4c:	2e0a      	cmp	r6, #10
 8011f4e:	d1df      	bne.n	8011f10 <__swbuf_r+0x2e>
 8011f50:	4621      	mov	r1, r4
 8011f52:	4628      	mov	r0, r5
 8011f54:	f7ff ff2c 	bl	8011db0 <_fflush_r>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d0d9      	beq.n	8011f10 <__swbuf_r+0x2e>
 8011f5c:	e7d6      	b.n	8011f0c <__swbuf_r+0x2a>
	...

08011f60 <__swsetup_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	4b29      	ldr	r3, [pc, #164]	@ (8012008 <__swsetup_r+0xa8>)
 8011f64:	4605      	mov	r5, r0
 8011f66:	6818      	ldr	r0, [r3, #0]
 8011f68:	460c      	mov	r4, r1
 8011f6a:	b118      	cbz	r0, 8011f74 <__swsetup_r+0x14>
 8011f6c:	6a03      	ldr	r3, [r0, #32]
 8011f6e:	b90b      	cbnz	r3, 8011f74 <__swsetup_r+0x14>
 8011f70:	f7ff f8ea 	bl	8011148 <__sinit>
 8011f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f78:	0719      	lsls	r1, r3, #28
 8011f7a:	d422      	bmi.n	8011fc2 <__swsetup_r+0x62>
 8011f7c:	06da      	lsls	r2, r3, #27
 8011f7e:	d407      	bmi.n	8011f90 <__swsetup_r+0x30>
 8011f80:	2209      	movs	r2, #9
 8011f82:	602a      	str	r2, [r5, #0]
 8011f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f88:	81a3      	strh	r3, [r4, #12]
 8011f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f8e:	e033      	b.n	8011ff8 <__swsetup_r+0x98>
 8011f90:	0758      	lsls	r0, r3, #29
 8011f92:	d512      	bpl.n	8011fba <__swsetup_r+0x5a>
 8011f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f96:	b141      	cbz	r1, 8011faa <__swsetup_r+0x4a>
 8011f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f9c:	4299      	cmp	r1, r3
 8011f9e:	d002      	beq.n	8011fa6 <__swsetup_r+0x46>
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f7ff fa0f 	bl	80113c4 <_free_r>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011faa:	89a3      	ldrh	r3, [r4, #12]
 8011fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011fb0:	81a3      	strh	r3, [r4, #12]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	6063      	str	r3, [r4, #4]
 8011fb6:	6923      	ldr	r3, [r4, #16]
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	f043 0308 	orr.w	r3, r3, #8
 8011fc0:	81a3      	strh	r3, [r4, #12]
 8011fc2:	6923      	ldr	r3, [r4, #16]
 8011fc4:	b94b      	cbnz	r3, 8011fda <__swsetup_r+0x7a>
 8011fc6:	89a3      	ldrh	r3, [r4, #12]
 8011fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fd0:	d003      	beq.n	8011fda <__swsetup_r+0x7a>
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	f000 f83f 	bl	8012058 <__smakebuf_r>
 8011fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fde:	f013 0201 	ands.w	r2, r3, #1
 8011fe2:	d00a      	beq.n	8011ffa <__swsetup_r+0x9a>
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	60a2      	str	r2, [r4, #8]
 8011fe8:	6962      	ldr	r2, [r4, #20]
 8011fea:	4252      	negs	r2, r2
 8011fec:	61a2      	str	r2, [r4, #24]
 8011fee:	6922      	ldr	r2, [r4, #16]
 8011ff0:	b942      	cbnz	r2, 8012004 <__swsetup_r+0xa4>
 8011ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ff6:	d1c5      	bne.n	8011f84 <__swsetup_r+0x24>
 8011ff8:	bd38      	pop	{r3, r4, r5, pc}
 8011ffa:	0799      	lsls	r1, r3, #30
 8011ffc:	bf58      	it	pl
 8011ffe:	6962      	ldrpl	r2, [r4, #20]
 8012000:	60a2      	str	r2, [r4, #8]
 8012002:	e7f4      	b.n	8011fee <__swsetup_r+0x8e>
 8012004:	2000      	movs	r0, #0
 8012006:	e7f7      	b.n	8011ff8 <__swsetup_r+0x98>
 8012008:	20000098 	.word	0x20000098

0801200c <__swhatbuf_r>:
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	460c      	mov	r4, r1
 8012010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012014:	2900      	cmp	r1, #0
 8012016:	b096      	sub	sp, #88	@ 0x58
 8012018:	4615      	mov	r5, r2
 801201a:	461e      	mov	r6, r3
 801201c:	da0d      	bge.n	801203a <__swhatbuf_r+0x2e>
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012024:	f04f 0100 	mov.w	r1, #0
 8012028:	bf14      	ite	ne
 801202a:	2340      	movne	r3, #64	@ 0x40
 801202c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012030:	2000      	movs	r0, #0
 8012032:	6031      	str	r1, [r6, #0]
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	b016      	add	sp, #88	@ 0x58
 8012038:	bd70      	pop	{r4, r5, r6, pc}
 801203a:	466a      	mov	r2, sp
 801203c:	f000 f8a6 	bl	801218c <_fstat_r>
 8012040:	2800      	cmp	r0, #0
 8012042:	dbec      	blt.n	801201e <__swhatbuf_r+0x12>
 8012044:	9901      	ldr	r1, [sp, #4]
 8012046:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801204a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801204e:	4259      	negs	r1, r3
 8012050:	4159      	adcs	r1, r3
 8012052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012056:	e7eb      	b.n	8012030 <__swhatbuf_r+0x24>

08012058 <__smakebuf_r>:
 8012058:	898b      	ldrh	r3, [r1, #12]
 801205a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801205c:	079d      	lsls	r5, r3, #30
 801205e:	4606      	mov	r6, r0
 8012060:	460c      	mov	r4, r1
 8012062:	d507      	bpl.n	8012074 <__smakebuf_r+0x1c>
 8012064:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	6123      	str	r3, [r4, #16]
 801206c:	2301      	movs	r3, #1
 801206e:	6163      	str	r3, [r4, #20]
 8012070:	b003      	add	sp, #12
 8012072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012074:	ab01      	add	r3, sp, #4
 8012076:	466a      	mov	r2, sp
 8012078:	f7ff ffc8 	bl	801200c <__swhatbuf_r>
 801207c:	9f00      	ldr	r7, [sp, #0]
 801207e:	4605      	mov	r5, r0
 8012080:	4639      	mov	r1, r7
 8012082:	4630      	mov	r0, r6
 8012084:	f7fe ff14 	bl	8010eb0 <_malloc_r>
 8012088:	b948      	cbnz	r0, 801209e <__smakebuf_r+0x46>
 801208a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801208e:	059a      	lsls	r2, r3, #22
 8012090:	d4ee      	bmi.n	8012070 <__smakebuf_r+0x18>
 8012092:	f023 0303 	bic.w	r3, r3, #3
 8012096:	f043 0302 	orr.w	r3, r3, #2
 801209a:	81a3      	strh	r3, [r4, #12]
 801209c:	e7e2      	b.n	8012064 <__smakebuf_r+0xc>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	6020      	str	r0, [r4, #0]
 80120a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120a6:	81a3      	strh	r3, [r4, #12]
 80120a8:	9b01      	ldr	r3, [sp, #4]
 80120aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80120ae:	b15b      	cbz	r3, 80120c8 <__smakebuf_r+0x70>
 80120b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120b4:	4630      	mov	r0, r6
 80120b6:	f000 f87b 	bl	80121b0 <_isatty_r>
 80120ba:	b128      	cbz	r0, 80120c8 <__smakebuf_r+0x70>
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	f023 0303 	bic.w	r3, r3, #3
 80120c2:	f043 0301 	orr.w	r3, r3, #1
 80120c6:	81a3      	strh	r3, [r4, #12]
 80120c8:	89a3      	ldrh	r3, [r4, #12]
 80120ca:	431d      	orrs	r5, r3
 80120cc:	81a5      	strh	r5, [r4, #12]
 80120ce:	e7cf      	b.n	8012070 <__smakebuf_r+0x18>

080120d0 <_putc_r>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	460d      	mov	r5, r1
 80120d4:	4614      	mov	r4, r2
 80120d6:	4606      	mov	r6, r0
 80120d8:	b118      	cbz	r0, 80120e2 <_putc_r+0x12>
 80120da:	6a03      	ldr	r3, [r0, #32]
 80120dc:	b90b      	cbnz	r3, 80120e2 <_putc_r+0x12>
 80120de:	f7ff f833 	bl	8011148 <__sinit>
 80120e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120e4:	07d8      	lsls	r0, r3, #31
 80120e6:	d405      	bmi.n	80120f4 <_putc_r+0x24>
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	0599      	lsls	r1, r3, #22
 80120ec:	d402      	bmi.n	80120f4 <_putc_r+0x24>
 80120ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120f0:	f7ff f957 	bl	80113a2 <__retarget_lock_acquire_recursive>
 80120f4:	68a3      	ldr	r3, [r4, #8]
 80120f6:	3b01      	subs	r3, #1
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	60a3      	str	r3, [r4, #8]
 80120fc:	da05      	bge.n	801210a <_putc_r+0x3a>
 80120fe:	69a2      	ldr	r2, [r4, #24]
 8012100:	4293      	cmp	r3, r2
 8012102:	db12      	blt.n	801212a <_putc_r+0x5a>
 8012104:	b2eb      	uxtb	r3, r5
 8012106:	2b0a      	cmp	r3, #10
 8012108:	d00f      	beq.n	801212a <_putc_r+0x5a>
 801210a:	6823      	ldr	r3, [r4, #0]
 801210c:	1c5a      	adds	r2, r3, #1
 801210e:	6022      	str	r2, [r4, #0]
 8012110:	701d      	strb	r5, [r3, #0]
 8012112:	b2ed      	uxtb	r5, r5
 8012114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012116:	07da      	lsls	r2, r3, #31
 8012118:	d405      	bmi.n	8012126 <_putc_r+0x56>
 801211a:	89a3      	ldrh	r3, [r4, #12]
 801211c:	059b      	lsls	r3, r3, #22
 801211e:	d402      	bmi.n	8012126 <_putc_r+0x56>
 8012120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012122:	f7ff f93f 	bl	80113a4 <__retarget_lock_release_recursive>
 8012126:	4628      	mov	r0, r5
 8012128:	bd70      	pop	{r4, r5, r6, pc}
 801212a:	4629      	mov	r1, r5
 801212c:	4622      	mov	r2, r4
 801212e:	4630      	mov	r0, r6
 8012130:	f7ff fed7 	bl	8011ee2 <__swbuf_r>
 8012134:	4605      	mov	r5, r0
 8012136:	e7ed      	b.n	8012114 <_putc_r+0x44>

08012138 <memmove>:
 8012138:	4288      	cmp	r0, r1
 801213a:	b510      	push	{r4, lr}
 801213c:	eb01 0402 	add.w	r4, r1, r2
 8012140:	d902      	bls.n	8012148 <memmove+0x10>
 8012142:	4284      	cmp	r4, r0
 8012144:	4623      	mov	r3, r4
 8012146:	d807      	bhi.n	8012158 <memmove+0x20>
 8012148:	1e43      	subs	r3, r0, #1
 801214a:	42a1      	cmp	r1, r4
 801214c:	d008      	beq.n	8012160 <memmove+0x28>
 801214e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012156:	e7f8      	b.n	801214a <memmove+0x12>
 8012158:	4402      	add	r2, r0
 801215a:	4601      	mov	r1, r0
 801215c:	428a      	cmp	r2, r1
 801215e:	d100      	bne.n	8012162 <memmove+0x2a>
 8012160:	bd10      	pop	{r4, pc}
 8012162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801216a:	e7f7      	b.n	801215c <memmove+0x24>

0801216c <_close_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4d06      	ldr	r5, [pc, #24]	@ (8012188 <_close_r+0x1c>)
 8012170:	2300      	movs	r3, #0
 8012172:	4604      	mov	r4, r0
 8012174:	4608      	mov	r0, r1
 8012176:	602b      	str	r3, [r5, #0]
 8012178:	f7ef fb73 	bl	8001862 <_close>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_close_r+0x1a>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_close_r+0x1a>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20002554 	.word	0x20002554

0801218c <_fstat_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4d07      	ldr	r5, [pc, #28]	@ (80121ac <_fstat_r+0x20>)
 8012190:	2300      	movs	r3, #0
 8012192:	4604      	mov	r4, r0
 8012194:	4608      	mov	r0, r1
 8012196:	4611      	mov	r1, r2
 8012198:	602b      	str	r3, [r5, #0]
 801219a:	f7ef fb6e 	bl	800187a <_fstat>
 801219e:	1c43      	adds	r3, r0, #1
 80121a0:	d102      	bne.n	80121a8 <_fstat_r+0x1c>
 80121a2:	682b      	ldr	r3, [r5, #0]
 80121a4:	b103      	cbz	r3, 80121a8 <_fstat_r+0x1c>
 80121a6:	6023      	str	r3, [r4, #0]
 80121a8:	bd38      	pop	{r3, r4, r5, pc}
 80121aa:	bf00      	nop
 80121ac:	20002554 	.word	0x20002554

080121b0 <_isatty_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d06      	ldr	r5, [pc, #24]	@ (80121cc <_isatty_r+0x1c>)
 80121b4:	2300      	movs	r3, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	4608      	mov	r0, r1
 80121ba:	602b      	str	r3, [r5, #0]
 80121bc:	f7ef fb6d 	bl	800189a <_isatty>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d102      	bne.n	80121ca <_isatty_r+0x1a>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b103      	cbz	r3, 80121ca <_isatty_r+0x1a>
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	bd38      	pop	{r3, r4, r5, pc}
 80121cc:	20002554 	.word	0x20002554

080121d0 <_lseek_r>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	4d07      	ldr	r5, [pc, #28]	@ (80121f0 <_lseek_r+0x20>)
 80121d4:	4604      	mov	r4, r0
 80121d6:	4608      	mov	r0, r1
 80121d8:	4611      	mov	r1, r2
 80121da:	2200      	movs	r2, #0
 80121dc:	602a      	str	r2, [r5, #0]
 80121de:	461a      	mov	r2, r3
 80121e0:	f7ef fb66 	bl	80018b0 <_lseek>
 80121e4:	1c43      	adds	r3, r0, #1
 80121e6:	d102      	bne.n	80121ee <_lseek_r+0x1e>
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	b103      	cbz	r3, 80121ee <_lseek_r+0x1e>
 80121ec:	6023      	str	r3, [r4, #0]
 80121ee:	bd38      	pop	{r3, r4, r5, pc}
 80121f0:	20002554 	.word	0x20002554

080121f4 <_read_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4d07      	ldr	r5, [pc, #28]	@ (8012214 <_read_r+0x20>)
 80121f8:	4604      	mov	r4, r0
 80121fa:	4608      	mov	r0, r1
 80121fc:	4611      	mov	r1, r2
 80121fe:	2200      	movs	r2, #0
 8012200:	602a      	str	r2, [r5, #0]
 8012202:	461a      	mov	r2, r3
 8012204:	f7ef faf4 	bl	80017f0 <_read>
 8012208:	1c43      	adds	r3, r0, #1
 801220a:	d102      	bne.n	8012212 <_read_r+0x1e>
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	b103      	cbz	r3, 8012212 <_read_r+0x1e>
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	20002554 	.word	0x20002554

08012218 <_write_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4d07      	ldr	r5, [pc, #28]	@ (8012238 <_write_r+0x20>)
 801221c:	4604      	mov	r4, r0
 801221e:	4608      	mov	r0, r1
 8012220:	4611      	mov	r1, r2
 8012222:	2200      	movs	r2, #0
 8012224:	602a      	str	r2, [r5, #0]
 8012226:	461a      	mov	r2, r3
 8012228:	f7ef faff 	bl	800182a <_write>
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	d102      	bne.n	8012236 <_write_r+0x1e>
 8012230:	682b      	ldr	r3, [r5, #0]
 8012232:	b103      	cbz	r3, 8012236 <_write_r+0x1e>
 8012234:	6023      	str	r3, [r4, #0]
 8012236:	bd38      	pop	{r3, r4, r5, pc}
 8012238:	20002554 	.word	0x20002554

0801223c <_malloc_usable_size_r>:
 801223c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012240:	1f18      	subs	r0, r3, #4
 8012242:	2b00      	cmp	r3, #0
 8012244:	bfbc      	itt	lt
 8012246:	580b      	ldrlt	r3, [r1, r0]
 8012248:	18c0      	addlt	r0, r0, r3
 801224a:	4770      	bx	lr

0801224c <_init>:
 801224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224e:	bf00      	nop
 8012250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012252:	bc08      	pop	{r3}
 8012254:	469e      	mov	lr, r3
 8012256:	4770      	bx	lr

08012258 <_fini>:
 8012258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225a:	bf00      	nop
 801225c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225e:	bc08      	pop	{r3}
 8012260:	469e      	mov	lr, r3
 8012262:	4770      	bx	lr
